concrete recipehelp_eng of recipehelp = TDM_eng, Integers_eng ** open Utils_eng, Prelude in {

lin

top = (mkdef "start view");
go_back = (mkverb "go to previous step" "go to previous step" "go to previous step"|mkverb "go back" "go back" "go back");
go_to_next = (mkverb "go to next step" "go to next step" "go to next step"|mkverb "go to next" "go to next" "go to next");
up = (mkverb "back" "back" "back");
False = ss ((("" ++ CAPIT ++ "no")));
step5 = ss (("step five"));
step4 = ss (("step four"));
step3 = ss (("step three"));
step2 = ss (("step two"));
step1 = ss (("step one"));
True = ss ((("" ++ CAPIT ++ "yes")));
step_to_choose = ss "which step";
step_to_choose_sys_answer individual = answer (individual.s) individual.s;
step_to_choose_sortal_usr_answer answer = answer;
step_to_choose_propositional_usr_answer answer = answer;
step_user_answer answer = answer;
step_individual individual = individual;
go_to_step = ss (("go to step"));
go_to_step_resolve_ynq_1 = resolve_ynq go_to_step;
go_to_step_user_question_2 step_to_choose = ss ("go to " ++ step_to_choose.s);
ask_go_to_step = ss (("go to a step"));
go_to_step_sys_answer_0 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r0_"));
go_to_step_sys_answer_1 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r1_"));
go_to_step_sys_answer_2 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r2_"));
go_to_step_sys_answer_3 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r3_"));
go_to_step_sys_answer_4 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r4_"));
go_to_step_sys_answer_5 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r5_"));
go_to_step_sys_answer_6 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r6_"));
go_to_step_sys_answer_7 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r7_"));
go_to_step_sys_answer_8 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r8_"));
go_to_step_sys_answer_9 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r9_"));
go_to_step_sortal_usr_answer answer = answer;
go_to_step_propositional_usr_answer answer = answer;
say_step = ss (("tell me what to do"));
say_step_resolve_ynq_3 = resolve_ynq say_step;
ask_say_step = ss (("tell me what to do"|"what should i do"));
say_step_sys_answer_0 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r0_"));
say_step_sys_answer_1 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r1_"));
say_step_sys_answer_2 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r2_"));
say_step_sys_answer_3 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r3_"));
say_step_sys_answer_4 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r4_"));
say_step_sys_answer_5 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r5_"));
say_step_sys_answer_6 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r6_"));
say_step_sys_answer_7 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r7_"));
say_step_sys_answer_8 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r8_"));
say_step_sys_answer_9 = answer (("ok _" ++ CAPIT ++ BIND ++ "s" ++ CAPIT ++ BIND ++ "t" ++ CAPIT ++ BIND ++ "r9_"));
say_step_sortal_usr_answer answer = answer;
say_step_propositional_usr_answer answer = answer;
done = ss "are you done";
done_sys_answer individual = answer (individual.s) individual.s;
done_sortal_usr_answer answer = answer;
done_propositional_usr_answer answer = answer;
Boolean_user_answer answer = answer;
Boolean_individual individual = individual;
unknown_string unknown = unknown;
mkUnknown string = string;
report_ended_go_back_4 = ss ("went to the previous step");
report_failed_go_back_undefined_failure_5 = undefined_device_action_failure;
report_ended_go_to_next_6 = ss ("next");
report_failed_go_to_next_undefined_failure_7 = undefined_device_action_failure;
}
