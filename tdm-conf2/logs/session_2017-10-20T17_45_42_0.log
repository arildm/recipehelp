2017-10-20 17:45:42,099 - session_2017-10-20T17_45_42_0 - DEBUG - Backend()
2017-10-20 17:45:42,100 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.initialize()
2017-10-20 17:45:42,129 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f636792af10>>, False])
2017-10-20 17:45:42,129 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f636792af10>>, 'eng'])
2017-10-20 17:45:42,129 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 17:45:42,129 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 17:45:42,129 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f636792af10>>, True, 'disabled'])
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f636792af10>>])
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f636792af10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f636792af10>>, 'eng', False, True])
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - Backend initialized
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - Backend uses language 'eng'
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - running module InterpretModule
2017-10-20 17:45:42,130 - session_2017-10-20T17_45_42_0 - DEBUG - running module DmeModule
2017-10-20 17:45:42,132 - session_2017-10-20T17_45_42_0 - DEBUG - running module DeviceManager
2017-10-20 17:45:42,132 - session_2017-10-20T17_45_42_0 - DEBUG - running module GenerateModule
2017-10-20 17:45:42,132 - session_2017-10-20T17_45_42_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 17:45:42,133 - session_2017-10-20T17_45_42_0 - DEBUG - running module GuiBackend
2017-10-20 17:45:42,133 - session_2017-10-20T17_45_42_0 - DEBUG - running module CogloadModule
2017-10-20 17:45:42,133 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:45:42,134 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:45:42,134 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 17:45:42,134 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 17:45:42,134 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 17:45:42,135 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:42,135 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:45:42,167 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 17:45:42,168 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:45:42,168 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 17:45:42,169 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,169 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 17:45:42,169 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 17:45:42,169 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 17:45:42,170 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:42,170 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:45:42,172 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 17:45:42,173 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:45:42,173 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:45:42,173 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,173 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,173 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,173 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:45:42,173 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:45:42,175 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514342.17
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:42,175 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:45:42,175 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:45:42,175 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:45:42,177 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:42,178 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:45:42,178 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:45:42,179 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:42,180 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:45:42,180 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:45:42,180 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:45:42,181 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:45:42,181 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:45:42,181 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:45:42,181 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:45:42,181 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:45:42,181 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:45:42,181 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:45:42,181 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:45:42,182 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:42,183 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:42,185 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:45:42,185 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:42,188 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:45:42,188 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:42,188 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:42,188 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:42,188 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:45:42,188 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:42,188 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:42,189 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:42,189 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:42,189 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:45:42,189 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:45:42,189 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: select
2017-10-20 17:45:42,190 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514342.17
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:42,190 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:45:42,193 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:45:42,193 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:42,195 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:45:42,195 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:45:42,198 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:45:42,198 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:45:42,200 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:45:42,201 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:45:42,201 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:45:42,201 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:45:42,203 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:42,203 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:45:42,203 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:45:42,205 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 17:45:42,205 - session_2017-10-20T17_45_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:45:42,205 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:45:42,206 - session_2017-10-20T17_45_42_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,206 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,206 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,206 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,206 - session_2017-10-20T17_45_42_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:45:42,206 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 17:45:42,206 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:45:42,206 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:45:42,207 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:45:42,207 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 17:45:42,207 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:42,208 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:45:42,208 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:45:42,208 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:45:42,209 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:42,209 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 17:45:42,209 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:45:42,210 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:45:42,210 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:42,210 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:42,211 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:42,211 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:45:42,211 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:45:42,211 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:45:42,211 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:45:42,211 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:45:42,212 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:45:42,212 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:45:42,213 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:45:42,213 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:45:42,214 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:42,216 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:42,216 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:45:42,216 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:45:42,216 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:45:42,216 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:45:42,216 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:45:42,216 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:45:42,217 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:45:42,217 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:45:42,217 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:45:42,217 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:45:42,217 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:45:42,217 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:45:42,218 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:42,218 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:45:42,218 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:45:42,218 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:45:42,219 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:42,219 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:45:42,258 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:45:42,259 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:45:42,259 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:45:42,259 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:45:42,259 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:45:42,259 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:45:42,259 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:45:42,259 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:45:42,260 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:45:42,261 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514342.26
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:42,261 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:45:42,261 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:45:42,261 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:45:42,264 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 17:45:42,264 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:45:42,264 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:45:42,267 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:42,267 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:45:42,267 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:45:42,267 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:45:42,267 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:45:42,267 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:45:42,267 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:45:42,268 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:45:42,268 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:45:42,268 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:45:42,268 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:45:42,268 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:42,272 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:45:42,272 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:45:42,272 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:42,272 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:45:42,272 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:42,272 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:42,275 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:45:42,275 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:45:42,275 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:45:42,276 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:42,277 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:45:42,277 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:42,277 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:42,277 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:45:42,277 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:42,277 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:42,277 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:42,278 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:42,278 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:45:42,280 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:42,280 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:45:42,280 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:45:42,280 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:45:42,280 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:45:42,280 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:45:42,281 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:42,281 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:45:42,281 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:45:42,281 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:45:42,281 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:45:45,944 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to hell"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:45:45,944 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:45:45,944 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None))
2017-10-20 17:45:45,944 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 17:45:45,944 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 17:45:45,945 - session_2017-10-20T17_45_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to hell"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:45:45,945 - session_2017-10-20T17_45_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:45:45,950 - session_2017-10-20T17_45_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:45:45,951 - session_2017-10-20T17_45_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])} for DDD 'recipehelp'
2017-10-20 17:45:45,951 - session_2017-10-20T17_45_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
2017-10-20 17:45:45,951 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:45:45,951 - session_2017-10-20T17_45_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to hell", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to hell"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to hell", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:45:45,951 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 17:45:45,952 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:45:45,952 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:45:45,952 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:45:45,952 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:45:45,952 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:45:45,953 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:45,953 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:45:45,953 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:45:45,953 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:45:45,954 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:45:45,954 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:45:45,956 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514345.95
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:45,956 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:45:45,959 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
-- END TIS changes --
2017-10-20 17:45:45,959 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:45:45,965 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-20 17:45:45,965 - session_2017-10-20T17_45_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:45:45,966 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:45:45,972 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:45:45,972 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:45:45,978 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:45:45,979 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:45:45,979 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:45:45,981 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:45,981 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:45:45,981 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:45:45,986 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 17:45:45,986 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:45:45,986 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:45:45,986 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:45:45,986 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:45:45,986 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:45:45,986 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
2017-10-20 17:45:45,986 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:45:45,987 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
2017-10-20 17:45:45,987 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:45,990 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-20 17:45:45,990 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:45:45,990 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:45,993 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:45:45,993 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:45:45,993 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:45,997 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:45:45,997 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:45:45,997 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:45:45,997 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:45,997 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:45,997 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:45,997 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:45:45,998 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:45:45,998 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:45,998 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:45:45,998 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:45,998 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:45,998 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:45:46,001 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:45:46,001 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:46,001 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:46,001 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:46,002 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:46,002 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:45:46,002 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None)
2017-10-20 17:45:46,002 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:45:46,002 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: select
2017-10-20 17:45:46,003 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514345.95
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:46,003 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:45:46,007 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:45:46,007 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:46,011 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:45:46,011 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:45:46,014 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:45:46,014 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:45:46,014 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:45:46,017 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:45:46,017 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:45:46,020 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:45:46,020 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:45:46,021 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:45:46,021 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:45:46,023 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:46,023 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:45:46,023 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:45:46,025 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:46,026 - session_2017-10-20T17_45_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:45:46,026 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:45:46,026 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None))
2017-10-20 17:45:46,026 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None)
2017-10-20 17:45:46,027 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to hell", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:45:46,027 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:46,027 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:45:46,027 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:45:46,027 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:45:46,028 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:46,029 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:45:46,029 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:45:46,029 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:45:46,030 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:46,030 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:46,032 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:46,032 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 17:45:46,032 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:45:46,032 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:45:46,032 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:45:46,032 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:45:46,032 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:45:46,033 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:45:46,033 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:45:46,033 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:45:46,033 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:45:46,033 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:45:46,034 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 17:45:46,034 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:45:46,035 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:46,038 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:46,038 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:45:46,038 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:45:46,038 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 17:45:46,038 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:45:46,038 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:45:46,038 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:45:46,038 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:45:46,039 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:45:46,039 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:45:46,039 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:45:46,039 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:45:46,039 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-20 17:45:46,040 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:45:46,040 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:45:46,041 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:46,041 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:45:46,041 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:45:46,041 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:45:46,042 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:46,042 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:45:46,046 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:45:46,047 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:45:46,047 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 17:45:46,047 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 17:45:46,047 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:45:46,048 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:45:46,048 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:45:46,048 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:45:46,048 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-20 17:45:46,050 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514346.05
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:46,050 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:45:46,050 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:45:46,050 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:45:46,057 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:45:46,057 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:45:46,057 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:45:46,060 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:45:46,061 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:46,066 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:45:46,066 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:45:46,066 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:46,066 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:45:46,066 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:46,066 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:46,070 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:45:46,070 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:45:46,070 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:46,070 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:45:46,070 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:46,071 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:46,074 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 17:45:46,074 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:45:46,074 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:45:46,075 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:46,076 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:45:46,076 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:46,076 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:46,076 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:45:46,076 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:46,076 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:46,077 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:46,077 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:46,077 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:45:46,079 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:46,079 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:45:46,080 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:45:46,080 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:45:46,080 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:45:46,080 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:45:46,080 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:46,081 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:45:46,081 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:45:46,081 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:45:46,081 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:45:58,902 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:45:58,902 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:45:58,902 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 17:45:58,902 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:45:58,902 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:45:58,902 - session_2017-10-20T17_45_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:45:58,903 - session_2017-10-20T17_45_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:45:58,905 - session_2017-10-20T17_45_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:45:58,905 - session_2017-10-20T17_45_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-20 17:45:58,905 - session_2017-10-20T17_45_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-20 17:45:58,905 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:45:58,905 - session_2017-10-20T17_45_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:45:58,906 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:45:58,906 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:45:58,906 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:45:58,906 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:45:58,906 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:45:58,906 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:45:58,907 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:58,907 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:45:58,907 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:45:58,908 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:45:58,908 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:45:58,908 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:45:58,910 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514358.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:58,910 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:45:58,915 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-20 17:45:58,915 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:45:58,920 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-20 17:45:58,926 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-20 17:45:58,927 - session_2017-10-20T17_45_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:45:58,927 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:45:58,931 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 17:45:58,931 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:45:58,936 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
-- END TIS changes --
2017-10-20 17:45:58,936 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:45:58,937 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:45:58,939 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:58,939 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:45:58,939 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 17:45:58,946 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:58,950 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:45:58,950 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:45:58,950 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:58,954 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:45:58,954 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:45:58,957 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:45:58,957 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:58,957 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:45:58,957 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:45:58,957 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:58,957 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:58,958 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:58,958 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:45:58,958 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:45:58,958 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:58,958 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:45:58,958 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:58,961 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:45:58,961 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:58,961 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:58,965 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:45:58,965 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:58,965 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:58,965 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:58,965 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:45:58,968 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:45:58,968 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:58,968 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:58,968 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:58,968 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:58,969 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:45:58,969 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:45:58,969 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:45:58,969 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:45:58,969 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: select
2017-10-20 17:45:58,970 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514358.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:58,970 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:45:58,974 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose a step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:45:58,974 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:58,977 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:45:58,977 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:45:58,980 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 17:45:58,980 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:45:58,982 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:45:58,982 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:45:58,983 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:45:58,983 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:45:58,985 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:58,985 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:45:58,985 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:45:58,988 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:45:58,988 - session_2017-10-20T17_45_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:45:58,988 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:45:58,988 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-20 17:45:58,988 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:45:58,989 - session_2017-10-20T17_45_42_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:45:58,989 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-20 17:45:58,989 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:45:58,989 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:45:58,990 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:58,990 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:45:58,990 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:45:58,990 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:45:58,991 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:58,991 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:45:58,992 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:45:58,992 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:45:58,992 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:58,992 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:58,993 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:58,993 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:45:58,994 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:45:58,994 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:45:58,994 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-20 17:45:58,994 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:45:58,996 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:58,997 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:45:58,998 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:45:58,998 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:45:58,999 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:45:58,999 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:45:58,999 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:45:59,001 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f63652393b0>]
2017-10-20 17:45:59,001 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f63652393b0>], sender=GuiBackend, reason=None)
2017-10-20 17:45:59,001 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:45:59,001 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-20 17:45:59,001 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:45:59,002 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:45:59,002 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:59,003 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:45:59,003 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:45:59,004 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:45:59,005 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:59,007 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f63652393b0>], sender=GuiBackend, reason=None))
2017-10-20 17:45:59,007 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f63652393b0>], sender=GuiBackend, reason=None)
2017-10-20 17:45:59,008 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:45:59,008 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:45:59,010 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:59,010 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:45:59,010 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:45:59,010 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-20 17:45:59,010 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-20 17:45:59,011 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:45:59,011 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:45:59,011 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:45:59,012 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:45:59,012 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-20 17:45:59,014 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514359.01
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:45:59,014 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:45:59,014 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:45:59,014 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:45:59,021 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:45:59,021 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:45:59,021 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:45:59,023 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:45:59,023 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:45:59,023 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:45:59,023 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:45:59,024 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:45:59,024 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:45:59,024 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:45:59,024 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:45:59,024 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:45:59,024 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:45:59,024 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:45:59,024 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:45:59,027 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose a step")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:45:59,028 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:45:59,028 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:59,031 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                            ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:45:59,031 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:45:59,031 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:59,031 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:45:59,031 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:45:59,031 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:45:59,032 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:45:59,033 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:45:59,033 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:45:59,033 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:45:59,033 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:45:59,036 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:45:59,036 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:45:59,036 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:45:59,036 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:45:59,036 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:45:59,037 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:45:59,037 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:45:59,037 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 17:45:59,037 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:45:59,038 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:45:59,038 - session_2017-10-20T17_45_42_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f636521ed40>:1.0
2017-10-20 17:45:59,038 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:46:00,038 - session_2017-10-20T17_45_42_0 - DEBUG - Timeout fired
2017-10-20 17:46:00,038 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:46:00,038 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:46:00,039 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:46:00,039 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:46:00,040 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514360.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:46:00,040 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:46:00,040 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:46:00,042 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:46:00,042 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:46:00,047 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:46:00,047 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:46:00,047 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:46:00,049 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:46:00,049 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:46:00,049 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:46:00,049 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:46:00,049 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:00,050 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:00,051 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:46:00,051 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:46:00,051 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:00,051 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:46:00,051 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:00,054 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:46:00,054 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:00,054 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:00,057 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose a step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:46:00,057 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:00,057 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:00,057 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:00,058 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:46:00,058 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:00,058 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:00,058 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:00,058 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:00,058 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:46:00,058 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:46:00,059 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: select
2017-10-20 17:46:00,060 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514360.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:46:00,060 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:46:00,064 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose a step")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:46:00,065 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:00,067 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:46:00,067 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:46:00,069 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:46:00,070 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:46:00,072 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:46:00,073 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:46:00,073 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:46:00,073 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:46:00,075 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:46:00,075 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:46:00,075 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:46:00,077 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:46:00,078 - session_2017-10-20T17_45_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:46:00,078 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:46:50,905 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:46:50,905 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:46:50,906 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 17:46:50,906 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:46:50,906 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:46:50,906 - session_2017-10-20T17_45_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:46:50,906 - session_2017-10-20T17_45_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:46:50,907 - session_2017-10-20T17_45_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:46:50,907 - session_2017-10-20T17_45_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-20 17:46:50,908 - session_2017-10-20T17_45_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-20 17:46:50,908 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:46:50,908 - session_2017-10-20T17_45_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:46:50,908 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:46:50,908 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:46:50,909 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:46:50,909 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:46:50,909 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:50,909 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 17:46:50,910 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:46:50,910 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:46:50,910 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:50,911 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:50,911 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:50,912 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:46:50,912 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:46:50,912 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:46:50,912 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:46:50,912 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 17:46:50,912 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 17:46:50,913 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:46:50,913 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:46:50,913 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:46:50,914 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:50,916 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:50,916 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:46:50,916 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:46:50,916 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:46:50,916 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:46:50,916 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:46:50,916 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:46:50,917 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f63649847a0>]
2017-10-20 17:46:50,917 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f63649847a0>], sender=GuiBackend, reason=None)
2017-10-20 17:46:50,917 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:46:50,917 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:46:50,917 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:46:50,917 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:46:50,917 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:46:50,917 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 17:46:50,918 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:50,918 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:46:50,918 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:46:50,918 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:46:50,919 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:50,920 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f63649847a0>], sender=GuiBackend, reason=None))
2017-10-20 17:46:50,920 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f63649847a0>], sender=GuiBackend, reason=None)
2017-10-20 17:46:50,920 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:46:50,921 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:50,921 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:46:50,940 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:46:50,940 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:46:50,941 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:46:50,941 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:46:50,941 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:46:50,941 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:46:50,941 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:46:50,941 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:46:50,941 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:46:50,942 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514410.94
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:46:50,943 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:46:50,943 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:46:50,943 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:46:50,946 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:46:50,947 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:46:50,947 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:46:50,950 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:46:50,951 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:50,954 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:46:50,954 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:46:50,954 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:50,955 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:46:50,955 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:50,955 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:50,958 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:46:50,958 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:46:50,958 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:50,958 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:46:50,958 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:50,959 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:46:50,959 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:46:50,959 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:50,959 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:50,959 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:50,959 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:46:50,959 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:46:50,959 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:50,960 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:46:50,960 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:50,960 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:50,960 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:46:50,960 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:50,960 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:50,960 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:50,961 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:50,961 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:46:50,963 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:46:50,963 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:46:50,963 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:46:50,963 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:46:50,963 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:46:50,964 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:46:50,964 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:50,964 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:46:50,964 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:46:50,965 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:46:50,965 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:46:50,966 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:46:50,966 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:46:50,966 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:46:50,967 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514410.97
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:46:50,967 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:46:50,971 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-20 17:46:50,971 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:46:50,972 - session_2017-10-20T17_45_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:46:50,972 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:46:50,976 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
-- END TIS changes --
2017-10-20 17:46:50,976 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:46:50,983 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:46:50,984 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:46:50,984 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:46:50,987 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:46:50,987 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:46:50,987 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:46:50,993 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:46:50,994 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:46:50,994 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:46:50,996 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:46:50,996 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:50,997 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:46:50,998 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:50,998 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:50,998 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:50,998 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:46:51,002 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: accommodateDependentIssue
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:46:51,003 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:retract
2017-10-20 17:46:51,003 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:46:51,003 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:51,003 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:51,003 - session_2017-10-20T17_45_42_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:51,003 - session_2017-10-20T17_45_42_0 - INFO - breaking out: question raising move
2017-10-20 17:46:51,003 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:46:51,003 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:51,004 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:51,004 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:51,004 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:46:51,004 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:46:51,005 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:51,005 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:46:51,005 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:51,005 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:51,006 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:46:51,006 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:51,006 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:51,006 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:51,006 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:51,006 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:46:51,007 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:46:51,007 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:46:51,007 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: select
2017-10-20 17:46:51,008 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514410.97
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:46:51,008 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:46:51,012 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:46:51,012 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:46:51,016 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
?                                 -----------------------------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
-- END TIS changes --
2017-10-20 17:46:51,016 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:46:51,016 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:46:51,019 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
-- END TIS changes --
2017-10-20 17:46:51,019 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:46:51,019 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:46:51,019 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:46:51,019 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:46:51,022 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:46:51,022 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:46:51,022 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:46:51,025 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: setMediumTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 2.0
?                       ^
-- END TIS changes --
2017-10-20 17:46:51,025 - session_2017-10-20T17_45_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
2017-10-20 17:46:51,026 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:46:51,026 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-20 17:46:51,026 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:46:51,026 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:46:51,027 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:51,027 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:46:51,027 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:46:51,027 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:46:51,028 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:51,029 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:46:51,029 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:46:51,029 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:46:51,029 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:51,030 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:51,031 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:51,031 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:accommodate:?X.go_to_step(X)), facts={})
2017-10-20 17:46:51,031 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:accommodate:?X.go_to_step(X))
2017-10-20 17:46:51,032 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X)))), facts={})
2017-10-20 17:46:51,032 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))
2017-10-20 17:46:51,032 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:accommodate:?X.go_to_step(X))
2017-10-20 17:46:51,032 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:accommodate:?X.go_to_step(X)) generated as u'So,'
2017-10-20 17:46:51,032 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))
2017-10-20 17:46:51,033 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X)))) generated as u'You want to know go to step.'
2017-10-20 17:46:51,034 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [So,, You want to know go to step.], sender=GenerateModule, reason=None)
2017-10-20 17:46:51,035 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:51,037 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [{value: answer(yes), title: Yes}, {value: answer(no), title: No}], title: You want to know go to step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:46:51,038 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:46:51,038 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:46:51,038 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
2017-10-20 17:46:51,038 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:accommodate:?X.go_to_step(X)), facts={})
2017-10-20 17:46:51,038 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:accommodate:?X.go_to_step(X))
2017-10-20 17:46:51,039 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X)))), facts={})
2017-10-20 17:46:51,039 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))
2017-10-20 17:46:51,040 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f63649f0e60>]
2017-10-20 17:46:51,040 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f63649f0e60>], sender=GuiBackend, reason=None)
2017-10-20 17:46:51,040 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:46:51,040 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [So,, You want to know go to step.], sender=GenerateModule, reason=None))
2017-10-20 17:46:51,040 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [So,, You want to know go to step.], sender=GenerateModule, reason=None)
2017-10-20 17:46:51,040 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["So,", "You want to know go to step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:46:51,041 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:51,041 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [{value: answer(yes), title: Yes}, {value: answer(no), title: No}], title: You want to know go to step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:46:51,042 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [{value: answer(yes), title: Yes}, {value: answer(no), title: No}], title: You want to know go to step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:46:51,042 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [{"value": "answer(yes)", "title": "Yes"}, {"value": "answer(no)", "title": "No"}], "title": "You want to know go to step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:46:51,043 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:51,043 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f63649f0e60>], sender=GuiBackend, reason=None))
2017-10-20 17:46:51,043 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f63649f0e60>], sender=GuiBackend, reason=None)
2017-10-20 17:46:51,043 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [{"29687f5934314b7ff2716cd9f6c1a5c9.Element": {"name": "move", "title": "", "items": [{"29687f5934314b7ff2716cd9f6c1a5c9.Item": {"attributes": null, "selected": false, "predicted": false, "value": "answer(yes)", "title": "Yes"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Item": {"attributes": null, "selected": false, "predicted": false, "value": "answer(no)", "title": "No"}}], "format": "", "voice_browsed": false, "value": "", "template": "menu", "type": "list"}}], "title": "You want to know go to step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:46:51,044 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:51,044 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:46:51,059 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": ["So,", "You want to know go to step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:46:51,059 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:46:51,060 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [So,, You want to know go to step.], sender=TextOutputComponent, reason=None))
2017-10-20 17:46:51,060 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [So,, You want to know go to step.], sender=TextOutputComponent, reason=None)
2017-10-20 17:46:51,060 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:46:51,061 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None)
2017-10-20 17:46:51,061 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None)
2017-10-20 17:46:51,061 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None)
2017-10-20 17:46:51,062 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None))
2017-10-20 17:46:51,063 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514411.06
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 2.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:46:51,063 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:46:51,063 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:46:51,063 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:46:51,068 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:46:51,068 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:46:51,068 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:46:51,071 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:46:51,071 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:46:51,071 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:46:51,071 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:46:51,071 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:46:51,071 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:46:51,071 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:46:51,072 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:46:51,072 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:51,072 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:46:51,072 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:51,072 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:51,077 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateAccommodationICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
?                                         -------------------------------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?und(USR, goal(resolve(?X.go_to_step(X))))])
-- END TIS changes --
2017-10-20 17:46:51,077 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:46:51,077 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:51,077 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:46:51,077 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:51,077 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:51,082 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateUndPosICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
?                             ----------------------------------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:46:51,082 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:46:51,082 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:51,082 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:46:51,082 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:51,082 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:46:51,083 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:51,084 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:46:51,084 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:51,084 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:51,084 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:46:51,084 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:51,084 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:51,085 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:51,085 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:51,085 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:46:51,088 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:46:51,088 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:46:51,088 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [So,, You want to know go to step.], latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])}, 2.0), sender=DmeModule, reason=None)
2017-10-20 17:46:51,088 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:46:51,088 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:46:51,088 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:46:51,089 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:46:51,089 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [So,, You want to know go to step.], latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])}, 2.0), sender=DmeModule, reason=None))
2017-10-20 17:46:51,089 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [So,, You want to know go to step.], latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])}, 2.0), sender=DmeModule, reason=None)
2017-10-20 17:46:51,090 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [So,, You want to know go to step.], latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])}, 2.0), sender=DmeModule, reason=None)
2017-10-20 17:46:51,091 - session_2017-10-20T17_45_42_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f63649f05f0>:2.0
2017-10-20 17:46:51,091 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:46:53,091 - session_2017-10-20T17_45_42_0 - DEBUG - Timeout fired
2017-10-20 17:46:53,091 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:46:53,091 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:46:53,091 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:46:53,091 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:46:53,092 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514413.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?und(USR, goal(resolve(?X.go_to_step(X))))])
tis.sys_turns: 0
tis.timeout.duration: 2.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:46:53,092 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:46:53,093 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:46:53,095 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:46:53,095 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:46:53,100 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:46:53,100 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:46:53,100 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:46:53,103 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:46:53,103 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:46:53,103 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:46:53,103 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:46:53,103 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:46:53,103 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:46:53,108 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: noFollowupToUndQ
-- BEGIN TIS changes --
- tis.private.tmp.usr.agenda: OpenQueue([#])
+ tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
?                                         +++++++++++++++++++++++++++
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                             +++++++++++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
+ tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                         ++++++++++++++++++
-- END TIS changes --
2017-10-20 17:46:53,108 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:46:53,108 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:46:53,108 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:53,108 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:46:53,108 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:53,108 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:53,109 - session_2017-10-20T17_45_42_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:53,109 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:53,109 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:46:53,109 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:53,109 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:53,109 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:53,109 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:46:53,113 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: accommodatePlan2Goals
-- BEGIN TIS changes --
- tis.private.issues_being_accommodated: {}
+ tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
?                                         ++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:46:53,113 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:retract
2017-10-20 17:46:53,113 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:46:53,113 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:53,113 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:53,114 - session_2017-10-20T17_45_42_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:53,114 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:46:53,114 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:46:53,114 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:53,114 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:53,115 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:53,115 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:46:53,118 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: accommodateIssues2QUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?und(USR, goal(resolve(?X.go_to_step(X))))])
+ tis.shared.qud: stackset([?X.step_to_choose(X), ?und(USR, goal(resolve(?X.go_to_step(X))))])
?                           ++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:46:53,118 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:retract
2017-10-20 17:46:53,118 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:46:53,118 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:46:53,118 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:46:53,123 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
?                                                                  ++++++++++++++++++++++++++++++++
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:46:53,123 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:46:53,123 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:53,127 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:46:53,127 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:46:53,130 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:46:53,130 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:53,130 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:46:53,130 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:46:53,130 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:53,130 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:53,130 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:53,130 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:46:53,131 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:46:53,131 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:46:53,131 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:46:53,131 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:53,134 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:46:53,134 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:53,134 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:53,137 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:46:53,137 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:53,137 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:53,137 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:53,137 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:46:53,140 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X), ?und(USR, goal(resolve(?X.go_to_step(X))))])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:46:53,140 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:46:53,140 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:46:53,140 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:46:53,140 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:46:53,140 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:46:53,141 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:46:53,141 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:46:53,141 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: select
2017-10-20 17:46:53,142 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514413.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 2.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:46:53,142 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:46:53,145 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.tmp.sys.bel: {go_to_step("chose a step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:46:53,145 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:46:53,148 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                                                  +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:46:53,148 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:46:53,151 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 17:46:53,151 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:46:53,151 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:46:53,154 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 17:46:53,154 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:46:53,157 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:46:53,157 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:46:53,157 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:46:53,157 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:46:53,159 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:46:53,159 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:46:53,160 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:46:53,162 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 2.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:46:53,162 - session_2017-10-20T17_45_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:46:53,162 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:48:04,051 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:48:04,051 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:48:04,051 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-20 17:48:04,051 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:48:04,052 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:48:04,052 - session_2017-10-20T17_45_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:48:04,052 - session_2017-10-20T17_45_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:48:04,053 - session_2017-10-20T17_45_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:48:04,053 - session_2017-10-20T17_45_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-20 17:48:04,054 - session_2017-10-20T17_45_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-20 17:48:04,054 - session_2017-10-20T17_45_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:48:04,054 - session_2017-10-20T17_45_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:48:04,054 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:48:04,054 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-20 17:48:04,055 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:48:04,055 - session_2017-10-20T17_45_42_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:48:04,055 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:48:04,055 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:48:04,055 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:48:04,056 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:48:04,056 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 17:48:04,057 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:48:04,057 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:48:04,057 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:04,058 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:04,059 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:04,059 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:48:04,059 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:48:04,059 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:48:04,060 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-20 17:48:04,060 - session_2017-10-20T17_45_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:48:04,061 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:04,062 - session_2017-10-20T17_45_42_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:48:04,063 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:04,063 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:48:04,063 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:48:04,063 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:48:04,064 - session_2017-10-20T17_45_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:48:04,065 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6365232050>, <tdm.tdm_gui_protocol.Popup instance at 0x7f63649f0cf8>]
2017-10-20 17:48:04,065 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6365232050>, <tdm.tdm_gui_protocol.Popup instance at 0x7f63649f0cf8>], sender=GuiBackend, reason=None)
2017-10-20 17:48:04,065 - session_2017-10-20T17_45_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:48:04,065 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:48:04,065 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:48:04,065 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:48:04,065 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:48:04,065 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 17:48:04,066 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:48:04,066 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-20 17:48:04,067 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:48:04,068 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:48:04,068 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:48:04,068 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:48:04,068 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:48:04,069 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:48:04,069 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:48:04,069 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6365232050>, <tdm.tdm_gui_protocol.Popup instance at 0x7f63649f0cf8>], sender=GuiBackend, reason=None))
2017-10-20 17:48:04,069 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6365232050>, <tdm.tdm_gui_protocol.Popup instance at 0x7f63649f0cf8>], sender=GuiBackend, reason=None)
2017-10-20 17:48:04,070 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:48:04,070 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:48:04,070 - session_2017-10-20T17_45_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:48:04,096 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:48:04,096 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:48:04,096 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-20 17:48:04,096 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-20 17:48:04,097 - session_2017-10-20T17_45_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:48:04,097 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:48:04,097 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:48:04,097 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:48:04,097 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-20 17:48:04,099 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514484.1
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:48:04,099 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:48:04,099 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:48:04,099 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:48:04,106 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
?                                         --------------------
+ tis.private.issues_being_accommodated: {}
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:48:04,106 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:48:04,107 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:48:04,109 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:04,109 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:48:04,109 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:48:04,109 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:48:04,109 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:48:04,110 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:48:04,110 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:48:04,110 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:48:04,110 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:48:04,110 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:48:04,110 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:48:04,110 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:48:04,113 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose a step")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:48:04,113 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:48:04,113 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:48:04,116 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                            ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:48:04,117 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:48:04,117 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:04,117 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:48:04,117 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:48:04,117 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:48:04,117 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:48:04,117 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:04,117 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:48:04,118 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:48:04,118 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:04,118 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:48:04,118 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:04,118 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:04,118 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:48:04,118 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:48:04,118 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:04,119 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:04,119 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:48:04,119 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:48:04,121 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:04,121 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:48:04,121 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:48:04,122 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:48:04,122 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:48:04,122 - session_2017-10-20T17_45_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:48:04,122 - session_2017-10-20T17_45_42_0 - DEBUG - Sent.
2017-10-20 17:48:04,122 - session_2017-10-20T17_45_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 17:48:04,123 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:48:04,124 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:48:04,124 - session_2017-10-20T17_45_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:48:04,124 - session_2017-10-20T17_45_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:48:04,125 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:48:04,125 - session_2017-10-20T17_45_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:48:04,126 - session_2017-10-20T17_45_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f63670f2090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6365220610>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514484.13
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:48:04,126 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:48:04,130 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-20 17:48:04,130 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:48:04,130 - session_2017-10-20T17_45_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:48:04,130 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:48:04,134 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                       - ^^^ ^^^^^      ^^^^^^^^^^^^^^                                     ^^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')])
?                                        ^ ^^^^^^      ^                                    + ^                                                +++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:48:04,134 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:48:04,141 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:48:04,141 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:48:04,142 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:48:04,145 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:04,145 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:48:04,145 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:48:04,156 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
?                                         ---------------------------
+ tis.private.tmp.usr.agenda: OpenQueue([#])
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
+ tis.private.tmp.usr.bel: {go_to_step("chose a step")}
+ tis.private.tmp.usr.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.private.tmp.usr.goals: stackset([perform(top)])
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.usr.plan: Stack([])
- tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.private.tmp.usr.qud: stackset([])
-- END TIS changes --
2017-10-20 17:48:04,156 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:48:04,156 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:48:04,156 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:48:04,156 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:48:04,156 - session_2017-10-20T17_45_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:48:04,156 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:48:04,156 - session_2017-10-20T17_45_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:48:04,157 - session_2017-10-20T17_45_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:48:04,157 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:48:04,161 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.say_step(X)])
?                           ++++++++++++++
-- END TIS changes --
2017-10-20 17:48:04,161 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:48:04,161 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:48:04,161 - session_2017-10-20T17_45_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:48:04,161 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:04,165 - session_2017-10-20T17_45_42_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:48:04,165 - session_2017-10-20T17_45_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:48:04,165 - session_2017-10-20T17_45_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:48:04,165 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:48:04,165 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:48:04,165 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:04,165 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:48:04,166 - session_2017-10-20T17_45_42_0 - INFO - breaking out of accommodate
2017-10-20 17:48:04,166 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:04,166 - session_2017-10-20T17_45_42_0 - INFO - END integrate_moves
2017-10-20 17:48:04,166 - session_2017-10-20T17_45_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:04,166 - session_2017-10-20T17_45_42_0 - ERROR - exception in DmeModule
Traceback (most recent call last):
  File "/usr/lib64/python2.7/site-packages/tdm/lib/module.py", line 59, in process_event
    handler()
  File "/usr/lib64/python2.7/site-packages/tdm/dme_module.py", line 54, in handle_user_moves
    self._set_input_event_and_run_update_and_select()
  File "/usr/lib64/python2.7/site-packages/tdm/dme_module.py", line 58, in _set_input_event_and_run_update_and_select
    self.run_update_and_set_ddd_when_needed()
  File "/usr/lib64/python2.7/site-packages/tdm/dme_module.py", line 63, in run_update_and_set_ddd_when_needed
    self.run_update()
  File "/usr/lib64/python2.7/site-packages/tdm/dme_module.py", line 107, in run_update
    self.update_module.run(self.tis())
  File "tdm/update.py", line 166, in tdm.update.UpdateModule.run (tdm/update.c:8834)
  File "/usr/lib64/python2.7/site-packages/tdm/maharani/maharanilib.py", line 425, in repeatGroupSequence
    if self._apply(ruleGroup, identifier, tis):
  File "/usr/lib64/python2.7/site-packages/tdm/maharani/maharanilib.py", line 436, in _apply
    if self.applyRule(rule, tis):
  File "/usr/lib64/python2.7/site-packages/tdm/maharani/maharanilib.py", line 362, in applyRule
    if rule.testPreconditions(self._ddd_manager, tis):
  File "/usr/lib64/python2.7/site-packages/tdm/maharani/maharanilib.py", line 273, in testPreconditions
    return self.preconditions(ddd_manager, self.tis)
  File "tdm/update.py", line 1912, in tdm.update.exec_findoutFromDevice.preconditions (tdm/update.c:78944)
  File "/usr/lib64/python2.7/site-packages/tdm/tis.py", line 1325, in get_resolving_results_from_devices
    all_results = device_handler.query_all(question, self.shared.com)
  File "/usr/lib64/python2.7/site-packages/tdm/device_handler.py", line 153, in query_all
    self._validate_query_result(result_descriptions, query)
  File "/usr/lib64/python2.7/site-packages/tdm/device_handler.py", line 160, in _validate_query_result
    for result in result_descriptions:
TypeError: 'NoneType' object is not iterable
2017-10-20 17:48:04,167 - session_2017-10-20T17_45_42_0 - DEBUG - DmeModule posts Event(BACKEND_ERROR, None, sender=DmeModule, reason=None)
