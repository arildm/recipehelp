2017-10-24 16:45:05,920 - session_2017-10-24T16_45_05_0 - DEBUG - Backend()
2017-10-24 16:45:05,920 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.initialize()
2017-10-24 16:45:05,951 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6ede59de50>>, False])
2017-10-24 16:45:05,951 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6ede59de50>>, 'eng'])
2017-10-24 16:45:05,951 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6ede59de50>>, True, 'disabled'])
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6ede59de50>>])
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f6ede59de50>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6ede59de50>>, 'eng', False, True])
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend initialized
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - Backend uses language 'eng'
2017-10-24 16:45:05,952 - session_2017-10-24T16_45_05_0 - DEBUG - running module InterpretModule
2017-10-24 16:45:05,953 - session_2017-10-24T16_45_05_0 - DEBUG - running module DmeModule
2017-10-24 16:45:05,954 - session_2017-10-24T16_45_05_0 - DEBUG - running module DeviceManager
2017-10-24 16:45:05,954 - session_2017-10-24T16_45_05_0 - DEBUG - running module GenerateModule
2017-10-24 16:45:05,955 - session_2017-10-24T16_45_05_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 16:45:05,955 - session_2017-10-24T16_45_05_0 - DEBUG - running module GuiBackend
2017-10-24 16:45:05,955 - session_2017-10-24T16_45_05_0 - DEBUG - running module CogloadModule
2017-10-24 16:45:05,956 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:05,956 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:05,957 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 16:45:05,957 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 16:45:05,957 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 16:45:05,958 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:05,958 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:05,989 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 16:45:05,989 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:05,990 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 16:45:05,991 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 16:45:05,991 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 16:45:05,991 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 16:45:05,991 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 16:45:05,992 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:05,992 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:05,994 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 16:45:05,994 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:05,994 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:45:05,995 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:45:05,995 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:45:05,995 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:45:05,995 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:45:05,995 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:45:05,996 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856306.0
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:05,996 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:05,996 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:05,997 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:05,999 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:05,999 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:05,999 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:06,001 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:06,001 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:06,001 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:06,001 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:06,001 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:06,001 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:06,001 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:06,002 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:06,003 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:06,003 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:06,003 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:06,003 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:06,003 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:06,003 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:06,006 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:45:06,006 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:06,008 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:45:06,008 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:06,008 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:06,009 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:06,009 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:06,009 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:06,009 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:06,009 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:06,009 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:06,010 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:06,010 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:06,010 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:06,011 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856306.0
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:06,011 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:06,014 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:06,014 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:06,016 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:06,017 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:06,019 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:45:06,019 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:06,022 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:06,022 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:06,022 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:06,022 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:06,024 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:06,024 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:06,024 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:06,026 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 16:45:06,027 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:06,027 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:45:06,027 - session_2017-10-24T16_45_05_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:45:06,027 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:45:06,027 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:45:06,027 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:45:06,028 - session_2017-10-24T16_45_05_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:45:06,028 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 16:45:06,028 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:45:06,028 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:45:06,028 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:45:06,028 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 16:45:06,029 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:06,029 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:06,029 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:06,029 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:06,030 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:06,031 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 16:45:06,031 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:45:06,031 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:06,031 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:06,031 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:06,032 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:06,032 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:45:06,032 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:45:06,032 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:45:06,033 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:06,033 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:45:06,033 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:45:06,033 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:06,034 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 16:45:06,034 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:45:06,035 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:06,036 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:06,036 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:06,036 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:06,036 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:45:06,037 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:45:06,037 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:45:06,037 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:06,037 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message []
2017-10-24 16:45:06,037 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:45:06,037 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:06,037 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 16:45:06,037 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:45:06,038 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:06,038 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:06,038 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 16:45:06,038 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:45:06,038 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:06,039 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:06,039 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:06,081 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:06,082 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:06,082 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:06,082 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:06,082 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:06,082 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:45:06,082 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:45:06,082 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:45:06,083 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 16:45:06,084 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856306.08
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:06,084 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:06,084 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:06,084 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:06,087 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 16:45:06,088 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:06,088 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:06,090 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:06,090 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:06,090 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:06,090 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:06,091 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:06,091 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:06,091 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:06,091 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:06,091 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:06,091 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:06,091 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:06,091 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:06,095 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:45:06,095 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:06,095 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:06,095 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:06,095 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:06,095 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:06,098 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 16:45:06,098 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:06,098 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:06,099 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:06,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:06,099 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:06,099 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:06,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:06,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:06,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:06,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:06,100 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:06,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:06,100 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:06,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:06,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:06,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:06,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:06,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:06,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:06,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:06,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:06,103 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:06,103 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:06,104 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:06,104 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:06,104 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:06,104 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:06,104 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:06,105 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:45:06,105 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:06,106 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:06,106 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:10,406 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:45:10,407 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:10,407 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 16:45:10,407 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:10,408 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:10,408 - session_2017-10-24T16_45_05_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:45:10,408 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:45:10,413 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:45:10,413 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 16:45:10,413 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 16:45:10,414 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:10,414 - session_2017-10-24T16_45_05_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:45:10,414 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:10,414 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:45:10,415 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:10,415 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:10,415 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:10,415 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 16:45:10,416 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:10,416 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 16:45:10,417 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:10,417 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:10,418 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:10,419 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:10,420 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856310.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:10,420 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:10,424 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 16:45:10,424 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:10,428 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 16:45:10,428 - session_2017-10-24T16_45_05_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:45:10,428 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:10,433 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 16:45:10,433 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:10,439 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:45:10,439 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:10,439 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:10,442 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:10,443 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:10,443 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:10,448 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 16:45:10,448 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:10,448 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:10,448 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:10,448 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:10,449 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:10,449 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 16:45:10,449 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:10,449 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 16:45:10,449 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:10,452 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:10,453 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:10,453 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:10,456 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 16:45:10,456 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:10,456 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:10,460 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:45:10,460 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:10,460 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:10,460 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:10,460 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:10,461 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:10,461 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:10,461 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:10,461 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:10,461 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:10,462 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:10,462 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:10,462 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:10,464 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:45:10,464 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:10,465 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:10,465 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:10,465 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:10,465 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:10,465 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 16:45:10,466 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:10,466 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:10,467 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856310.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:10,467 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:10,471 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:45:10,471 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:10,474 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:10,474 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:10,477 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 16:45:10,477 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:10,477 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:10,481 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 16:45:10,481 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:10,484 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:10,484 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:10,484 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:10,485 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:10,487 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:10,487 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:10,487 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:10,489 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:10,490 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:10,490 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:10,491 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 16:45:10,491 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 16:45:10,491 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:45:10,492 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:10,492 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:10,492 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:10,492 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:10,493 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:10,493 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:45:10,494 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:10,494 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:10,495 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:10,495 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:10,496 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:10,496 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 16:45:10,496 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:45:10,497 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:45:10,497 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:45:10,497 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:45:10,497 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:10,497 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:45:10,497 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:45:10,497 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:45:10,498 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:45:10,498 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:10,498 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 16:45:10,498 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 16:45:10,500 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:10,502 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:10,502 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:10,502 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:10,502 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 16:45:10,502 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:45:10,502 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:45:10,502 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:45:10,502 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:45:10,503 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:10,503 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message []
2017-10-24 16:45:10,504 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:45:10,504 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:10,504 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 16:45:10,504 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 16:45:10,504 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:10,504 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:10,505 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 16:45:10,505 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:45:10,505 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:10,505 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:10,506 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:10,514 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:10,514 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:10,515 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:10,515 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:10,515 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:10,515 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:45:10,515 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:45:10,516 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:45:10,516 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 16:45:10,517 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856310.52
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:10,517 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:10,518 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:10,518 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:10,524 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:10,524 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:10,524 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:10,527 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:10,527 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:10,527 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:10,527 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:10,527 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:10,527 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:10,527 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:10,527 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:10,528 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:10,528 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:10,528 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:10,528 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:10,532 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:45:10,532 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:10,532 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:10,533 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:10,533 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:10,533 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:10,537 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:10,537 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:10,537 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:10,537 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:10,537 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:10,537 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:10,540 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 16:45:10,540 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:10,541 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:10,541 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:10,541 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:10,541 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:10,541 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:10,541 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:10,541 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:10,541 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:10,542 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:10,542 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:10,542 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:10,542 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:10,542 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:10,542 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:10,542 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:10,542 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:10,543 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:10,543 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:10,543 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:10,543 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:10,546 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:10,546 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:10,546 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:10,546 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:10,546 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:10,546 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:10,547 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:10,547 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:45:10,548 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:10,548 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:10,548 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:13,567 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "\u00f9step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:45:13,567 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:13,567 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: ùstep one}], sender=TextInputComponent, reason=None))
2017-10-24 16:45:13,568 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: ùstep one}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:13,568 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: ùstep one}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:13,568 - session_2017-10-24T16_45_05_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "\u00f9step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:45:13,568 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:45:13,569 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-24 16:45:13,569 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-24 16:45:13,569 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-24 16:45:13,570 - session_2017-10-24T16_45_05_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99874091148
2017-10-24 16:45:13,574 - session_2017-10-24T16_45_05_0 - DEBUG - robust grammatical interpretations: []
2017-10-24 16:45:13,575 - session_2017-10-24T16_45_05_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-24 16:45:13,575 - session_2017-10-24T16_45_05_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-24 16:45:13,575 - session_2017-10-24T16_45_05_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-24 16:45:13,575 - session_2017-10-24T16_45_05_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-24 16:45:13,575 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-24 16:45:13,576 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 16:45:13,576 - session_2017-10-24T16_45_05_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:45:13,576 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: ùstep one}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:13,576 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-24 16:45:13,576 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 16:45:13,576 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:13,576 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:13,576 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 16:45:13,577 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:13,577 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 16:45:13,577 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 16:45:13,577 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 16:45:13,578 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 16:45:13,578 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 16:45:13,580 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856313.58
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: ùstep one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:13,580 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:13,580 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:13,583 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:13,583 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:13,589 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 16:45:13,589 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:13,589 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:13,593 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:13,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:13,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:13,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:13,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:13,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:13,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:13,593 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:13,594 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:13,594 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:13,594 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:13,594 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:13,594 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:13,594 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:13,594 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:13,595 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:13,595 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:13,595 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:13,595 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:13,595 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:13,595 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:13,595 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:13,596 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:13,596 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:13,599 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:45:13,599 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:13,599 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:13,600 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:13,600 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:13,600 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:13,600 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:13,601 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:13,601 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856313.58
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: ùstep one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:13,602 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:13,606 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                             ++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:13,606 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:13,609 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: reraiseIssue
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 16:45:13,609 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:13,611 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-24 16:45:13,611 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:13,611 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:13,615 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise)])
?                                                                                               ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.step_to_choose(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, raise(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 16:45:13,615 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:13,618 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
?                                                                                                                     +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, raise(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:13,618 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:13,618 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:13,618 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:13,620 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:13,620 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:13,620 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:13,623 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:13,623 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:13,623 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 16:45:13,624 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:13,624 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:13,624 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:13,624 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:13,625 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-24 16:45:13,625 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 16:45:13,625 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:13,626 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:13,626 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:13,627 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"ùstep one"), facts={})
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"ùstep one")
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={})
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:13,628 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"ùstep one")
2017-10-24 16:45:13,629 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"ùstep one") generated as u'I heard you say \xf9step one.'
2017-10-24 16:45:13,629 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-24 16:45:13,629 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-24 16:45:13,629 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise)
2017-10-24 16:45:13,630 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise) generated as u'So,'
2017-10-24 16:45:13,630 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:13,630 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 16:45:13,630 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=GenerateModule, reason=None)
2017-10-24 16:45:13,632 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:13,637 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:13,637 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:13,637 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:13,637 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"ùstep one"), facts={})
2017-10-24 16:45:13,638 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"ùstep one")
2017-10-24 16:45:13,638 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 16:45:13,638 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 16:45:13,638 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={})
2017-10-24 16:45:13,638 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-24 16:45:13,638 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:45:13,638 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:13,639 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message []
2017-10-24 16:45:13,639 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:45:13,639 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:13,639 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=GenerateModule, reason=None))
2017-10-24 16:45:13,640 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=GenerateModule, reason=None)
2017-10-24 16:45:13,640 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say \u00f9step one.", "I don't understand.", "So,", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:13,640 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:13,640 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 16:45:13,641 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:45:13,641 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:13,642 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:13,643 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:13,645 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say \u00f9step one.", "I don't understand.", "So,", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:13,645 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:13,646 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:13,646 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:13,646 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:13,646 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-24 16:45:13,647 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-24 16:45:13,647 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-24 16:45:13,648 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=TurnManager, reason=None))
2017-10-24 16:45:13,649 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856313.65
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say ùstep one., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: ùstep one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:13,649 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:13,650 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:13,650 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:13,654 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
- tis.sys_turns: 0
?                ^
+ tis.sys_turns: 1
?                ^
-- END TIS changes --
2017-10-24 16:45:13,654 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:13,655 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:13,658 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:13,659 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:13,659 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:13,662 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                                         ^^^ ^^^^^^^^^^^^^^^                                       ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                                         ^^^ ^^^
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:45:13,662 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:13,662 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:13,662 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:13,663 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:13,663 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:13,667 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                                   ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:13,667 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:13,667 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:13,668 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:13,668 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:13,668 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:13,672 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
?                                                                                                                                 ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:13,673 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:13,673 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:13,673 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:13,673 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:13,673 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:13,676 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 16:45:13,676 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:13,676 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:13,677 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:13,678 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:13,678 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:13,678 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:13,678 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:13,678 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:13,678 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:13,678 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:13,679 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:13,679 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:13,679 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:13,681 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:13,681 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:13,682 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say ùstep one., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:13,682 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:13,682 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:13,682 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:13,682 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:13,683 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say ùstep one., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:45:13,683 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say ùstep one., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:13,683 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say ùstep one., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:13,684 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:17,577 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:45:17,577 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:17,577 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-24 16:45:17,578 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:17,578 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:17,578 - session_2017-10-24T16_45_05_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:45:17,578 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:45:17,580 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:45:17,580 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-24 16:45:17,580 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-24 16:45:17,580 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:17,581 - session_2017-10-24T16_45_05_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:45:17,581 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:17,581 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:45:17,581 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:17,581 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:17,581 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:17,581 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 16:45:17,582 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:17,582 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 16:45:17,582 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:17,583 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:17,583 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:17,583 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:17,585 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856317.58
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:17,585 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:17,589 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-24 16:45:17,589 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:17,594 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-24 16:45:17,598 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-24 16:45:17,599 - session_2017-10-24T16_45_05_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:45:17,599 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:17,602 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 16:45:17,602 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:17,607 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
- tis.sys_turns: 1
?                ^
+ tis.sys_turns: 0
?                ^
-- END TIS changes --
2017-10-24 16:45:17,607 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:17,607 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:17,610 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:17,610 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:17,611 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:17,618 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 16:45:17,619 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:17,622 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 16:45:17,623 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:17,623 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:17,626 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 16:45:17,627 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:17,630 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:45:17,630 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:17,630 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:17,630 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:17,630 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:17,630 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:17,630 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:17,630 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:17,631 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:17,631 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:17,631 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:17,631 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:17,634 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose step1")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:45:17,634 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:17,634 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:17,637 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 16:45:17,637 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:17,637 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:17,637 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:17,638 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:17,640 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:45:17,640 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:17,640 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:17,641 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:17,641 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:17,641 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:17,641 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:45:17,641 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 16:45:17,641 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:45:17,641 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:17,642 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856317.58
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:17,643 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:17,647 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.tmp.sys.bel: {go_to_step("chose step1")}
- tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                             ------------------------------------
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 16:45:17,647 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:17,650 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:17,650 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:17,653 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 16:45:17,653 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:17,656 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:17,656 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:17,656 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:17,656 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:17,658 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:17,659 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:17,659 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:17,661 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:45:17,661 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 16:45:17,662 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:17,662 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 16:45:17,662 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:45:17,662 - session_2017-10-24T16_45_05_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:45:17,662 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-24 16:45:17,663 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 16:45:17,663 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:45:17,663 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:17,663 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 16:45:17,663 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:45:17,664 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:17,665 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:17,665 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:45:17,665 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:17,665 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:17,666 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:17,666 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:17,667 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:17,667 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 16:45:17,667 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:45:17,667 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:45:17,668 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp') generated as u'Ok chose step1.'
2017-10-24 16:45:17,668 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 16:45:17,669 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:17,670 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:17,671 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:17,671 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:17,671 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 16:45:17,671 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 16:45:17,672 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:45:17,673 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092c68>]
2017-10-24 16:45:17,673 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092c68>], sender=GuiBackend, reason=None)
2017-10-24 16:45:17,673 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:17,673 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None))
2017-10-24 16:45:17,673 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 16:45:17,673 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose step1."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:17,674 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:17,674 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:45:17,674 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:17,674 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose step1."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:45:17,675 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:17,675 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092c68>], sender=GuiBackend, reason=None))
2017-10-24 16:45:17,675 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092c68>], sender=GuiBackend, reason=None)
2017-10-24 16:45:17,676 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose step1."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:17,677 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:17,677 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:17,683 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose step1."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:17,683 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:17,684 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:17,684 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:17,684 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:17,684 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:45:17,684 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:45:17,685 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:45:17,685 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None))
2017-10-24 16:45:17,686 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856317.69
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:17,687 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:17,687 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:17,687 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:17,692 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:per*pos:"ùstep one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:17,692 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:17,692 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:17,696 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:17,697 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:17,697 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:17,697 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:17,700 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose step1")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:17,700 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:17,700 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:17,704 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose step1")}
+ tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
?                                           ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 16:45:17,704 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:17,704 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:17,704 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:17,705 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:17,706 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:17,706 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:17,706 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:17,706 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:17,706 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:17,706 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:17,709 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:45:17,709 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:45:17,709 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:17,709 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 16:45:17,709 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:45:17,709 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:17,710 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:17,710 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:45:17,710 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:17,710 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:17,711 - session_2017-10-24T16_45_05_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f6edc0ca830>:1.0
2017-10-24 16:45:17,711 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:18,711 - session_2017-10-24T16_45_05_0 - DEBUG - Timeout fired
2017-10-24 16:45:18,711 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:18,711 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:18,712 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:18,712 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:45:18,713 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856318.71
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:18,713 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:18,713 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:18,715 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:18,715 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:18,720 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 16:45:18,720 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:18,720 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:18,723 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:18,724 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:18,725 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:18,725 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:18,725 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:18,728 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:45:18,728 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:18,728 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:18,731 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose step1")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 16:45:18,731 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:18,731 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:18,731 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:18,731 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:18,731 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:18,732 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:18,732 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:18,732 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:18,732 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:18,732 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:18,733 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:18,734 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856318.71
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:18,734 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:18,738 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose step1")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:18,738 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:18,741 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:18,741 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:18,743 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:45:18,743 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:18,746 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:18,746 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:18,746 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:18,746 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:18,748 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:18,748 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:18,748 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:18,750 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:45:18,751 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:18,751 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:45:30,311 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "what should i do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:45:30,311 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:30,311 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None))
2017-10-24 16:45:30,312 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:30,312 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:30,312 - session_2017-10-24T16_45_05_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "what should i do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:45:30,312 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:45:30,314 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:45:30,314 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])} for DDD 'recipehelp'
2017-10-24 16:45:30,314 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
2017-10-24 16:45:30,314 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:30,314 - session_2017-10-24T16_45_05_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "what should i do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "what should i do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "say_step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "what should i do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:45:30,315 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:30,315 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:30,315 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,315 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:30,316 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,316 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:45:30,316 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:45:30,316 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:30,317 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,317 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,318 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,318 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 16:45:30,318 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 16:45:30,318 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:45:30,318 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:30,318 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 16:45:30,319 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 16:45:30,319 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:30,319 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 16:45:30,319 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:45:30,320 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,322 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,322 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:30,322 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:30,322 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 16:45:30,322 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 16:45:30,322 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:45:30,322 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:30,323 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc0c6dd0>]
2017-10-24 16:45:30,323 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc0c6dd0>], sender=GuiBackend, reason=None)
2017-10-24 16:45:30,323 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:30,323 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:45:30,323 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:30,324 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:30,324 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:30,324 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:45:30,324 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,325 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 16:45:30,325 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:45:30,325 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:30,326 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,326 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc0c6dd0>], sender=GuiBackend, reason=None))
2017-10-24 16:45:30,326 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc0c6dd0>], sender=GuiBackend, reason=None)
2017-10-24 16:45:30,326 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:30,327 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,327 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:30,346 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:30,346 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:30,346 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:30,346 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:30,346 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:30,347 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:45:30,347 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:45:30,347 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:45:30,347 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 16:45:30,349 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856330.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:30,349 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:30,349 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:30,349 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:30,353 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:45:30,353 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:30,353 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:30,356 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:30,357 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:30,360 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:45:30,360 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:30,360 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,361 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:30,361 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,361 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:30,364 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 16:45:30,364 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:30,364 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,364 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:30,364 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:30,365 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:30,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:30,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:30,369 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:45:30,369 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,369 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:30,369 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:30,369 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,369 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:30,370 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,370 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:45:30,370 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:30,371 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:30,371 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,371 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,371 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,372 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:30,373 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856330.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:30,373 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:30,375 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
-- END TIS changes --
2017-10-24 16:45:30,375 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:30,379 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                             ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                             ^
- tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
?                                                                                                                            ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}
?                                                                                                                            ^
-- END TIS changes --
2017-10-24 16:45:30,380 - session_2017-10-24T16_45_05_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:45:30,380 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:30,385 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 16:45:30,385 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:30,392 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:45:30,392 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:30,392 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:30,395 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:30,396 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:30,396 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:30,401 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])
2017-10-24 16:45:30,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:30,407 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(say_step), findout(?X.goal(X))])
?                          ++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(say_step), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')}
-- END TIS changes --
2017-10-24 16:45:30,407 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:30,407 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,410 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(say_step), resolve_user(?X.goal(X)), perform(top)])
?                                                --------------------------
+ tis.shared.goals: stackset([perform(say_step), perform(top)])
-- END TIS changes --
2017-10-24 16:45:30,410 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:30,410 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,413 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(say_step), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 16:45:30,413 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:30,413 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:30,413 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:30,413 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:30,414 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:30,414 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:30,414 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:30,414 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:30,414 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:30,414 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,417 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:45:30,417 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,417 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,417 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,417 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:30,420 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:45:30,420 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,420 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,420 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,421 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:30,421 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:30,421 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None)
2017-10-24 16:45:30,421 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,421 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:30,422 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856330.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:30,422 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:30,427 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
?                                              +++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 16:45:30,427 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:30,430 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:45:30,430 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:30,433 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:30,433 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:30,433 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:30,433 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:30,435 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:30,435 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:30,435 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:30,438 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:45:30,438 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:45:30,439 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:30,439 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None))
2017-10-24 16:45:30,439 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None)
2017-10-24 16:45:30,439 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": "what should i do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:45:30,439 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,440 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:30,440 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,440 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:30,441 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,441 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:45:30,441 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:30,442 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:30,442 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,442 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,443 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,444 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 16:45:30,444 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:45:30,444 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 16:45:30,444 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:30,444 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:45:30,445 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:45:30,445 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:30,445 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp') generated as u'Step ended'
2017-10-24 16:45:30,445 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:45:30,446 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,447 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:30,448 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,448 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:30,448 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:45:30,448 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 16:45:30,448 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:45:30,449 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 16:45:30,449 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:30,449 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc08ce18>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc08cf80>]
2017-10-24 16:45:30,450 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc08ce18>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc08cf80>], sender=GuiBackend, reason=None)
2017-10-24 16:45:30,450 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:30,450 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None))
2017-10-24 16:45:30,450 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:45:30,450 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Step ended"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:30,451 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,451 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:45:30,451 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:30,451 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Step ended"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:45:30,452 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,452 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc08ce18>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc08cf80>], sender=GuiBackend, reason=None))
2017-10-24 16:45:30,452 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc08ce18>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc08cf80>], sender=GuiBackend, reason=None)
2017-10-24 16:45:30,452 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Step ended"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:30,453 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,453 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:30,475 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Step ended"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:30,475 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:30,476 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:30,476 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:30,476 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:30,476 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:30,476 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:30,476 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:30,477 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 16:45:30,478 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856330.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:30,478 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:30,478 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:30,478 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:30,484 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:30,484 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:30,485 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:30,487 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:30,488 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:30,489 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:30,493 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:45:30,493 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:30,493 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,493 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:30,493 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,493 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:30,496 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(say_step)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:30,496 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:30,496 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,499 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(confirmation_action))])
- tis.shared.goals: stackset([perform(say_step), perform(top)])
?                                     -------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^ ^
+ tis.shared.previous_goal: perform(say_step)
?                           ^^^^ ^^^^^^^^^ ++
-- END TIS changes --
2017-10-24 16:45:30,499 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:30,499 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:30,500 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,504 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(perform(confirmation_action))])
+ tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 16:45:30,504 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,504 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,507 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          -------------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:30,508 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,508 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,508 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,508 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:30,508 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,508 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,509 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,509 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:30,509 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:30,511 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:45:30,512 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,512 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:30,513 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856330.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:30,513 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:30,518 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
- tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
?                                              ^ ^ ^ ^^
+ tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
?                                              ^^^^^^^ ^^^^ ^^ ^^^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:30,518 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:30,521 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.confirmation_yn(X))])
?                                                                  ++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:30,521 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:30,524 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.confirmation_yn(X))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 16:45:30,524 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:30,527 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))])
?                                                              ++++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:30,527 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:30,528 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:30,528 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:30,530 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:30,530 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:30,530 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:30,533 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:45:30,533 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:30,533 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 16:45:30,534 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:30,534 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,534 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:30,535 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,535 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)))
2017-10-24 16:45:30,536 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 16:45:30,536 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:30,536 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,536 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,538 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,538 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 16:45:30,538 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:45:30,538 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 16:45:30,538 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:30,538 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:45:30,539 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:45:30,539 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:30,539 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 16:45:30,539 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:45:30,541 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,543 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:30,543 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:30,543 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:30,543 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 16:45:30,543 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:45:30,543 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 16:45:30,544 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:30,544 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc08cb00>]
2017-10-24 16:45:30,544 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc08cb00>], sender=GuiBackend, reason=None)
2017-10-24 16:45:30,544 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:30,544 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 16:45:30,544 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:45:30,545 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:30,545 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,545 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc08cb00>], sender=GuiBackend, reason=None))
2017-10-24 16:45:30,545 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc08cb00>], sender=GuiBackend, reason=None)
2017-10-24 16:45:30,545 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:30,546 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,546 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:30,585 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:30,586 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:30,586 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:30,586 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:30,586 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:30,586 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:45:30,586 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:45:30,586 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:45:30,587 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-24 16:45:30,588 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856330.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:30,588 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:30,588 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:30,588 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:30,594 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do')}
-- END TIS changes --
2017-10-24 16:45:30,594 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:30,594 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:30,597 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:30,598 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:30,598 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:30,603 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:45:30,603 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:30,603 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,603 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:30,603 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,603 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:30,607 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.confirmation_yn(X)])
-- END TIS changes --
2017-10-24 16:45:30,607 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:30,607 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:30,608 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:30,609 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:30,609 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,609 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,609 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:30,609 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:30,610 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:30,610 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:30,610 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:30,610 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:30,613 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:45:30,614 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,614 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:30,614 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:45:30,614 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:45:30,614 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:30,614 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:30,615 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:45:30,615 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:30,615 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:30,616 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:39,029 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "yes"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:45:39,029 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:39,029 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None))
2017-10-24 16:45:39,029 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:39,029 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:39,030 - session_2017-10-24T16_45_05_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "yes"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:45:39,030 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:45:39,032 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:45:39,032 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])} for DDD 'recipehelp'
2017-10-24 16:45:39,032 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
2017-10-24 16:45:39,033 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:39,033 - session_2017-10-24T16_45_05_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Yes": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "yes"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "True"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:45:39,033 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:39,033 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:45:39,034 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:39,034 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:39,034 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:39,034 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 16:45:39,034 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,035 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 16:45:39,035 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,035 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,036 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,036 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:39,038 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856339.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([?X.confirmation_yn(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:39,038 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:39,044 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                   ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                   ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                  ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                  ^
-- END TIS changes --
2017-10-24 16:45:39,050 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                   ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                   ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                  ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                  ^^
-- END TIS changes --
2017-10-24 16:45:39,052 - session_2017-10-24T16_45_05_0 - INFO - hypotheses reranked: OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]) upranked to position 1 from position 2, replacing OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-24 16:45:39,052 - session_2017-10-24T16_45_05_0 - INFO - Could not log rerank
2017-10-24 16:45:39,053 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:39,059 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 16:45:39,059 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:39,066 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:39,066 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:39,066 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:39,069 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:39,069 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:39,069 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:39,077 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
+ tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                                                      ^ +++++ ^^^^^^^   ++++++++++++++++++++++++++++++
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^  ^
+ tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
?                                       ^ +++++ ^^^^^^^
-- END TIS changes --
2017-10-24 16:45:39,077 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:39,077 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:39,077 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:39,078 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:39,078 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:39,078 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 16:45:39,078 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:39,078 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 16:45:39,078 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:39,082 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {confirmation_yn("yes")}
- tis.shared.com: {device_activity_terminated(say_step)}
+ tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("yes")}
?                                                      ++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 16:45:39,082 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:39,082 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:39,087 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("yes")}
+ tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}
?                                                                              +++++++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             -------------------------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 16:45:39,088 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:39,092 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          --------------------------------
+ tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:39,092 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,092 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:39,093 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,098 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
+ tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes)}
?                                                                                                          +++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          ----------------------------------
+ tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:39,098 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,098 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,101 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_if_then_else
-- BEGIN TIS changes --
- tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
+ tis.private.plan: Stack([jumpto(perform(go_to_next))])
-- END TIS changes --
2017-10-24 16:45:39,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,102 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,106 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 +++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([jumpto(perform(go_to_next))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:39,106 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,106 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,111 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
- tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes)}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:45:39,111 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,111 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,112 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,112 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:39,115 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.confirmation_yn(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:45:39,115 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:39,115 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,115 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,115 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:39,115 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:39,115 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, confirmation_yn("yes"), sender=DmeModule, reason=None)
2017-10-24 16:45:39,116 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 16:45:39,116 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation_yn, grammar_entry: None, value: yes}, {predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:39,116 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:39,117 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856339.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}
tis.shared.goals: stackset([perform(go_to_next), perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:39,117 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:39,125 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
- tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.sys.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}
- tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(confirmation_action), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 16:45:39,125 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:39,129 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 16:45:39,129 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:39,129 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:39,133 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 16:45:39,133 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:39,136 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:39,136 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:39,136 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:39,136 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:39,139 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:39,139 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:39,139 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:39,142 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:45:39,143 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:45:39,143 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:39,143 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, confirmation_yn("yes"), sender=DmeModule, reason=None))
2017-10-24 16:45:39,143 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, confirmation_yn("yes"), sender=DmeModule, reason=None)
2017-10-24 16:45:39,144 - session_2017-10-24T16_45_05_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, confirmation_yn("yes"), sender=DmeModule, reason=None)
2017-10-24 16:45:39,144 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None))
2017-10-24 16:45:39,144 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 16:45:39,144 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": "yes", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:45:39,144 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,145 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation_yn, grammar_entry: None, value: yes}, {predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None))
2017-10-24 16:45:39,145 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation_yn, grammar_entry: None, value: yes}, {predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:39,145 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation_yn", "grammar_entry": null, "value": "yes"}, {"predicate": "confirmation", "grammar_entry": null, "value": "yes"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:39,146 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,147 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:45:39,147 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:39,147 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:39,148 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,148 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,150 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,150 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X)), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:45:39,150 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:45:39,150 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X)), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:45:39,150 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:39,151 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:45:39,151 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:45:39,151 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:39,151 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Next'
2017-10-24 16:45:39,152 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None)
2017-10-24 16:45:39,153 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,154 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:39,156 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,156 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:39,156 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:45:39,156 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X)), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:45:39,156 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:45:39,156 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X)), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:45:39,156 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:39,157 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc092758>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092998>]
2017-10-24 16:45:39,158 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc092758>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092998>], sender=GuiBackend, reason=None)
2017-10-24 16:45:39,158 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:39,158 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None))
2017-10-24 16:45:39,158 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None)
2017-10-24 16:45:39,158 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:39,158 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,160 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:45:39,160 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:39,160 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:45:39,161 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,161 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc092758>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092998>], sender=GuiBackend, reason=None))
2017-10-24 16:45:39,161 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc092758>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092998>], sender=GuiBackend, reason=None)
2017-10-24 16:45:39,161 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:39,162 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,162 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:39,194 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:39,194 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:39,195 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Next], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:39,195 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Next], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:39,195 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:39,195 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 16:45:39,195 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 16:45:39,195 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 16:45:39,196 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 16:45:39,197 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856339.2
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}
tis.shared.goals: stackset([perform(go_to_next), perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:39,197 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:39,202 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^^                                                                    ^^                                         -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^                                                                    ^
-- END TIS changes --
2017-10-24 16:45:39,203 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:39,203 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:39,203 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:39,209 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:39,209 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:39,209 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:39,212 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:45:39,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:39,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:39,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:39,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:39,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:39,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:39,213 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:39,213 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:39,213 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:39,213 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:39,213 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:39,217 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:45:39,217 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:39,217 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:39,218 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:39,218 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,218 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:39,221 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}
+ tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X)), device_activity_terminated(go_to_next)}
?                                                                                                               ++++++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:39,221 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:39,221 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:39,225 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
- tis.shared.goals: stackset([perform(go_to_next), perform(confirmation_action), perform(top)])
?                             ---------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
- tis.shared.previous_goal: perform(say_step)
?                                   ^^^ -  ^
+ tis.shared.previous_goal: perform(go_to_next)
?                                   ^^  +++ ^^
-- END TIS changes --
2017-10-24 16:45:39,225 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:39,225 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,225 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:39,225 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:39,225 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:39,225 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:39,226 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:39,226 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:39,226 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:39,226 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:39,226 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:39,226 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,230 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:39,230 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,230 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,233 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:45:39,233 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,233 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,233 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,233 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:39,233 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:39,238 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(confirmation_action))])
- tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             -------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
- tis.shared.previous_goal: perform(go_to_next)
?                                   ^^  --- ^^
+ tis.shared.previous_goal: perform(say_step)
?                                   ^^^ +  ^
-- END TIS changes --
2017-10-24 16:45:39,238 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:39,238 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,242 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.plan: Stack([jumpto(perform(confirmation_action))])
+ tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:39,242 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,242 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,247 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          -------------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X)), device_activity_terminated(go_to_next)}
?                                                        ---------------------------------------------------------
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
-- END TIS changes --
2017-10-24 16:45:39,248 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,248 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,248 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,248 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:39,248 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:39,251 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:45:39,252 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:39,252 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:39,253 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856339.2
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:39,253 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:39,260 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                         --------------------------------                                                                         ^^  --- ^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                                                                                                  ^^^ +  ^
- tis.private.tmp.sys.com: {device_activity_terminated(say_step), confirmation_yn("yes"), resolved(?X.confirmation_yn(X))}
+ tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(confirmation_action), perform(top)])
?                                              ---------------------
+ tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:39,260 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:39,264 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:45:39,264 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:39,267 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:39,267 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:39,267 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:39,267 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:39,270 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:39,270 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:39,270 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:39,273 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:39,274 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:45:39,274 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 16:45:39,274 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None))
2017-10-24 16:45:39,274 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:39,274 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "yes"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:39,275 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,275 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)))
2017-10-24 16:45:39,276 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 16:45:39,276 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:39,277 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,277 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,279 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,279 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), confirmation(yes), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:45:39,279 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:39,280 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:39,280 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp') generated as u'Step ended'
2017-10-24 16:45:39,280 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:45:39,282 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,283 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:39,285 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:39,285 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:39,285 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:45:39,285 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), confirmation(yes), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:45:39,285 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:39,286 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6ede59bcb0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc0c6f80>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc0c6dd0>]
2017-10-24 16:45:39,286 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6ede59bcb0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc0c6f80>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc0c6dd0>], sender=GuiBackend, reason=None)
2017-10-24 16:45:39,286 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:39,286 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Step ended], sender=GenerateModule, reason=None))
2017-10-24 16:45:39,287 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:45:39,287 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Step ended"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:39,288 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,288 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:45:39,288 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:39,288 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Step ended"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:45:39,288 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,288 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6ede59bcb0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc0c6f80>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc0c6dd0>], sender=GuiBackend, reason=None))
2017-10-24 16:45:39,289 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6ede59bcb0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc0c6f80>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc0c6dd0>], sender=GuiBackend, reason=None)
2017-10-24 16:45:39,289 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Step ended"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:39,289 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,290 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:39,327 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["Step ended"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:39,328 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:39,328 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Step ended], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:39,328 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Step ended], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:39,328 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:39,328 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:39,328 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:39,328 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:39,329 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Step ended], sender=TurnManager, reason=None))
2017-10-24 16:45:39,330 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856339.33
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:39,330 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:39,330 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:39,331 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:39,335 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 16:45:39,336 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:39,336 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:39,339 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:45:39,339 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:39,339 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:39,339 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:39,340 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:39,340 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:39,340 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:39,340 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:39,340 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:39,340 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:39,340 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:39,340 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:39,343 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:39,344 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:39,345 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:39,345 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:39,345 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:39,345 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:39,345 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,345 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,346 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:39,346 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:39,346 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:39,346 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:39,346 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:39,347 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:39,351 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:39,351 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:39,351 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Step ended], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:39,351 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None))
2017-10-24 16:45:39,351 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:39,351 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "yes"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:39,352 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:39,352 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Step ended], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:45:39,353 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Step ended], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:39,353 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Step ended], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:39,353 - session_2017-10-24T16_45_05_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f6edc0b64d0>:1.0
2017-10-24 16:45:39,354 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:40,354 - session_2017-10-24T16_45_05_0 - DEBUG - Timeout fired
2017-10-24 16:45:40,354 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:40,354 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:40,354 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:40,354 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:45:40,355 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856340.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:40,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:40,356 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:40,358 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:40,359 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:40,363 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:40,363 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:40,363 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:40,366 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:40,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:40,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:40,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:40,367 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:40,368 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:40,368 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:40,368 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:40,368 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:40,368 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:40,368 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:40,369 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:40,369 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:40,369 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:40,369 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:40,370 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:40,370 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:40,370 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:40,370 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:40,370 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:40,372 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856340.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:40,372 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:40,376 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:40,376 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:40,379 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 16:45:40,379 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:40,379 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:40,382 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:40,382 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:40,382 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:40,383 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:40,385 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:40,385 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:40,385 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:40,388 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:45:40,389 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:40,389 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:45:51,361 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "what should i do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:45:51,361 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:51,362 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None))
2017-10-24 16:45:51,362 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:51,362 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:51,362 - session_2017-10-24T16_45_05_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "what should i do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:45:51,362 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:45:51,363 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:45:51,363 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])} for DDD 'recipehelp'
2017-10-24 16:45:51,363 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
2017-10-24 16:45:51,363 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:51,364 - session_2017-10-24T16_45_05_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "what should i do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "what should i do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "say_step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "what should i do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:45:51,364 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:45:51,364 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None))
2017-10-24 16:45:51,364 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:51,364 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "yes"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:51,365 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,366 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:45:51,366 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:45:51,366 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:51,367 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,367 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,369 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,369 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), confirmation(yes), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:45:51,369 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:51,369 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:51,370 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 16:45:51,370 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:45:51,372 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,374 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,375 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:51,376 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:51,376 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), confirmation(yes), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:45:51,376 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:45:51,377 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc0927a0>]
2017-10-24 16:45:51,377 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc0927a0>], sender=GuiBackend, reason=None)
2017-10-24 16:45:51,377 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:51,378 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:45:51,378 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:45:51,378 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:51,378 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:45:51,378 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:45:51,379 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,379 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None))
2017-10-24 16:45:51,379 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:45:51,379 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:51,380 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,380 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc0927a0>], sender=GuiBackend, reason=None))
2017-10-24 16:45:51,380 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc0927a0>], sender=GuiBackend, reason=None)
2017-10-24 16:45:51,380 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:51,382 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,382 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:51,384 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:51,384 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:51,385 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:51,385 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:51,385 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:51,385 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:45:51,385 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:45:51,385 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:45:51,386 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None))
2017-10-24 16:45:51,388 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856351.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:51,388 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:51,388 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:51,388 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:51,392 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:45:51,392 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:51,392 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:51,395 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:51,395 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:51,395 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:51,396 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:51,396 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:51,396 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:51,396 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:51,396 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:51,396 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:51,397 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:51,397 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:51,397 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:51,400 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.confirmation_yn(X)])
-- END TIS changes --
2017-10-24 16:45:51,400 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:51,400 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:51,401 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:51,402 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:51,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:51,402 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:51,403 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,403 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,403 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:51,403 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:51,406 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:45:51,406 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:51,406 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:51,406 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None))
2017-10-24 16:45:51,407 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: yes}], sender=DmeModule, reason=None)
2017-10-24 16:45:51,407 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "yes"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:51,407 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,407 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:45:51,408 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:51,408 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:45:51,408 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,408 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,409 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,409 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:51,410 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856351.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([?X.confirmation_yn(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:51,411 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:51,416 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                      ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                      ^
- tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
?                                                                                                                                     ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
?                                                                                                                                     ^
-- END TIS changes --
2017-10-24 16:45:51,421 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                      ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                      ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
?                                                                                                                                     ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
?                                                                                                                                     ^^
-- END TIS changes --
2017-10-24 16:45:51,422 - session_2017-10-24T16_45_05_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:45:51,423 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:51,429 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                        ^ ^^^^^^^^^^    ^^^^^^^                                    ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')])
?                                       + ^^^ ^^^  ++++++++ ++ ^                                   + ^                              ^^                 +++++++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 16:45:51,430 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:51,435 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:45:51,435 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:51,436 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:51,439 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:51,439 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:51,439 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:51,445 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
+ tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
+ tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
?                                                               ++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:51,445 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:51,445 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:51,445 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:51,445 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:51,446 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:51,446 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #])
2017-10-24 16:45:51,446 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:51,446 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #])
2017-10-24 16:45:51,446 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:51,451 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {confirmation_yn("what should i do")}
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("what should i do")}
?                                                                                              +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')}
-- END TIS changes --
2017-10-24 16:45:51,451 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:51,451 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:51,456 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("what should i do")}
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("what should i do"), resolved(?X.confirmation_yn(X))}
?                                                                                                                                   +++++++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             -------------------------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 16:45:51,456 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:51,460 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          --------------------------------
+ tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:51,460 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,460 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:51,460 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:51,460 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:51,460 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:51,460 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:51,461 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:51,461 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:51,461 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:51,461 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:51,461 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,465 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
?                                                                                                            -------------------
+ tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
?                                                                                                                                                                                                       ++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          ----------------------------------
+ tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:51,465 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,465 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,468 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_if_then_else
-- BEGIN TIS changes --
- tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
-- END TIS changes --
2017-10-24 16:45:51,468 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,469 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,474 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 +++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:51,475 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,475 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,480 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                                                                                  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:45:51,480 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,480 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,480 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,480 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:51,483 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.confirmation_yn(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:45:51,483 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:51,487 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(confirmation_action))])
- tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             -------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 16:45:51,487 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:51,487 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,491 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.plan: Stack([jumpto(perform(confirmation_action))])
+ tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:45:51,491 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,491 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,496 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          -------------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("what should i do"), resolved(?X.confirmation_yn(X))}
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
-- END TIS changes --
2017-10-24 16:45:51,496 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,496 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,497 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,497 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:51,497 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:51,497 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, confirmation_yn("what should i do"), sender=DmeModule, reason=None)
2017-10-24 16:45:51,497 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None)
2017-10-24 16:45:51,497 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:45:51,498 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:51,499 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856351.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')])
tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')}
tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:51,499 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:51,505 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
?                                                                                                                    -------------------
+ tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
?                                                                                                                                                                                                               ++++++++++++++++++
-- END TIS changes --
2017-10-24 16:45:51,505 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:51,510 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:45:51,510 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:51,510 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:51,514 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:45:51,514 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:51,518 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:51,518 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:51,518 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:51,518 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:51,521 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:51,521 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:51,521 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:51,524 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:45:51,524 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:45:51,525 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:51,525 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, confirmation_yn("what should i do"), sender=DmeModule, reason=None))
2017-10-24 16:45:51,525 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, confirmation_yn("what should i do"), sender=DmeModule, reason=None)
2017-10-24 16:45:51,525 - session_2017-10-24T16_45_05_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, confirmation_yn("what should i do"), sender=DmeModule, reason=None)
2017-10-24 16:45:51,525 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None))
2017-10-24 16:45:51,525 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None)
2017-10-24 16:45:51,526 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": "what should i do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:45:51,526 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,526 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:45:51,527 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:45:51,527 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:51,528 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,528 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:45:51,529 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:45:51,529 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:45:51,529 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,530 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,532 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,532 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:45:51,532 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:45:51,532 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:45:51,532 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:51,532 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:45:51,533 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:45:51,533 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:51,533 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp') generated as u'Step ended'
2017-10-24 16:45:51,533 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:45:51,535 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,536 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:51,538 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:45:51,538 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:45:51,538 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:45:51,538 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:45:51,538 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:45:51,539 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:45:51,539 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:45:51,539 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc092908>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092638>]
2017-10-24 16:45:51,540 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc092908>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092638>], sender=GuiBackend, reason=None)
2017-10-24 16:45:51,540 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:45:51,540 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None))
2017-10-24 16:45:51,540 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:45:51,540 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Step ended"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:45:51,540 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,541 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:45:51,541 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:45:51,541 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Step ended"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:45:51,542 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,542 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc092908>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092638>], sender=GuiBackend, reason=None))
2017-10-24 16:45:51,542 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc092908>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc092638>], sender=GuiBackend, reason=None)
2017-10-24 16:45:51,543 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Step ended"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:45:51,543 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,544 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:51,565 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Step ended"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:45:51,565 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:45:51,565 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None))
2017-10-24 16:45:51,566 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None)
2017-10-24 16:45:51,566 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:45:51,566 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:51,566 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:51,566 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:45:51,567 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 16:45:51,568 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856351.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')}
tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:51,568 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:51,572 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
-- END TIS changes --
2017-10-24 16:45:51,572 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:51,572 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:51,572 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:51,579 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')}
?            ^^
- tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:51,579 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:51,579 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:51,582 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:45:51,582 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:51,582 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:51,582 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:51,582 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:51,582 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:51,582 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:51,582 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:51,583 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:51,583 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:51,583 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:45:51,583 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:51,587 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:45:51,587 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:51,587 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:51,588 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:51,588 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,588 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:51,591 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:45:51,591 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:45:51,591 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:51,591 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:45:51,591 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,591 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:51,591 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:51,592 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:51,592 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:51,592 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:51,592 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:51,592 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:51,592 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:51,592 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:51,592 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:51,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:51,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:51,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:51,593 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:51,594 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:51,596 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:45:51,596 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:45:51,597 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:51,597 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:45:51,597 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:45:51,597 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:45:51,598 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:45:51,598 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:45:51,599 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:51,599 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:45:51,600 - session_2017-10-24T16_45_05_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f6edc092ab8>:1.0
2017-10-24 16:45:51,600 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:45:52,600 - session_2017-10-24T16_45_05_0 - DEBUG - Timeout fired
2017-10-24 16:45:52,600 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:52,600 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:52,600 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:45:52,601 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:45:52,602 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856352.6
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:52,602 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:45:52,602 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:45:52,605 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:52,605 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:45:52,610 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'what should i do')}
-- END TIS changes --
2017-10-24 16:45:52,610 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:45:52,610 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:45:52,613 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:52,613 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:45:52,613 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:45:52,613 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:45:52,613 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:52,614 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:52,615 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:45:52,615 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:45:52,615 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:45:52,615 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:45:52,615 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:52,615 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:52,616 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:45:52,616 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:45:52,616 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:45:52,616 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:45:52,616 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:45:52,617 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:45:52,617 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:45:52,617 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:45:52,618 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856352.6
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:45:52,618 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:45:52,623 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:52,623 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:45:52,625 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 16:45:52,625 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:52,625 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:52,628 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:45:52,629 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:45:52,629 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:45:52,629 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:45:52,631 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:45:52,631 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:45:52,631 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:45:52,634 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:45:52,634 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:45:52,635 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:46:01,817 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "no"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:46:01,817 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:46:01,817 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None))
2017-10-24 16:46:01,817 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 16:46:01,817 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 16:46:01,817 - session_2017-10-24T16_45_05_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "no"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:46:01,818 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:46:01,820 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:46:01,820 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])} for DDD 'recipehelp'
2017-10-24 16:46:01,820 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
2017-10-24 16:46:01,820 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:46:01,821 - session_2017-10-24T16_45_05_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.No": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "no"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "False"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:46:01,821 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 16:46:01,821 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:46:01,821 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:01,821 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:46:01,822 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:01,822 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:46:01,823 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:46:01,823 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:46:01,823 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:01,823 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:01,825 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:01,825 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:01,825 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:46:01,826 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:46:01,826 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 16:46:01,826 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:46:01,828 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:01,830 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:01,830 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:46:01,831 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:46:01,831 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:01,831 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:46:01,831 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc092ef0>]
2017-10-24 16:46:01,831 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc092ef0>], sender=GuiBackend, reason=None)
2017-10-24 16:46:01,832 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:46:01,832 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:46:01,832 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:46:01,832 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:46:01,832 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:46:01,832 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:46:01,833 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:01,833 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None))
2017-10-24 16:46:01,833 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:46:01,833 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:46:01,834 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:01,834 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc092ef0>], sender=GuiBackend, reason=None))
2017-10-24 16:46:01,835 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc092ef0>], sender=GuiBackend, reason=None)
2017-10-24 16:46:01,835 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:46:01,835 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:01,835 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:46:01,876 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:46:01,877 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:46:01,877 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 16:46:01,877 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 16:46:01,877 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:46:01,877 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:46:01,877 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:46:01,877 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:46:01,878 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None))
2017-10-24 16:46:01,879 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856361.88
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:01,879 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:01,879 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:46:01,879 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:46:01,883 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:46:01,883 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:46:01,883 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:46:01,886 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:01,886 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:46:01,886 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:46:01,886 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:46:01,886 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:46:01,886 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:46:01,887 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:46:01,887 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:46:01,887 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:46:01,887 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:46:01,887 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:46:01,887 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:01,890 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.confirmation_yn(X)])
-- END TIS changes --
2017-10-24 16:46:01,891 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:46:01,891 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:01,891 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:46:01,891 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,891 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:46:01,891 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:46:01,891 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:01,891 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:01,892 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:01,892 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:46:01,892 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:46:01,892 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:01,892 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:46:01,892 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,892 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,892 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:46:01,893 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:01,893 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,893 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,893 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:01,893 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:46:01,897 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:46:01,897 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:01,897 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:46:01,897 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:46:01,897 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:01,897 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:46:01,898 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:01,898 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:46:01,898 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:46:01,899 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:46:01,899 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:46:01,899 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:46:01,900 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:46:01,900 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:46:01,901 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856361.9
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([?X.confirmation_yn(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:01,902 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:01,907 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                               ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                               ^
-- END TIS changes --
2017-10-24 16:46:01,913 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                               ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                               ^^
-- END TIS changes --
2017-10-24 16:46:01,915 - session_2017-10-24T16_45_05_0 - INFO - hypotheses reranked: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]) upranked to position 1 from position 2, replacing OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-24 16:46:01,916 - session_2017-10-24T16_45_05_0 - INFO - Could not log rerank
2017-10-24 16:46:01,916 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:46:01,922 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                        ^ ^^^^ ^^^^^^^^^^^^^^^^                                    ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
?                                       + ^^^ ^^ ^                                   + ^                              ^^                 +++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 16:46:01,922 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:46:01,928 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:46:01,928 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:46:01,928 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:46:01,931 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:01,932 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:46:01,932 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:46:01,937 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(yes), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
?                                                                                                                    -------------------
+ tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
?                                                                                                                                                                                                               ++++++++++++++++++
-- END TIS changes --
2017-10-24 16:46:01,937 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:46:01,937 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:46:01,937 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:46:01,937 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:46:01,937 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:46:01,937 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 16:46:01,938 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:46:01,938 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 16:46:01,938 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:01,943 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {confirmation_yn("no")}
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("no")}
?                                                                                              +++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 16:46:01,943 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:46:01,943 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:01,948 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("no")}
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("no"), resolved(?X.confirmation_yn(X))}
?                                                                                                                     +++++++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             -------------------------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 16:46:01,948 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:46:01,951 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          --------------------------------
+ tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:01,952 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:46:01,953 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,956 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          ----------------------------------
+ tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:46:01,956 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,957 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,960 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_if_then_else
-- BEGIN TIS changes --
- tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
-- END TIS changes --
2017-10-24 16:46:01,960 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,960 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,964 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 +++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:46:01,964 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,964 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,967 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                                                                                  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:46:01,968 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,968 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,968 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,968 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:46:01,971 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.confirmation_yn(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:46:01,971 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:01,975 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(confirmation_action))])
- tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             -------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 16:46:01,975 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:01,975 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,979 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.plan: Stack([jumpto(perform(confirmation_action))])
+ tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:46:01,979 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,979 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,984 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          -------------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("no"), resolved(?X.confirmation_yn(X))}
?                                                                                              --------------------------------------------------------
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
-- END TIS changes --
2017-10-24 16:46:01,984 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,984 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:01,984 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:01,985 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:01,985 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:46:01,985 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, confirmation_yn("no"), sender=DmeModule, reason=None)
2017-10-24 16:46:01,985 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 16:46:01,985 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:01,985 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:46:01,986 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856361.9
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:01,987 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:46:01,991 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:46:01,991 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:01,995 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:46:01,996 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:01,996 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:01,999 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:46:02,000 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:02,003 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:46:02,003 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:02,003 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:02,003 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:46:02,006 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:02,006 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:46:02,006 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:46:02,009 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:46:02,010 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:46:02,010 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:46:02,010 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, confirmation_yn("no"), sender=DmeModule, reason=None))
2017-10-24 16:46:02,010 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, confirmation_yn("no"), sender=DmeModule, reason=None)
2017-10-24 16:46:02,011 - session_2017-10-24T16_45_05_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, confirmation_yn("no"), sender=DmeModule, reason=None)
2017-10-24 16:46:02,011 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None))
2017-10-24 16:46:02,011 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 16:46:02,011 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": "no", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:46:02,011 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:02,012 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:46:02,012 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:02,012 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:46:02,013 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:02,013 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:46:02,014 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:46:02,014 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:46:02,014 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:02,015 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:02,017 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:02,017 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:02,017 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:46:02,017 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:02,017 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:46:02,017 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:46:02,018 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:46:02,018 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:46:02,018 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp') generated as u'Step ended'
2017-10-24 16:46:02,018 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:46:02,020 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:02,021 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:46:02,023 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:02,023 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:46:02,023 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:46:02,024 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:02,024 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:46:02,024 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:02,024 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:46:02,025 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc08c0e0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc08cd88>]
2017-10-24 16:46:02,025 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc08c0e0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc08cd88>], sender=GuiBackend, reason=None)
2017-10-24 16:46:02,025 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:46:02,025 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None))
2017-10-24 16:46:02,025 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:46:02,025 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Step ended"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:46:02,026 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:02,026 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:46:02,026 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:46:02,026 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Step ended"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:46:02,027 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:02,027 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc08c0e0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc08cd88>], sender=GuiBackend, reason=None))
2017-10-24 16:46:02,027 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc08c0e0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc08cd88>], sender=GuiBackend, reason=None)
2017-10-24 16:46:02,027 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Step ended"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:46:02,028 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:02,028 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:46:02,050 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Step ended"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:46:02,050 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:46:02,050 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None))
2017-10-24 16:46:02,050 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None)
2017-10-24 16:46:02,050 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:46:02,050 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:46:02,051 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:46:02,051 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:46:02,051 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 16:46:02,052 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856362.05
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:02,053 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:02,057 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^                                                                    ^^                                        -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^^                                                                    ^
-- END TIS changes --
2017-10-24 16:46:02,057 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:02,057 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:46:02,057 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:46:02,064 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^
- tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:46:02,065 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:46:02,065 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:46:02,068 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:46:02,068 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:46:02,068 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:46:02,068 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:46:02,068 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:46:02,068 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:46:02,068 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:46:02,068 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:46:02,069 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:46:02,069 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:46:02,069 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:46:02,069 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:02,074 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:46:02,074 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:46:02,074 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:02,074 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:46:02,074 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:02,074 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:02,077 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:46:02,077 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:46:02,078 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:46:02,079 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:02,079 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:46:02,079 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:02,079 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:02,079 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:46:02,079 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:02,079 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:02,080 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:02,080 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:02,080 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:46:02,083 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:46:02,083 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:02,083 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:46:02,083 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:46:02,084 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:02,084 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:46:02,084 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:02,084 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:46:02,084 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:46:02,085 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:46:02,085 - session_2017-10-24T16_45_05_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f6edc092320>:1.0
2017-10-24 16:46:02,085 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:46:03,086 - session_2017-10-24T16_45_05_0 - DEBUG - Timeout fired
2017-10-24 16:46:03,086 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:46:03,086 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:46:03,086 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:46:03,086 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:46:03,088 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856363.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:03,088 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:03,088 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:46:03,090 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:46:03,091 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:46:03,095 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 16:46:03,095 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:46:03,096 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:46:03,098 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:46:03,099 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:46:03,100 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:03,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:03,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:46:03,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:03,101 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:03,102 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:03,102 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:03,102 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:46:03,102 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:03,102 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:46:03,104 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856363.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:03,104 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:46:03,108 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:46:03,108 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:03,110 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 16:46:03,110 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:03,110 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:03,113 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:46:03,113 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:03,113 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:03,114 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:46:03,116 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:03,116 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:46:03,116 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:46:03,119 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:46:03,119 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:46:03,119 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:46:07,108 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "no"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:46:07,109 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:46:07,109 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None))
2017-10-24 16:46:07,109 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 16:46:07,109 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 16:46:07,110 - session_2017-10-24T16_45_05_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "no"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:46:07,110 - session_2017-10-24T16_45_05_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:46:07,111 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:46:07,111 - session_2017-10-24T16_45_05_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])} for DDD 'recipehelp'
2017-10-24 16:46:07,111 - session_2017-10-24T16_45_05_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
2017-10-24 16:46:07,112 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:46:07,112 - session_2017-10-24T16_45_05_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.No": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "no"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "False"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:46:07,112 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 16:46:07,112 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:46:07,112 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:07,113 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:46:07,113 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,113 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:46:07,115 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:46:07,115 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:46:07,115 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,116 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,118 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,118 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:07,118 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:46:07,118 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:46:07,119 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 16:46:07,119 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:46:07,121 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,124 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,124 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:46:07,124 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:46:07,124 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:07,124 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 16:46:07,124 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc08cf80>]
2017-10-24 16:46:07,125 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc08cf80>], sender=GuiBackend, reason=None)
2017-10-24 16:46:07,125 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:46:07,126 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:46:07,126 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:46:07,126 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:46:07,126 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:46:07,127 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:46:07,128 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,128 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None))
2017-10-24 16:46:07,128 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:46:07,128 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:46:07,129 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,130 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc08cf80>], sender=GuiBackend, reason=None))
2017-10-24 16:46:07,130 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6edc08cf80>], sender=GuiBackend, reason=None)
2017-10-24 16:46:07,131 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:46:07,132 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,133 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:46:07,135 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:46:07,136 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:46:07,136 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 16:46:07,136 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 16:46:07,136 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:46:07,136 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:46:07,136 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:46:07,136 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:46:07,137 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None))
2017-10-24 16:46:07,138 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856367.14
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:07,138 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:07,139 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:46:07,139 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:46:07,142 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:46:07,143 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:46:07,143 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:46:07,146 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:46:07,147 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:46:07,147 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:07,151 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.confirmation_yn(X)])
-- END TIS changes --
2017-10-24 16:46:07,151 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:46:07,151 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:07,151 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:46:07,151 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,151 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:46:07,151 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:46:07,152 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:07,152 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:07,152 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:07,152 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:46:07,152 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:46:07,152 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:07,152 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:46:07,152 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,153 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,153 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:46:07,153 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:07,153 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,153 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,154 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:07,154 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:46:07,156 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:46:07,156 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:07,157 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:46:07,157 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:46:07,157 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:07,157 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:46:07,158 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,158 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:46:07,158 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:46:07,158 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:46:07,159 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,160 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,160 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,160 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:46:07,162 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856367.16
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([?X.confirmation_yn(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:07,162 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:07,168 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                               ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                               ^
-- END TIS changes --
2017-10-24 16:46:07,176 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                               ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                               ^^
-- END TIS changes --
2017-10-24 16:46:07,178 - session_2017-10-24T16_45_05_0 - INFO - hypotheses reranked: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]) upranked to position 1 from position 2, replacing OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-24 16:46:07,178 - session_2017-10-24T16_45_05_0 - INFO - Could not log rerank
2017-10-24 16:46:07,179 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:46:07,184 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                        ^ ^^^^ ^^^^^^^^^^^^^^^^                                    ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
?                                       + ^^^ ^^ ^                                   + ^                              ^^                 +++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 16:46:07,184 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:46:07,189 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:46:07,189 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:46:07,189 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:46:07,193 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:07,193 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:46:07,193 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:46:07,197 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:07,197 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:46:07,198 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:46:07,198 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:46:07,198 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:46:07,198 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:46:07,198 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 16:46:07,198 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:46:07,198 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 16:46:07,198 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:07,202 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {confirmation_yn("no")}
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("no")}
?                                                                                              +++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 16:46:07,202 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:46:07,202 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:07,207 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("no")}
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("no"), resolved(?X.confirmation_yn(X))}
?                                                                                                                     +++++++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             -------------------------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 16:46:07,207 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:46:07,211 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          --------------------------------
+ tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:46:07,211 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,211 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:46:07,211 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:46:07,211 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:07,211 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:07,211 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:07,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:46:07,212 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:46:07,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:07,212 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:46:07,212 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,216 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          ----------------------------------
+ tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:46:07,216 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,216 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,219 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_if_then_else
-- BEGIN TIS changes --
- tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
-- END TIS changes --
2017-10-24 16:46:07,219 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,220 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,224 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 +++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:46:07,224 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,224 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,228 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                                                                                  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:46:07,228 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,228 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,228 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,228 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:46:07,231 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.confirmation_yn(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:46:07,231 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:07,235 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(confirmation_action))])
- tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             -------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 16:46:07,235 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:07,235 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,239 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.plan: Stack([jumpto(perform(confirmation_action))])
+ tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 16:46:07,239 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,239 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,244 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          -------------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next), confirmation_yn("no"), resolved(?X.confirmation_yn(X))}
?                                                                                              --------------------------------------------------------
+ tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
-- END TIS changes --
2017-10-24 16:46:07,244 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,244 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,245 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,245 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:07,245 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:46:07,245 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, confirmation_yn("no"), sender=DmeModule, reason=None)
2017-10-24 16:46:07,245 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 16:46:07,245 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:07,245 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:46:07,247 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856367.16
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:07,247 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:46:07,252 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:46:07,252 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:07,256 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:46:07,256 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:07,257 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:07,261 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 16:46:07,261 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:07,264 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:46:07,264 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:07,265 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:07,265 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:46:07,268 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:07,268 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:46:07,268 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:46:07,271 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:46:07,271 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:46:07,271 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:46:07,272 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, confirmation_yn("no"), sender=DmeModule, reason=None))
2017-10-24 16:46:07,272 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, confirmation_yn("no"), sender=DmeModule, reason=None)
2017-10-24 16:46:07,272 - session_2017-10-24T16_45_05_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, confirmation_yn("no"), sender=DmeModule, reason=None)
2017-10-24 16:46:07,272 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None))
2017-10-24 16:46:07,272 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 16:46:07,272 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": "no", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:46:07,273 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,273 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:46:07,273 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:07,274 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:46:07,275 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,275 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:46:07,275 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:46:07,276 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:46:07,276 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,276 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,278 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,278 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:07,278 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:46:07,279 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:07,279 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:46:07,279 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:46:07,279 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:46:07,279 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:46:07,280 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp') generated as u'Step ended'
2017-10-24 16:46:07,280 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:46:07,282 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,283 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:46:07,284 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:46:07,284 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:46:07,285 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:46:07,285 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:07,285 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:46:07,285 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), device_activity_terminated(go_to_next), DeviceResultProposition(say_step, [], True, None), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)})
2017-10-24 16:46:07,285 - session_2017-10-24T16_45_05_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:46:07,286 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc0ca320>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc0ca1b8>]
2017-10-24 16:46:07,286 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc0ca320>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc0ca1b8>], sender=GuiBackend, reason=None)
2017-10-24 16:46:07,286 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posted event
2017-10-24 16:46:07,286 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None))
2017-10-24 16:46:07,286 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 16:46:07,286 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Step ended"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:46:07,287 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,287 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:46:07,287 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:46:07,287 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Step ended"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:46:07,288 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,288 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc0ca320>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc0ca1b8>], sender=GuiBackend, reason=None))
2017-10-24 16:46:07,288 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6edc0ca320>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6edc0ca1b8>], sender=GuiBackend, reason=None)
2017-10-24 16:46:07,288 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Step ended"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:46:07,289 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,289 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:46:07,305 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Step ended"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:46:07,305 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:46:07,305 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None))
2017-10-24 16:46:07,305 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None)
2017-10-24 16:46:07,306 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:46:07,306 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:46:07,306 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:46:07,306 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 16:46:07,306 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 16:46:07,308 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856367.31
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:07,308 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:07,313 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^                                                                    ^^                                        -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^^                                                                    ^
-- END TIS changes --
2017-10-24 16:46:07,313 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:07,313 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:46:07,313 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:46:07,320 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^
- tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:46:07,320 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:46:07,320 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:46:07,323 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:46:07,323 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:46:07,323 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:46:07,324 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:07,329 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:46:07,329 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:46:07,329 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:07,329 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:46:07,329 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,329 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:07,333 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:46:07,333 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:46:07,333 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:07,333 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:46:07,333 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,333 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:46:07,333 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:46:07,333 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:07,334 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:07,334 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:07,334 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:46:07,334 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:46:07,334 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:07,334 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:46:07,334 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,334 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,335 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:46:07,335 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:07,335 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:07,335 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:07,335 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:07,335 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:46:07,338 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:46:07,338 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:07,339 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:46:07,339 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:46:07,339 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:07,339 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:46:07,339 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:46:07,340 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:46:07,340 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:46:07,341 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:46:07,342 - session_2017-10-24T16_45_05_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f6edc092a28>:1.0
2017-10-24 16:46:07,342 - session_2017-10-24T16_45_05_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:46:08,342 - session_2017-10-24T16_45_05_0 - DEBUG - Timeout fired
2017-10-24 16:46:08,342 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:46:08,342 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:46:08,342 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:46:08,342 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:46:08,343 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856368.34
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:08,344 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:46:08,344 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:46:08,346 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:46:08,347 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:46:08,351 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 16:46:08,351 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:46:08,351 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:46:08,354 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - INFO - BEGIN integrate_moves
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:integrate
2017-10-24 16:46:08,355 - session_2017-10-24T16_45_05_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - INFO - breaking out of accommodate
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - INFO - END integrate_moves
2017-10-24 16:46:08,356 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:08,357 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:08,357 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:46:08,357 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:46:08,357 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:46:08,358 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:46:08,358 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:46:08,358 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:46:08,358 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:46:08,358 - session_2017-10-24T16_45_05_0 - INFO - running ISU module: select
2017-10-24 16:46:08,360 - session_2017-10-24T16_45_05_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6ede59dfd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6edc05ba90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508856368.34
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:46:08,360 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:46:08,364 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:46:08,364 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_action
2017-10-24 16:46:08,366 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 16:46:08,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:08,366 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:08,369 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:46:08,370 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:46:08,370 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:select_move
2017-10-24 16:46:08,370 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:46:08,372 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:46:08,372 - session_2017-10-24T16_45_05_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:46:08,372 - session_2017-10-24T16_45_05_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:46:08,375 - session_2017-10-24T16_45_05_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:46:08,375 - session_2017-10-24T16_45_05_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 16:46:08,376 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:53:07,872 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:53:07,872 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 16:53:07,872 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:53:07,872 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:53:07,872 - session_2017-10-24T16_45_05_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 16:53:07,873 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:53:07,873 - session_2017-10-24T16_45_05_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 16:53:07,873 - session_2017-10-24T16_45_05_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:53:07,873 - session_2017-10-24T16_45_05_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 16:53:07,873 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:53:07,873 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 16:53:07,873 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:53:07,874 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:53:07,874 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:53:07,875 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 16:53:07,875 - session_2017-10-24T16_45_05_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:53:07,875 - session_2017-10-24T16_45_05_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 16:53:07,875 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 16:53:07,875 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 16:53:07,876 - session_2017-10-24T16_45_05_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:53:07,876 - session_2017-10-24T16_45_05_0 - DEBUG - Sent.
2017-10-24 16:53:07,877 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:53:07,877 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:53:07,877 - session_2017-10-24T16_45_05_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:53:07,877 - session_2017-10-24T16_45_05_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:53:07,878 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:53:07,880 - session_2017-10-24T16_45_05_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:53:07,881 - session_2017-10-24T16_45_05_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:53:07,883 - session_2017-10-24T16_45_05_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step), device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:53:07,884 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:53:07,885 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 16:53:07,885 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 16:53:07,885 - session_2017-10-24T16_45_05_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 16:53:07,885 - session_2017-10-24T16_45_05_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
