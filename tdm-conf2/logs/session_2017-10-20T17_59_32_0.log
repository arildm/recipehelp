2017-10-20 17:59:32,461 - session_2017-10-20T17_59_32_0 - DEBUG - Backend()
2017-10-20 17:59:32,462 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.initialize()
2017-10-20 17:59:32,492 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fe945d64e50>>, False])
2017-10-20 17:59:32,492 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fe945d64e50>>, 'eng'])
2017-10-20 17:59:32,492 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fe945d64e50>>, True, 'disabled'])
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fe945d64e50>>])
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7fe945d64e50>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fe945d64e50>>, 'eng', False, True])
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend initialized
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - Backend uses language 'eng'
2017-10-20 17:59:32,493 - session_2017-10-20T17_59_32_0 - DEBUG - running module InterpretModule
2017-10-20 17:59:32,494 - session_2017-10-20T17_59_32_0 - DEBUG - running module DmeModule
2017-10-20 17:59:32,495 - session_2017-10-20T17_59_32_0 - DEBUG - running module DeviceManager
2017-10-20 17:59:32,495 - session_2017-10-20T17_59_32_0 - DEBUG - running module GenerateModule
2017-10-20 17:59:32,495 - session_2017-10-20T17_59_32_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 17:59:32,496 - session_2017-10-20T17_59_32_0 - DEBUG - running module GuiBackend
2017-10-20 17:59:32,496 - session_2017-10-20T17_59_32_0 - DEBUG - running module CogloadModule
2017-10-20 17:59:32,496 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:32,497 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:32,498 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 17:59:32,498 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 17:59:32,498 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 17:59:32,498 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:32,499 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:32,530 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 17:59:32,530 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:32,531 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 17:59:32,532 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,532 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 17:59:32,532 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 17:59:32,532 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 17:59:32,533 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:32,533 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:32,535 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 17:59:32,536 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:32,536 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:59:32,536 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,536 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,536 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,536 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:59:32,537 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:59:32,538 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515172.54
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:32,538 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:32,538 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:32,538 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:32,541 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:32,541 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:32,541 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:32,543 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:32,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:32,545 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:32,547 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:59:32,548 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:32,550 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:59:32,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:32,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:32,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:32,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:32,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:32,551 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:32,551 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:32,551 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:32,551 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:32,551 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:32,551 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: select
2017-10-20 17:59:32,552 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515172.54
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:32,552 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:59:32,556 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:32,556 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:32,558 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:32,558 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:32,561 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:59:32,561 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:32,564 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:59:32,564 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:32,564 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:32,564 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:59:32,566 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:32,566 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:59:32,566 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:59:32,568 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 17:59:32,569 - session_2017-10-20T17_59_32_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:59:32,569 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:59:32,569 - session_2017-10-20T17_59_32_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,569 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,569 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,570 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,570 - session_2017-10-20T17_59_32_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:59:32,570 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 17:59:32,570 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:59:32,570 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:59:32,570 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:59:32,570 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 17:59:32,571 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:32,571 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:59:32,571 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:32,571 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:32,572 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:32,573 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 17:59:32,573 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:59:32,573 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:59:32,573 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:32,573 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:32,574 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:32,574 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:59:32,575 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:59:32,575 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:59:32,575 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:32,575 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:59:32,575 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:59:32,576 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:32,576 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:59:32,576 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:59:32,577 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:32,579 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:32,579 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:59:32,579 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:59:32,579 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:59:32,579 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:59:32,579 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:59:32,579 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:32,580 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:59:32,580 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:59:32,580 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posted event
2017-10-20 17:59:32,580 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:59:32,580 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:59:32,580 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:59:32,581 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:32,581 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:59:32,581 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:59:32,581 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:59:32,582 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:32,582 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:32,624 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:59:32,625 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:32,625 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:59:32,625 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:59:32,625 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:59:32,625 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:59:32,625 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:59:32,625 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:59:32,626 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:59:32,627 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515172.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:32,627 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:32,627 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:32,627 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:32,630 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 17:59:32,631 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:32,631 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:32,633 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:32,633 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:32,633 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:32,633 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:32,633 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:32,633 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:32,634 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:32,634 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:32,634 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:59:32,634 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:32,634 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:59:32,634 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:32,638 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:59:32,638 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:32,638 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:32,638 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:32,639 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:32,639 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:32,642 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:32,643 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:32,644 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:32,644 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:32,644 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:32,644 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:32,646 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:32,646 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:32,647 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:32,647 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:59:32,647 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:32,647 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:32,647 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:32,649 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:59:32,649 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:32,649 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:32,650 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:40,114 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:59:40,114 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:40,114 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-20 17:59:40,114 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:40,114 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:40,115 - session_2017-10-20T17_59_32_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:59:40,115 - session_2017-10-20T17_59_32_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:59:40,120 - session_2017-10-20T17_59_32_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:59:40,121 - session_2017-10-20T17_59_32_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-20 17:59:40,121 - session_2017-10-20T17_59_32_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-20 17:59:40,121 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:59:40,121 - session_2017-10-20T17_59_32_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:59:40,122 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:40,122 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:59:40,122 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:59:40,122 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:59:40,122 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:59:40,122 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:59:40,123 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:40,123 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:59:40,123 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:40,124 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:40,124 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:40,125 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:40,126 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515180.13
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:40,126 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:40,130 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-20 17:59:40,130 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:40,136 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-20 17:59:40,136 - session_2017-10-20T17_59_32_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:59:40,137 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:40,142 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:59:40,142 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:40,147 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:59:40,147 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:40,148 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:40,150 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:40,150 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:40,150 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:40,154 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 17:59:40,154 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:40,154 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:40,154 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:40,155 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:40,155 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:40,155 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-20 17:59:40,155 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:40,155 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-20 17:59:40,155 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:40,159 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:40,159 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:40,159 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:40,162 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:59:40,162 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:40,162 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:40,166 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:40,167 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:40,167 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:40,167 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:40,167 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:40,169 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:59:40,170 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:40,170 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:40,170 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:40,170 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:40,170 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:40,170 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-20 17:59:40,171 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:40,171 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: select
2017-10-20 17:59:40,172 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515180.13
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:40,172 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:59:40,177 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:59:40,177 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:40,180 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:40,180 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:40,183 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:59:40,183 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:40,183 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:40,186 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:59:40,186 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:40,189 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:59:40,189 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:40,189 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:40,189 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:59:40,192 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:40,192 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:59:40,192 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:59:40,194 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:40,195 - session_2017-10-20T17_59_32_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:59:40,195 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:40,195 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-20 17:59:40,195 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-20 17:59:40,195 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:59:40,196 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:40,196 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:59:40,196 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:40,197 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:40,198 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:40,198 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:59:40,198 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:40,199 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:59:40,199 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:40,199 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:40,201 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:40,201 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 17:59:40,201 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:59:40,201 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:59:40,201 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:59:40,201 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:59:40,201 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:40,201 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:59:40,202 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:59:40,202 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:59:40,202 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:59:40,202 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:40,203 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 17:59:40,203 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:59:40,205 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:40,207 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:40,207 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:59:40,207 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:59:40,207 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 17:59:40,207 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:59:40,207 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:59:40,207 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:59:40,207 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:59:40,208 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:40,208 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:59:40,208 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:59:40,208 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posted event
2017-10-20 17:59:40,209 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-20 17:59:40,209 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:59:40,209 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:59:40,210 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:40,210 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:59:40,210 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:59:40,211 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:59:40,212 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:40,213 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:40,215 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:59:40,216 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:40,216 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 17:59:40,216 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 17:59:40,216 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:59:40,217 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:59:40,217 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:59:40,217 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:59:40,217 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-20 17:59:40,219 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515180.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:40,219 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:40,219 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:40,219 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:40,225 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:59:40,225 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:40,225 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:59:40,229 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:40,230 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:59:40,230 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:40,233 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:59:40,233 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:40,234 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:40,234 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:40,234 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:40,234 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:40,238 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:40,238 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:40,239 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:40,239 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:40,239 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:40,239 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:40,242 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 17:59:40,242 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:40,242 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:40,243 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:40,244 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:40,244 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:40,244 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:40,244 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:40,244 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:40,244 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:40,244 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:40,245 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:40,245 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:40,245 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:40,247 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:40,247 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:40,248 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:40,248 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:59:40,248 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:40,248 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:40,248 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:40,249 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:59:40,249 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:40,249 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:40,249 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:43,565 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:59:43,566 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:43,566 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 17:59:43,566 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:43,566 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:43,566 - session_2017-10-20T17_59_32_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:59:43,566 - session_2017-10-20T17_59_32_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:59:43,568 - session_2017-10-20T17_59_32_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:59:43,568 - session_2017-10-20T17_59_32_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-20 17:59:43,568 - session_2017-10-20T17_59_32_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-20 17:59:43,569 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:59:43,569 - session_2017-10-20T17_59_32_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:59:43,569 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:43,569 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:59:43,569 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:59:43,570 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:59:43,570 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:59:43,570 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:59:43,570 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:43,571 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:59:43,571 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:43,572 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:43,572 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:43,572 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:43,574 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515183.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:43,575 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:43,580 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-20 17:59:43,580 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:43,585 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-20 17:59:43,589 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-20 17:59:43,590 - session_2017-10-20T17_59_32_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:59:43,590 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:43,593 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 17:59:43,593 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:43,597 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-20 17:59:43,597 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:43,597 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:43,600 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:43,600 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:43,600 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:43,605 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-20 17:59:43,605 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:43,605 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:43,605 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:43,605 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:43,606 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:43,606 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:43,606 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:43,606 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:43,606 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:43,609 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:59:43,609 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:43,609 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:43,613 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:59:43,613 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:43,616 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:59:43,616 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:43,616 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:43,616 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:43,616 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:43,616 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:43,617 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:43,617 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:43,617 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:43,617 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:43,617 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:43,617 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:43,620 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:59:43,620 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:43,620 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:43,623 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:59:43,623 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:43,623 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:43,623 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:43,623 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:43,626 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:59:43,626 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:43,626 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:43,627 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:43,627 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:43,627 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:43,627 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:59:43,627 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:59:43,627 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:59:43,627 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: select
2017-10-20 17:59:43,628 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515183.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:43,628 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:59:43,632 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose a step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:59:43,632 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:43,635 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:43,635 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:43,638 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 17:59:43,638 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:43,641 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:59:43,641 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:43,641 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:43,641 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:59:43,644 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:43,644 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:59:43,644 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:59:43,646 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:59:43,647 - session_2017-10-20T17_59_32_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:59:43,647 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:43,647 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-20 17:59:43,647 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:59:43,648 - session_2017-10-20T17_59_32_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:59:43,648 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-20 17:59:43,648 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:59:43,648 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:59:43,648 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:43,649 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:59:43,649 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:59:43,649 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:43,650 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:43,650 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:59:43,651 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:43,651 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:59:43,651 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:43,652 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:43,653 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:43,653 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:59:43,653 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:59:43,653 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:59:43,654 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-20 17:59:43,654 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:59:43,655 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:43,656 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:59:43,657 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:43,657 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:59:43,657 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:59:43,657 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:59:43,657 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:59:43,658 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7fe944088710>]
2017-10-20 17:59:43,658 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fe944088710>], sender=GuiBackend, reason=None)
2017-10-20 17:59:43,659 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posted event
2017-10-20 17:59:43,659 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-20 17:59:43,659 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:59:43,659 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:59:43,660 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:43,661 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:59:43,661 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:59:43,661 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:59:43,662 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:43,662 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fe944088710>], sender=GuiBackend, reason=None))
2017-10-20 17:59:43,662 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fe944088710>], sender=GuiBackend, reason=None)
2017-10-20 17:59:43,662 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:59:43,663 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:43,663 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:43,696 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:59:43,696 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:43,696 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-20 17:59:43,696 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-20 17:59:43,697 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:59:43,697 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:59:43,697 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:59:43,697 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:59:43,697 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-20 17:59:43,699 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515183.7
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:43,699 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:43,699 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:43,699 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:43,706 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:59:43,706 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:43,706 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:43,708 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:43,708 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:43,708 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:43,709 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:43,709 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:43,709 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:43,709 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:43,709 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:43,709 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:59:43,709 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:43,710 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:59:43,710 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:43,712 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose a step")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:59:43,712 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:43,713 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:43,716 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                            ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:59:43,716 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:43,716 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:43,716 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:43,716 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:43,716 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:43,717 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:43,718 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:43,718 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:43,718 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:43,718 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:43,718 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:43,721 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:59:43,721 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:59:43,721 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:59:43,721 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:59:43,721 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:59:43,721 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:43,722 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:43,722 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 17:59:43,722 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:59:43,723 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:59:43,723 - session_2017-10-20T17_59_32_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7fe94407af80>:1.0
2017-10-20 17:59:43,723 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:44,723 - session_2017-10-20T17_59_32_0 - DEBUG - Timeout fired
2017-10-20 17:59:44,723 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:59:44,723 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:59:44,724 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:59:44,724 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:59:44,725 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515184.72
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:44,725 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:44,725 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:44,727 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:59:44,727 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:44,731 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:59:44,731 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:44,732 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:44,734 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:59:44,735 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:44,735 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:44,735 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:44,735 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:44,735 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:44,735 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:44,736 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:44,736 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:44,736 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:44,736 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:44,736 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:44,739 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:59:44,739 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:44,739 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:44,742 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose a step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:59:44,742 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:44,742 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:44,742 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:44,742 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:44,742 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:44,742 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:44,743 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:44,743 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:44,743 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:44,743 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:44,743 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: select
2017-10-20 17:59:44,744 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515184.72
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:44,744 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:59:44,748 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose a step")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:44,748 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:44,751 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:44,751 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:44,754 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:59:44,754 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:44,756 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:59:44,757 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:44,757 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:44,757 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:59:44,759 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:44,759 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:59:44,759 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:59:44,761 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:59:44,762 - session_2017-10-20T17_59_32_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:59:44,762 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:59:49,306 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:59:49,306 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:49,306 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 17:59:49,307 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:49,307 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:49,307 - session_2017-10-20T17_59_32_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:59:49,307 - session_2017-10-20T17_59_32_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:59:49,308 - session_2017-10-20T17_59_32_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:59:49,308 - session_2017-10-20T17_59_32_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-20 17:59:49,308 - session_2017-10-20T17_59_32_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-20 17:59:49,308 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:59:49,309 - session_2017-10-20T17_59_32_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:59:49,309 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:59:49,309 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:59:49,309 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:49,309 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:49,310 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,310 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 17:59:49,310 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:59:49,311 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:59:49,311 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,311 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,312 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,312 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:59:49,312 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:59:49,313 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:59:49,313 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:49,313 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 17:59:49,313 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 17:59:49,313 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:49,314 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:59:49,314 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:59:49,315 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,316 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,316 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:59:49,316 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:59:49,316 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:59:49,316 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:59:49,316 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:59:49,317 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:59:49,317 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe9440887e8>]
2017-10-20 17:59:49,317 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe9440887e8>], sender=GuiBackend, reason=None)
2017-10-20 17:59:49,317 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posted event
2017-10-20 17:59:49,317 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:59:49,318 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:59:49,318 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:59:49,318 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:59:49,318 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 17:59:49,319 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,319 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:59:49,319 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:59:49,319 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:59:49,320 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,320 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe9440887e8>], sender=GuiBackend, reason=None))
2017-10-20 17:59:49,320 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe9440887e8>], sender=GuiBackend, reason=None)
2017-10-20 17:59:49,320 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:59:49,321 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,321 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:49,354 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:59:49,354 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:49,354 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:59:49,354 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:59:49,354 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:59:49,355 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:59:49,355 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:59:49,355 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:59:49,355 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:59:49,357 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515189.36
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:49,357 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:49,357 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:49,357 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:49,360 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:59:49,360 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:49,360 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:49,363 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:49,363 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:59:49,364 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:49,368 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:59:49,368 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:49,368 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:49,369 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:49,369 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,369 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:49,372 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:59:49,372 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:49,373 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:49,374 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:49,374 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:49,374 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:49,374 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,374 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:49,374 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:49,374 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:49,375 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,375 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:49,375 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:49,377 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:59:49,377 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:49,377 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:49,377 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:59:49,378 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:49,378 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:49,378 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,378 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:59:49,379 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:49,379 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:59:49,380 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,380 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,380 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,380 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:49,382 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515189.38
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:49,382 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:49,385 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-20 17:59:49,386 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:49,386 - session_2017-10-20T17_59_32_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:59:49,386 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:49,392 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
-- END TIS changes --
2017-10-20 17:59:49,392 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:49,399 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:59:49,399 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:49,400 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:49,402 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:49,402 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:49,402 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:49,408 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:59:49,408 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:49,408 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:49,411 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:59:49,411 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:49,411 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:49,411 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:49,411 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:49,411 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:49,412 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:49,412 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:49,412 - session_2017-10-20T17_59_32_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:49,412 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:49,412 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:49,413 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:49,413 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:49,413 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:49,413 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:49,417 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: accommodateDependentIssue
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:49,417 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:retract
2017-10-20 17:59:49,417 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:49,417 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:49,418 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:49,418 - session_2017-10-20T17_59_32_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:49,418 - session_2017-10-20T17_59_32_0 - INFO - breaking out: question raising move
2017-10-20 17:59:49,418 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:49,418 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:49,418 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:49,418 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:49,419 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:49,419 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:49,419 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:49,419 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:49,419 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:49,420 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,420 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:49,420 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:49,420 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:49,420 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,421 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:49,421 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:49,421 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:59:49,421 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:49,421 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: select
2017-10-20 17:59:49,422 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515189.38
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:49,422 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:59:49,427 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:59:49,427 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:49,430 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
?                                 -----------------------------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
-- END TIS changes --
2017-10-20 17:59:49,430 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:49,430 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:49,433 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
-- END TIS changes --
2017-10-20 17:59:49,434 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:49,434 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:49,434 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:49,434 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:59:49,436 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:49,437 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:59:49,437 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:59:49,439 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: setMediumTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 2.0
?                       ^
-- END TIS changes --
2017-10-20 17:59:49,440 - session_2017-10-20T17_59_32_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
2017-10-20 17:59:49,440 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:49,440 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-20 17:59:49,440 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:59:49,441 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:59:49,441 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,441 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:59:49,442 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:49,442 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:49,442 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,443 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:59:49,443 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:59:49,443 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:59:49,444 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,444 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,446 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,446 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:accommodate:?X.go_to_step(X)), facts={})
2017-10-20 17:59:49,446 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:accommodate:?X.go_to_step(X))
2017-10-20 17:59:49,446 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X)))), facts={})
2017-10-20 17:59:49,446 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))
2017-10-20 17:59:49,446 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:accommodate:?X.go_to_step(X))
2017-10-20 17:59:49,447 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move ICMMove(icm:accommodate:?X.go_to_step(X)) generated as u'So,'
2017-10-20 17:59:49,447 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))
2017-10-20 17:59:49,447 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X)))) generated as u'You want to know go to step.'
2017-10-20 17:59:49,448 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [So,, You want to know go to step.], sender=GenerateModule, reason=None)
2017-10-20 17:59:49,449 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,451 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [{value: answer(yes), title: Yes}, {value: answer(no), title: No}], title: You want to know go to step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:59:49,453 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:59:49,453 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:59:49,453 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
2017-10-20 17:59:49,453 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:accommodate:?X.go_to_step(X)), facts={})
2017-10-20 17:59:49,453 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:accommodate:?X.go_to_step(X))
2017-10-20 17:59:49,453 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X)))), facts={})
2017-10-20 17:59:49,453 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))
2017-10-20 17:59:49,455 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7fe94409ee18>]
2017-10-20 17:59:49,455 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fe94409ee18>], sender=GuiBackend, reason=None)
2017-10-20 17:59:49,455 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posted event
2017-10-20 17:59:49,455 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [So,, You want to know go to step.], sender=GenerateModule, reason=None))
2017-10-20 17:59:49,455 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [So,, You want to know go to step.], sender=GenerateModule, reason=None)
2017-10-20 17:59:49,455 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": ["So,", "You want to know go to step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:59:49,456 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,456 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [{value: answer(yes), title: Yes}, {value: answer(no), title: No}], title: You want to know go to step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:59:49,456 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [{value: answer(yes), title: Yes}, {value: answer(no), title: No}], title: You want to know go to step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:59:49,456 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [{"value": "answer(yes)", "title": "Yes"}, {"value": "answer(no)", "title": "No"}], "title": "You want to know go to step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:59:49,457 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,457 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fe94409ee18>], sender=GuiBackend, reason=None))
2017-10-20 17:59:49,457 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fe94409ee18>], sender=GuiBackend, reason=None)
2017-10-20 17:59:49,458 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [{"29687f5934314b7ff2716cd9f6c1a5c9.Element": {"name": "move", "title": "", "items": [{"29687f5934314b7ff2716cd9f6c1a5c9.Item": {"attributes": null, "selected": false, "predicted": false, "value": "answer(yes)", "title": "Yes"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Item": {"attributes": null, "selected": false, "predicted": false, "value": "answer(no)", "title": "No"}}], "format": "", "voice_browsed": false, "value": "", "template": "menu", "type": "list"}}], "title": "You want to know go to step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:59:49,458 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,458 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:49,474 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": ["So,", "You want to know go to step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:59:49,474 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:49,474 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [So,, You want to know go to step.], sender=TextOutputComponent, reason=None))
2017-10-20 17:59:49,475 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [So,, You want to know go to step.], sender=TextOutputComponent, reason=None)
2017-10-20 17:59:49,475 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:59:49,475 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None)
2017-10-20 17:59:49,475 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None)
2017-10-20 17:59:49,475 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None)
2017-10-20 17:59:49,476 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None))
2017-10-20 17:59:49,477 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515189.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [So,, You want to know go to step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 2.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:49,477 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:49,477 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:49,477 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:49,482 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:59:49,482 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:49,482 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:49,485 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:49,485 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:49,485 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:49,485 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:49,485 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:49,485 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:49,485 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:49,485 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:49,486 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:49,486 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:49,487 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:49,487 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:49,491 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateAccommodationICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
?                                         -------------------------------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?und(USR, goal(resolve(?X.go_to_step(X))))])
-- END TIS changes --
2017-10-20 17:59:49,491 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:49,491 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:49,491 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:49,491 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,491 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:49,495 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateUndPosICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0), Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
?                             ----------------------------------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:59:49,495 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:49,496 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:49,496 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:49,496 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,496 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:49,496 - session_2017-10-20T17_59_32_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:49,497 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:49,498 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,498 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:49,498 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:49,498 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:49,498 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:49,498 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:49,499 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:49,501 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:59:49,501 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:49,501 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [So,, You want to know go to step.], latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])}, 2.0), sender=DmeModule, reason=None)
2017-10-20 17:59:49,502 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:59:49,502 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:59:49,502 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:59:49,502 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 17:59:49,503 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [So,, You want to know go to step.], latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])}, 2.0), sender=DmeModule, reason=None))
2017-10-20 17:59:49,503 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [So,, You want to know go to step.], latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])}, 2.0), sender=DmeModule, reason=None)
2017-10-20 17:59:49,503 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [So,, You want to know go to step.], latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])}, 2.0), sender=DmeModule, reason=None)
2017-10-20 17:59:49,504 - session_2017-10-20T17_59_32_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7fe94403c908>:2.0
2017-10-20 17:59:49,504 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:51,504 - session_2017-10-20T17_59_32_0 - DEBUG - Timeout fired
2017-10-20 17:59:51,504 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:59:51,504 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:59:51,505 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:59:51,505 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:59:51,506 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515191.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X)), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?und(USR, goal(resolve(?X.go_to_step(X))))])
tis.sys_turns: 0
tis.timeout.duration: 2.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:51,506 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:59:51,506 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:59:51,509 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:59:51,509 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:59:51,513 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:59:51,513 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:59:51,513 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:59:51,516 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:51,517 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:59:51,517 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:59:51,517 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:59:51,517 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:59:51,517 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:59:51,521 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: noFollowupToUndQ
-- BEGIN TIS changes --
- tis.private.tmp.usr.agenda: OpenQueue([#])
+ tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
?                                         +++++++++++++++++++++++++++
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                             +++++++++++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
+ tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                         ++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:51,521 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:59:51,521 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 17:59:51,521 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:51,521 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:51,521 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:51,521 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:51,522 - session_2017-10-20T17_59_32_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:51,522 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:51,522 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:51,522 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:51,522 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:51,522 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:51,523 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:51,527 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: accommodatePlan2Goals
-- BEGIN TIS changes --
- tis.private.issues_being_accommodated: {}
+ tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
?                                         ++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:51,527 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:retract
2017-10-20 17:59:51,527 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:51,527 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:51,527 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:51,527 - session_2017-10-20T17_59_32_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:51,528 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:59:51,528 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:51,528 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:51,528 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:51,528 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:51,528 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:51,532 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: accommodateIssues2QUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?und(USR, goal(resolve(?X.go_to_step(X))))])
+ tis.shared.qud: stackset([?X.step_to_choose(X), ?und(USR, goal(resolve(?X.go_to_step(X))))])
?                           ++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:51,532 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:retract
2017-10-20 17:59:51,532 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:59:51,532 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:59:51,532 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 17:59:51,535 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
?                                                                  ++++++++++++++++++++++++++++++++
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:59:51,536 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:59:51,536 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:51,539 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:59:51,539 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:59:51,543 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:59:51,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:51,543 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:59:51,543 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:59:51,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:51,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:51,543 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:51,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:59:51,544 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 17:59:51,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:59:51,544 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 17:59:51,544 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:51,547 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:59:51,547 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:51,547 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:51,550 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:59:51,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:51,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:51,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:51,550 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:59:51,553 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X), ?und(USR, goal(resolve(?X.go_to_step(X))))])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:59:51,553 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:59:51,553 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:59:51,553 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:59:51,554 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:59:51,554 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:59:51,554 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:59:51,554 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:59:51,554 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: select
2017-10-20 17:59:51,555 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515191.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 2.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:59:51,555 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:59:51,558 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:accommodate:?X.go_to_step(X))), emit_icm(ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))))), emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.tmp.sys.bel: {go_to_step("chose a step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:59:51,558 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 17:59:51,561 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                                                  +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:59:51,561 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:51,564 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 17:59:51,564 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:51,564 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:51,567 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 17:59:51,567 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:51,569 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:59:51,569 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:59:51,570 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 17:59:51,570 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:59:51,572 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:59:51,572 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:59:51,572 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:59:51,574 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 2.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:59:51,575 - session_2017-10-20T17_59_32_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:59:51,575 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:00:23,766 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 18:00:23,767 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:00:23,767 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-20 18:00:23,767 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 18:00:23,767 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 18:00:23,767 - session_2017-10-20T17_59_32_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 18:00:23,767 - session_2017-10-20T17_59_32_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 18:00:23,769 - session_2017-10-20T17_59_32_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 18:00:23,769 - session_2017-10-20T17_59_32_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-20 18:00:23,769 - session_2017-10-20T17_59_32_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-20 18:00:23,769 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 18:00:23,770 - session_2017-10-20T17_59_32_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 18:00:23,770 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 18:00:23,770 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-20 18:00:23,770 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 18:00:23,770 - session_2017-10-20T17_59_32_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 18:00:23,770 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 18:00:23,771 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 18:00:23,771 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:00:23,772 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,772 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 18:00:23,773 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:00:23,773 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:00:23,773 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,773 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,774 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,775 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 18:00:23,775 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 18:00:23,775 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 18:00:23,775 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-20 18:00:23,775 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 18:00:23,776 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,777 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:00:23,778 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,779 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:00:23,779 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 18:00:23,779 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 18:00:23,779 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 18:00:23,780 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe944080248>, <tdm.tdm_gui_protocol.Popup instance at 0x7fe94402d908>]
2017-10-20 18:00:23,780 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe944080248>, <tdm.tdm_gui_protocol.Popup instance at 0x7fe94402d908>], sender=GuiBackend, reason=None)
2017-10-20 18:00:23,780 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posted event
2017-10-20 18:00:23,780 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-20 18:00:23,780 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 18:00:23,780 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 18:00:23,781 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 18:00:23,781 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 18:00:23,782 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,782 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-20 18:00:23,782 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 18:00:23,782 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:00:23,783 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,783 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 18:00:23,784 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:00:23,784 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 18:00:23,784 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,784 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe944080248>, <tdm.tdm_gui_protocol.Popup instance at 0x7fe94402d908>], sender=GuiBackend, reason=None))
2017-10-20 18:00:23,785 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe944080248>, <tdm.tdm_gui_protocol.Popup instance at 0x7fe94402d908>], sender=GuiBackend, reason=None)
2017-10-20 18:00:23,785 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:00:23,785 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,786 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:00:23,796 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:00:23,796 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:00:23,797 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-20 18:00:23,797 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-20 18:00:23,797 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:00:23,797 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 18:00:23,797 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 18:00:23,797 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 18:00:23,798 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-20 18:00:23,799 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515223.8
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:00:23,799 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:00:23,799 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:00:23,799 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:00:23,807 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
?                                         --------------------
+ tis.private.issues_being_accommodated: {}
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:accommodate:?X.go_to_step(X), speaker=SYS, score=1.0), ICMMove(icm:und*pos:USR*goal(resolve(?X.go_to_step(X))), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 18:00:23,807 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:00:23,807 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:00:23,809 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:23,809 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:00:23,810 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:00:23,810 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:00:23,810 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:00:23,810 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:00:23,810 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:00:23,810 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 18:00:23,810 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:00:23,811 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:00:23,811 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:00:23,811 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 18:00:23,813 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose a step")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:00:23,813 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:00:23,813 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                            ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:00:23,817 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:00:23,818 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 18:00:23,818 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:00:23,818 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 18:00:23,818 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:23,818 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,818 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:00:23,819 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:00:23,819 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:23,819 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,819 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:00:23,819 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:00:23,821 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:23,821 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 18:00:23,822 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:00:23,822 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 18:00:23,822 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 18:00:23,822 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:00:23,822 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,823 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 18:00:23,824 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:00:23,824 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:00:23,824 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,825 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,825 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,825 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:00:23,826 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515223.83
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:00:23,826 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:00:23,829 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-20 18:00:23,830 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:00:23,830 - session_2017-10-20T17_59_32_0 - INFO - hypotheses reranking had no effect
2017-10-20 18:00:23,830 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:00:23,834 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                       - ^^^ ^^^^^      ^^^^^^^^^^^^^^                                     ^^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')])
?                                        ^ ^^^^^^      ^                                    + ^                                                +++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:00:23,834 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:00:23,840 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 18:00:23,840 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:00:23,840 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:00:23,843 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:23,843 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:00:23,844 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:00:23,855 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
?                                         ---------------------------
+ tis.private.tmp.usr.agenda: OpenQueue([#])
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
+ tis.private.tmp.usr.bel: {go_to_step("chose a step")}
+ tis.private.tmp.usr.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.private.tmp.usr.goals: stackset([perform(top)])
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.usr.plan: Stack([])
- tis.private.tmp.usr.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.private.tmp.usr.qud: stackset([])
-- END TIS changes --
2017-10-20 18:00:23,855 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:00:23,855 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:00:23,855 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:00:23,855 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:00:23,856 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 18:00:23,856 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 18:00:23,856 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:00:23,856 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 18:00:23,856 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 18:00:23,860 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.say_step(X)])
?                           ++++++++++++++
-- END TIS changes --
2017-10-20 18:00:23,860 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:00:23,860 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:00:23,861 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:00:23,861 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,864 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 -------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
-- END TIS changes --
2017-10-20 18:00:23,864 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 18:00:23,865 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:23,869 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose a step")}
+ tis.private.bel: {go_to_step("chose a step"), say_step("unknown step")}
?                                             ++++++++++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 18:00:23,869 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,869 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:23,869 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,869 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:00:23,872 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X)])
?                           --------------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 18:00:23,872 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:00:23,872 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:23,873 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,873 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:00:23,873 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:00:23,873 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 18:00:23,873 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}, {predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 18:00:23,873 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: select
2017-10-20 18:00:23,875 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515223.83
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step"), say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {go_to_step("chose a step")}
tis.private.tmp.usr.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.private.tmp.usr.goals: stackset([perform(top)])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:00:23,875 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:00:23,883 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), emit_icm(ICMMove(icm:acc*pos))])
?                                                                ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {go_to_step("chose a step")}
+ tis.private.tmp.sys.bel: {go_to_step("chose a step"), say_step("unknown step")}
?                                                     ++++++++++++++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                                 ^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                                 ^^^
-- END TIS changes --
2017-10-20 18:00:23,883 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 18:00:23,886 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:00:23,886 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:00:23,890 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-20 18:00:23,890 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 18:00:23,892 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("unknown step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:00:23,892 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:00:23,892 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 18:00:23,893 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:00:23,895 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:23,895 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:00:23,895 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:00:23,898 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:23,898 - session_2017-10-20T17_59_32_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')])
2017-10-20 18:00:23,899 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step"), say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("unknown step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:00:23,899 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-20 18:00:23,899 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 18:00:23,899 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 18:00:23,900 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,900 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}, {predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 18:00:23,900 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}, {predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 18:00:23,900 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}, {"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:00:23,901 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,902 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step"), say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("unknown step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-20 18:00:23,902 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step"), say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("unknown step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:00:23,902 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:00:23,902 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step"), say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("unknown step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,903 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step"), say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("unknown step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,904 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step"), say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("unknown step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')]), com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,904 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("unknown step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step"), resolved(?X.go_to_step(X)), say_step("unknown step")})
2017-10-20 18:00:23,904 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')
2017-10-20 18:00:23,904 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')
2017-10-20 18:00:23,905 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule: Move Move(answer(say_step("unknown step")), ddd_name=u'recipehelp') generated as u'Ok unknown step.'
2017-10-20 18:00:23,905 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok unknown step.], sender=GenerateModule, reason=None)
2017-10-20 18:00:23,906 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step"), say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("unknown step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')]), com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,907 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok unknown step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:00:23,909 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step"), say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("unknown step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')]), com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:00:23,909 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:00:23,909 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')])
2017-10-20 18:00:23,909 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("unknown step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step"), resolved(?X.go_to_step(X)), say_step("unknown step")})
2017-10-20 18:00:23,909 - session_2017-10-20T17_59_32_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("unknown step")), ddd_name=u'recipehelp')
2017-10-20 18:00:23,910 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe9440881b8>, <tdm.tdm_gui_protocol.Popup instance at 0x7fe944088a70>]
2017-10-20 18:00:23,910 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe9440881b8>, <tdm.tdm_gui_protocol.Popup instance at 0x7fe944088a70>], sender=GuiBackend, reason=None)
2017-10-20 18:00:23,910 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posted event
2017-10-20 18:00:23,910 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok unknown step.], sender=GenerateModule, reason=None))
2017-10-20 18:00:23,911 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok unknown step.], sender=GenerateModule, reason=None)
2017-10-20 18:00:23,911 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok unknown step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:00:23,911 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,911 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok unknown step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 18:00:23,911 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok unknown step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:00:23,912 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok unknown step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 18:00:23,912 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,912 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe9440881b8>, <tdm.tdm_gui_protocol.Popup instance at 0x7fe944088a70>], sender=GuiBackend, reason=None))
2017-10-20 18:00:23,913 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fe9440881b8>, <tdm.tdm_gui_protocol.Popup instance at 0x7fe944088a70>], sender=GuiBackend, reason=None)
2017-10-20 18:00:23,914 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok unknown step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:00:23,915 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,915 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:00:23,936 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok unknown step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:00:23,936 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:00:23,937 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok unknown step.], sender=TextOutputComponent, reason=None))
2017-10-20 18:00:23,937 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok unknown step.], sender=TextOutputComponent, reason=None)
2017-10-20 18:00:23,937 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:00:23,937 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok unknown step.], sender=TurnManager, reason=None)
2017-10-20 18:00:23,937 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok unknown step.], sender=TurnManager, reason=None)
2017-10-20 18:00:23,937 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok unknown step.], sender=TurnManager, reason=None)
2017-10-20 18:00:23,938 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok unknown step.], sender=TurnManager, reason=None))
2017-10-20 18:00:23,939 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515223.94
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok unknown step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("unknown step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step"), say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step"), say_step("unknown step")}
tis.private.tmp.sys.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {go_to_step("chose a step")}
tis.private.tmp.usr.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.private.tmp.usr.goals: stackset([perform(top)])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:00:23,939 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:00:23,939 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:00:23,939 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:00:23,945 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:00:23,945 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:00:23,945 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:00:23,947 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:00:23,948 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 18:00:23,951 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X)), say_step("unknown step")}
?                                                                        ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:00:23,951 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:00:23,951 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:00:23,956 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X)), say_step("unknown step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X)), say_step("unknown step"), resolved(?X.say_step(X))}
?                                                                                                  ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 18:00:23,956 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:00:23,956 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,956 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:00:23,956 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:23,957 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,958 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:00:23,958 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:00:23,958 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:23,958 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:23,958 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:00:23,958 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:00:23,960 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:23,961 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}, {predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 18:00:23,961 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok unknown step.], latest_moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:00:23,961 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}, {predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 18:00:23,961 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}, {predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 18:00:23,961 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}, {"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:00:23,962 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:00:23,962 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok unknown step.], latest_moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 18:00:23,962 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok unknown step.], latest_moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:00:23,962 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok unknown step.], latest_moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:00:23,963 - session_2017-10-20T17_59_32_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7fe94402d8c0>:1.0
2017-10-20 18:00:23,963 - session_2017-10-20T17_59_32_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:00:24,963 - session_2017-10-20T17_59_32_0 - DEBUG - Timeout fired
2017-10-20 18:00:24,964 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:00:24,964 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:00:24,964 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:00:24,964 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:00:24,965 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515224.96
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("unknown step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step"), say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step"), say_step("unknown step")}
tis.private.tmp.sys.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {go_to_step("chose a step")}
tis.private.tmp.usr.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.private.tmp.usr.goals: stackset([perform(top)])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X)), say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:00:24,965 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:00:24,965 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:00:24,968 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:00:24,968 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:00:24,972 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-20 18:00:24,972 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:00:24,973 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:00:24,975 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:24,975 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:00:24,975 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - INFO - BEGIN integrate_moves
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:integrate
2017-10-20 18:00:24,976 - session_2017-10-20T17_59_32_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:00:24,977 - session_2017-10-20T17_59_32_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:00:24,977 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:00:24,977 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 18:00:24,977 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:00:24,977 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:00:24,977 - session_2017-10-20T17_59_32_0 - INFO - breaking out of accommodate
2017-10-20 18:00:24,977 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:00:24,978 - session_2017-10-20T17_59_32_0 - INFO - END integrate_moves
2017-10-20 18:00:24,978 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:24,980 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:00:24,981 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:24,981 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:24,984 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose a step"), say_step("unknown step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X)), say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 18:00:24,984 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:24,984 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:24,984 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:24,984 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:00:24,984 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:00:24,984 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:00:24,985 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:00:24,985 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:00:24,985 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:00:24,985 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:00:24,985 - session_2017-10-20T17_59_32_0 - INFO - running ISU module: select
2017-10-20 18:00:24,986 - session_2017-10-20T17_59_32_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fe945d64fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fe9440871d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515224.96
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step"), say_step("unknown step")}
tis.private.tmp.sys.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {go_to_step("chose a step")}
tis.private.tmp.usr.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.private.tmp.usr.goals: stackset([perform(top)])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("unknown step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:00:24,986 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:00:24,991 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose a step"), say_step("unknown step")}
- tis.private.tmp.sys.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 18:00:24,991 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_action
2017-10-20 18:00:24,994 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:00:24,994 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:00:24,996 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:00:24,996 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 18:00:24,999 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:00:24,999 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:00:24,999 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:select_move
2017-10-20 18:00:24,999 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:00:25,001 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:00:25,001 - session_2017-10-20T17_59_32_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:00:25,002 - session_2017-10-20T17_59_32_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:00:25,004 - session_2017-10-20T17_59_32_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 18:00:25,004 - session_2017-10-20T17_59_32_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 18:00:25,004 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:01:50,463 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:01:50,463 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-20 18:01:50,464 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-20 18:01:50,464 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 18:01:50,464 - session_2017-10-20T17_59_32_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 18:01:50,464 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 18:01:50,465 - session_2017-10-20T17_59_32_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 18:01:50,465 - session_2017-10-20T17_59_32_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 18:01:50,465 - session_2017-10-20T17_59_32_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 18:01:50,465 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 18:01:50,465 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:01:50,466 - session_2017-10-20T17_59_32_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:01:50,467 - session_2017-10-20T17_59_32_0 - DEBUG - Sent.
2017-10-20 18:01:50,467 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 18:01:50,467 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:01:50,468 - session_2017-10-20T17_59_32_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:01:50,468 - session_2017-10-20T17_59_32_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:01:50,468 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:01:50,469 - session_2017-10-20T17_59_32_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:01:50,470 - session_2017-10-20T17_59_32_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:01:50,471 - session_2017-10-20T17_59_32_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:01:50,471 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-20 18:01:50,471 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 18:01:50,471 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-20 18:01:50,471 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 18:01:50,471 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-20 18:01:50,471 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 18:01:50,472 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-20 18:01:50,472 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 18:01:50,472 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-20 18:01:50,472 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:01:50,472 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-20 18:01:50,472 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 18:01:50,472 - session_2017-10-20T17_59_32_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-20 18:01:50,472 - session_2017-10-20T17_59_32_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
