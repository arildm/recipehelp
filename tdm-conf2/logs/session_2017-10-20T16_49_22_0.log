2017-10-20 16:49:22,515 - session_2017-10-20T16_49_22_0 - DEBUG - Backend()
2017-10-20 16:49:22,517 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.initialize()
2017-10-20 16:49:22,544 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fc2b8388950>>, False])
2017-10-20 16:49:22,544 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fc2b8388950>>, 'eng'])
2017-10-20 16:49:22,544 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 16:49:22,544 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 16:49:22,544 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 16:49:22,544 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fc2b8388950>>, True, 'disabled'])
2017-10-20 16:49:22,545 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fc2b8388950>>])
2017-10-20 16:49:22,545 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7fc2b8388950>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fc2b8388950>>, 'eng', False, True])
2017-10-20 16:49:22,545 - session_2017-10-20T16_49_22_0 - DEBUG - Backend initialized
2017-10-20 16:49:22,545 - session_2017-10-20T16_49_22_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 16:49:22,545 - session_2017-10-20T16_49_22_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 16:49:22,545 - session_2017-10-20T16_49_22_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 16:49:22,545 - session_2017-10-20T16_49_22_0 - DEBUG - Backend uses language 'eng'
2017-10-20 16:49:22,545 - session_2017-10-20T16_49_22_0 - DEBUG - running module InterpretModule
2017-10-20 16:49:22,546 - session_2017-10-20T16_49_22_0 - DEBUG - running module DmeModule
2017-10-20 16:49:22,547 - session_2017-10-20T16_49_22_0 - DEBUG - running module DeviceManager
2017-10-20 16:49:22,547 - session_2017-10-20T16_49_22_0 - DEBUG - running module GenerateModule
2017-10-20 16:49:22,547 - session_2017-10-20T16_49_22_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 16:49:22,547 - session_2017-10-20T16_49_22_0 - DEBUG - running module GuiBackend
2017-10-20 16:49:22,548 - session_2017-10-20T16_49_22_0 - DEBUG - running module CogloadModule
2017-10-20 16:49:22,548 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:22,548 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:22,548 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 16:49:22,549 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 16:49:22,550 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 16:49:22,550 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:22,551 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:22,582 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 16:49:22,583 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:22,583 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 16:49:22,584 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,584 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 16:49:22,585 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 16:49:22,585 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 16:49:22,585 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:22,585 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:22,588 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 16:49:22,588 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:22,588 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 16:49:22,588 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,589 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,589 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,589 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 16:49:22,589 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 16:49:22,590 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510962.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:22,590 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:22,590 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:22,591 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:22,593 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:22,593 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:22,593 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 16:49:22,596 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:22,597 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 16:49:22,597 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:22,597 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:22,597 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:22,597 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:22,597 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:22,597 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:22,597 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:22,598 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:22,598 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:22,598 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:22,598 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:22,598 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:22,601 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:22,601 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:22,603 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:22,603 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:22,603 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:22,604 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:22,604 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:22,604 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:22,604 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:22,604 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:22,605 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:22,605 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:22,605 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:22,605 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: select
2017-10-20 16:49:22,607 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510962.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:22,607 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 16:49:22,610 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:22,610 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:22,612 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:22,612 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:22,615 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:22,615 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:22,617 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:22,617 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:22,618 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:22,618 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 16:49:22,620 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:22,620 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 16:49:22,620 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 16:49:22,622 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 16:49:22,622 - session_2017-10-20T16_49_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:22,622 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 16:49:22,622 - session_2017-10-20T16_49_22_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,623 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,623 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,623 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,623 - session_2017-10-20T16_49_22_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 16:49:22,623 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 16:49:22,623 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 16:49:22,624 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 16:49:22,624 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 16:49:22,624 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 16:49:22,624 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:22,625 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:22,625 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:22,625 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:22,626 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:22,626 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 16:49:22,626 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 16:49:22,626 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 16:49:22,627 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:22,627 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:22,628 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:22,628 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 16:49:22,628 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 16:49:22,628 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 16:49:22,628 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:22,628 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 16:49:22,629 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 16:49:22,629 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:22,629 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 16:49:22,629 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 16:49:22,630 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:22,632 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:22,632 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 16:49:22,632 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:22,632 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 16:49:22,632 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 16:49:22,632 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 16:49:22,632 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:22,633 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 16:49:22,633 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 16:49:22,633 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posted event
2017-10-20 16:49:22,633 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 16:49:22,633 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 16:49:22,633 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 16:49:22,634 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:22,634 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 16:49:22,634 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 16:49:22,634 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 16:49:22,635 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:22,635 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:22,674 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 16:49:22,675 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:22,675 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 16:49:22,675 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 16:49:22,675 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 16:49:22,675 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:22,675 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:22,675 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:22,676 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 16:49:22,677 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510962.68
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:22,677 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:22,677 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:22,677 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:22,680 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 16:49:22,680 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:22,680 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:22,682 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:22,683 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:22,686 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 16:49:22,687 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:22,687 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:22,687 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:22,687 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:22,687 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:22,690 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 16:49:22,690 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:22,690 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:22,690 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:22,690 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:22,690 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:22,691 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:22,691 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:22,691 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:22,691 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:22,692 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:22,693 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:22,693 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:22,693 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:22,695 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:22,695 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:22,695 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:22,695 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:22,695 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:22,695 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:22,696 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:22,696 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 16:49:22,697 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:22,697 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:22,697 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:26,998 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 16:49:26,999 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:26,999 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-20 16:49:26,999 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:26,999 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:27,000 - session_2017-10-20T16_49_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 16:49:27,000 - session_2017-10-20T16_49_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 16:49:27,005 - session_2017-10-20T16_49_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 16:49:27,005 - session_2017-10-20T16_49_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-20 16:49:27,005 - session_2017-10-20T16_49_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-20 16:49:27,005 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-20 16:49:27,006 - session_2017-10-20T16_49_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 16:49:27,006 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:27,006 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-20 16:49:27,006 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-20 16:49:27,006 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 16:49:27,007 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 16:49:27,007 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 16:49:27,007 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:27,007 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 16:49:27,007 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:27,008 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:27,009 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:27,009 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:27,011 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510967.01
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:27,011 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:27,014 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-20 16:49:27,015 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:27,018 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-20 16:49:27,019 - session_2017-10-20T16_49_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 16:49:27,019 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:27,023 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 16:49:27,023 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:27,029 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 16:49:27,029 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:27,029 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:27,032 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:27,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:27,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:27,038 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 16:49:27,038 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:27,038 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:27,038 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:27,038 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:27,038 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:27,039 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-20 16:49:27,039 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:27,039 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-20 16:49:27,039 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:27,043 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:27,043 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:27,043 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:27,046 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 16:49:27,047 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:27,047 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:27,050 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 16:49:27,050 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:27,050 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:27,051 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:27,051 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:27,051 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:27,051 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:27,051 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:27,051 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:27,051 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:27,051 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:27,052 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:27,052 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:27,054 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 16:49:27,055 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:27,055 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:27,056 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:27,056 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:27,056 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:27,056 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-20 16:49:27,056 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:27,056 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: select
2017-10-20 16:49:27,057 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510967.01
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:27,057 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 16:49:27,061 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 16:49:27,061 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:27,064 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:27,065 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:27,068 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 16:49:27,068 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:27,068 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:27,071 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 16:49:27,071 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:27,075 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:27,075 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:27,075 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:27,075 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 16:49:27,078 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:27,078 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 16:49:27,078 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 16:49:27,080 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:27,081 - session_2017-10-20T16_49_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:27,081 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:27,081 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-20 16:49:27,081 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-20 16:49:27,081 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 16:49:27,082 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:27,082 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:27,082 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:27,082 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:27,083 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:27,084 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-20 16:49:27,084 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:27,084 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 16:49:27,085 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:27,085 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:27,086 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:27,086 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 16:49:27,086 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 16:49:27,086 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 16:49:27,087 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 16:49:27,087 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 16:49:27,087 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:27,087 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 16:49:27,087 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 16:49:27,087 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 16:49:27,087 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 16:49:27,088 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:27,088 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 16:49:27,088 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 16:49:27,089 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 16:49:27,092 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:27,093 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 16:49:27,093 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 16:49:27,093 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posted event
2017-10-20 16:49:27,093 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-20 16:49:27,093 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 16:49:27,093 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 16:49:27,094 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:27,094 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 16:49:27,094 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 16:49:27,094 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 16:49:27,095 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:27,095 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:27,112 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 16:49:27,112 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:27,112 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 16:49:27,112 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 16:49:27,112 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 16:49:27,112 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 16:49:27,112 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 16:49:27,113 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 16:49:27,113 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-20 16:49:27,115 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510967.11
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:27,115 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:27,115 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:27,115 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:27,121 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 16:49:27,121 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:27,121 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:27,124 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:27,124 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:27,124 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:27,124 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:27,124 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:27,124 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:27,125 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:27,125 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:27,125 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:27,125 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:27,125 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:27,125 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:27,129 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 16:49:27,129 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:27,129 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:27,129 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:27,130 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:27,130 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:27,133 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:27,133 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:27,134 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:27,134 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:27,134 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:27,134 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:27,137 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 16:49:27,137 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:27,137 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:27,138 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:27,139 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:27,139 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:27,139 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:27,139 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:27,139 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:27,139 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:27,140 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:27,140 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:27,140 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:27,142 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:27,142 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:27,143 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:27,143 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:27,143 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:27,143 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:27,144 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:27,144 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 16:49:27,144 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:27,144 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:27,145 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:31,440 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 16:49:31,441 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:31,441 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 16:49:31,441 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:31,441 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:31,441 - session_2017-10-20T16_49_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 16:49:31,441 - session_2017-10-20T16_49_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 16:49:31,443 - session_2017-10-20T16_49_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 16:49:31,443 - session_2017-10-20T16_49_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-20 16:49:31,444 - session_2017-10-20T16_49_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-20 16:49:31,444 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 16:49:31,444 - session_2017-10-20T16_49_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 16:49:31,444 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:31,444 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-20 16:49:31,445 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 16:49:31,445 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 16:49:31,445 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 16:49:31,445 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 16:49:31,446 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:31,446 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 16:49:31,446 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:31,446 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:31,447 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:31,447 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:31,449 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510971.45
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:31,449 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:31,453 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-20 16:49:31,453 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:31,458 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-20 16:49:31,462 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-20 16:49:31,462 - session_2017-10-20T16_49_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 16:49:31,462 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:31,465 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 16:49:31,466 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:31,471 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-20 16:49:31,471 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:31,472 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:31,476 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:31,476 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:31,476 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:31,483 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 16:49:31,484 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:31,488 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 16:49:31,488 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:31,488 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:31,493 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 16:49:31,493 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:31,496 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 16:49:31,496 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:31,496 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:31,496 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:31,496 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:31,496 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:31,496 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:31,497 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:31,497 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:31,497 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:31,497 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:31,497 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:31,500 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-20 16:49:31,500 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:31,501 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:31,504 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 16:49:31,504 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:31,504 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:31,504 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:31,505 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:31,507 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 16:49:31,507 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:31,507 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:31,508 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:31,508 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:31,508 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:31,508 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 16:49:31,508 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 16:49:31,508 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 16:49:31,508 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: select
2017-10-20 16:49:31,509 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510971.45
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:31,510 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 16:49:31,514 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 16:49:31,514 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:31,517 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:31,517 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:31,520 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 16:49:31,520 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:31,523 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:31,523 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:31,523 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:31,524 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 16:49:31,526 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:31,526 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 16:49:31,526 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 16:49:31,529 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 16:49:31,530 - session_2017-10-20T16_49_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-20 16:49:31,530 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:31,530 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-20 16:49:31,530 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 16:49:31,530 - session_2017-10-20T16_49_22_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 16:49:31,531 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-20 16:49:31,531 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 16:49:31,531 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 16:49:31,531 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:31,531 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 16:49:31,532 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 16:49:31,532 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:31,533 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:31,533 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-20 16:49:31,533 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:31,534 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 16:49:31,534 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:31,534 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:31,535 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:31,535 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={go_to_step(" Step one: Chop onions and garlic.")})
2017-10-20 16:49:31,535 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 16:49:31,536 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 16:49:31,536 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok  Step one: Chop onions and garlic..'
2017-10-20 16:49:31,536 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-20 16:49:31,537 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:31,538 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-20 16:49:31,539 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:31,539 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 16:49:31,539 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-20 16:49:31,540 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={go_to_step(" Step one: Chop onions and garlic.")})
2017-10-20 16:49:31,540 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 16:49:31,541 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7fc2b5c8a830>]
2017-10-20 16:49:31,541 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fc2b5c8a830>], sender=GuiBackend, reason=None)
2017-10-20 16:49:31,541 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posted event
2017-10-20 16:49:31,541 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None))
2017-10-20 16:49:31,541 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-20 16:49:31,541 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 16:49:31,542 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:31,542 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None))
2017-10-20 16:49:31,543 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-20 16:49:31,543 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok  Step one: Chop onions and garlic.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 16:49:31,543 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:31,543 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fc2b5c8a830>], sender=GuiBackend, reason=None))
2017-10-20 16:49:31,544 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fc2b5c8a830>], sender=GuiBackend, reason=None)
2017-10-20 16:49:31,544 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok  Step one: Chop onions and garlic.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 16:49:31,544 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:31,545 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:31,560 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 16:49:31,560 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:31,561 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None))
2017-10-20 16:49:31,561 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None)
2017-10-20 16:49:31,561 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 16:49:31,561 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-20 16:49:31,561 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-20 16:49:31,561 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-20 16:49:31,562 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None))
2017-10-20 16:49:31,563 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510971.56
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:31,563 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:31,563 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:31,563 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:31,569 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 16:49:31,569 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:31,569 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:31,572 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:31,572 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:31,572 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:31,572 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:31,572 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:31,572 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:31,572 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:31,572 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:31,573 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:31,573 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:31,573 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:31,573 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:31,576 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 16:49:31,577 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:31,577 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:31,580 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {go_to_step(" Step one: Chop onions and garlic."), resolved(?X.go_to_step(X))}
?                                                                  ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 16:49:31,580 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:31,580 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:31,581 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:31,582 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:31,582 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:31,582 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:31,582 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:31,582 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:31,582 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:31,583 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:31,585 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 16:49:31,585 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 16:49:31,586 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:31,586 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 16:49:31,586 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 16:49:31,586 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:31,586 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:31,587 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 16:49:31,587 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:31,587 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:31,588 - session_2017-10-20T16_49_22_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7fc2b541d7e8>:1.0
2017-10-20 16:49:31,588 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:32,588 - session_2017-10-20T16_49_22_0 - DEBUG - Timeout fired
2017-10-20 16:49:32,588 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:32,589 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:32,589 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:32,589 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 16:49:32,590 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510972.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step(" Step one: Chop onions and garlic."), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:32,590 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:32,590 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:32,593 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:32,593 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:32,597 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 16:49:32,597 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:32,597 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:32,600 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:32,600 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:32,600 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:32,600 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:32,601 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:32,602 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:32,602 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:32,602 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:32,602 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:32,602 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:32,602 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:32,605 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:32,605 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:32,605 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:32,608 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step(" Step one: Chop onions and garlic."), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 16:49:32,608 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:32,608 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:32,608 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:32,608 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:32,608 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:32,609 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:32,609 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:32,609 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:32,609 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:32,610 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:32,610 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: select
2017-10-20 16:49:32,611 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510972.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:32,611 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 16:49:32,615 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:32,615 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:32,619 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:32,619 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:32,621 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:32,621 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:32,624 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:32,624 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:32,624 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:32,624 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 16:49:32,626 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:32,626 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 16:49:32,627 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 16:49:32,629 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 16:49:32,629 - session_2017-10-20T16_49_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:32,630 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 16:49:37,148 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 16:49:37,148 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:37,148 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-20 16:49:37,148 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:37,148 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:37,149 - session_2017-10-20T16_49_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 16:49:37,149 - session_2017-10-20T16_49_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 16:49:37,150 - session_2017-10-20T16_49_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 16:49:37,150 - session_2017-10-20T16_49_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-20 16:49:37,150 - session_2017-10-20T16_49_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-20 16:49:37,150 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 16:49:37,151 - session_2017-10-20T16_49_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 16:49:37,151 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:37,151 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:37,151 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:37,151 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:37,152 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,153 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 16:49:37,153 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 16:49:37,153 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 16:49:37,153 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,154 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,154 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,155 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 16:49:37,155 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 16:49:37,155 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 16:49:37,155 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:37,155 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 16:49:37,155 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 16:49:37,155 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:37,156 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 16:49:37,156 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 16:49:37,157 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,158 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,158 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 16:49:37,158 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:37,159 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 16:49:37,159 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 16:49:37,159 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 16:49:37,159 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:37,160 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fc2b5443f38>]
2017-10-20 16:49:37,160 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fc2b5443f38>], sender=GuiBackend, reason=None)
2017-10-20 16:49:37,160 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posted event
2017-10-20 16:49:37,160 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-20 16:49:37,160 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 16:49:37,160 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 16:49:37,161 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 16:49:37,161 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 16:49:37,161 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,161 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 16:49:37,161 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 16:49:37,162 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 16:49:37,162 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,163 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fc2b5443f38>], sender=GuiBackend, reason=None))
2017-10-20 16:49:37,163 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fc2b5443f38>], sender=GuiBackend, reason=None)
2017-10-20 16:49:37,163 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 16:49:37,164 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,164 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:37,170 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 16:49:37,170 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:37,170 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 16:49:37,170 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 16:49:37,171 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 16:49:37,171 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:37,171 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:37,171 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:37,171 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 16:49:37,173 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510977.17
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:37,173 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:37,173 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:37,173 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:37,177 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 16:49:37,177 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:37,177 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:37,180 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:37,180 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:37,180 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:37,180 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:37,180 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:37,180 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:37,180 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:37,181 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:37,181 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:37,181 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:37,181 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:37,181 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:37,184 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 16:49:37,185 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:37,185 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:37,185 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:37,185 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,185 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:37,189 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 16:49:37,189 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:37,190 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:37,190 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:37,191 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:37,192 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,192 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:37,192 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:37,192 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:37,193 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,193 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:37,193 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:37,195 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 16:49:37,195 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:37,195 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:37,196 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:37,196 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:37,196 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:37,196 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,196 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 16:49:37,197 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:37,197 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:37,198 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,198 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,198 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,199 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:37,200 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510977.2
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:37,200 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:37,203 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-20 16:49:37,203 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:37,209 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 16:49:37,210 - session_2017-10-20T16_49_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 16:49:37,210 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:37,216 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 16:49:37,216 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:37,222 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 16:49:37,223 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:37,223 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:37,225 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:37,225 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:37,226 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:37,230 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 16:49:37,230 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:37,230 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:37,230 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:37,230 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:37,230 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:37,231 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 16:49:37,231 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:37,231 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 16:49:37,231 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:37,235 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 16:49:37,235 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:37,235 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:37,238 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-20 16:49:37,238 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:37,238 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:37,241 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:37,242 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:37,244 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 16:49:37,244 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,245 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:37,245 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,245 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:37,248 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 16:49:37,248 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:37,248 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:37,248 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,248 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:37,248 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:37,248 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 16:49:37,248 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:37,249 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: select
2017-10-20 16:49:37,250 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510977.2
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:37,250 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 16:49:37,254 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 16:49:37,255 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:37,258 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-20 16:49:37,258 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:37,260 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:37,260 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:37,261 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:37,261 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 16:49:37,263 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:37,263 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 16:49:37,263 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 16:49:37,265 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 16:49:37,266 - session_2017-10-20T16_49_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 16:49:37,266 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:37,266 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-20 16:49:37,266 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 16:49:37,266 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 16:49:37,267 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,267 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:37,267 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:37,268 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:37,268 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,269 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-20 16:49:37,269 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:37,269 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 16:49:37,270 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,270 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,271 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,271 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 16:49:37,271 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 16:49:37,271 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 16:49:37,271 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 16:49:37,271 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 16:49:37,272 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 16:49:37,272 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 16:49:37,272 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-20 16:49:37,272 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 16:49:37,273 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,274 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 16:49:37,275 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:37,275 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 16:49:37,275 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 16:49:37,276 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 16:49:37,276 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 16:49:37,276 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 16:49:37,276 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 16:49:37,277 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7fc2b5c86878>, <tdm.tdm_gui_protocol.Popup instance at 0x7fc2b54423f8>]
2017-10-20 16:49:37,277 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7fc2b5c86878>, <tdm.tdm_gui_protocol.Popup instance at 0x7fc2b54423f8>], sender=GuiBackend, reason=None)
2017-10-20 16:49:37,277 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posted event
2017-10-20 16:49:37,277 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-20 16:49:37,277 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 16:49:37,277 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 16:49:37,278 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,278 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-20 16:49:37,278 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 16:49:37,279 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 16:49:37,279 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,279 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7fc2b5c86878>, <tdm.tdm_gui_protocol.Popup instance at 0x7fc2b54423f8>], sender=GuiBackend, reason=None))
2017-10-20 16:49:37,279 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7fc2b5c86878>, <tdm.tdm_gui_protocol.Popup instance at 0x7fc2b54423f8>], sender=GuiBackend, reason=None)
2017-10-20 16:49:37,280 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 16:49:37,280 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,281 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:37,290 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 16:49:37,291 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:37,291 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-20 16:49:37,292 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-20 16:49:37,292 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 16:49:37,292 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 16:49:37,292 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 16:49:37,292 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 16:49:37,292 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 16:49:37,294 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510977.29
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:37,294 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:37,294 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:37,294 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:37,300 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 16:49:37,300 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:37,301 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:37,303 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-20 16:49:37,303 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:37,304 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:37,309 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 16:49:37,309 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:37,309 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:37,309 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:37,309 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,309 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:37,312 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 16:49:37,312 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:37,312 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^
+ tis.shared.previous_goal: perform(go_to_next)
?                           ^^^^ +++++++++  +++
-- END TIS changes --
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:37,316 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:37,317 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:37,317 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:37,317 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,317 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:37,317 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:37,318 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:37,318 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:37,318 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:37,318 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:37,321 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 16:49:37,321 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:37,321 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Went to next], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:37,321 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:37,321 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:37,321 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:37,322 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:37,322 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Went to next], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 16:49:37,322 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Went to next], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:37,323 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Went to next], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:37,323 - session_2017-10-20T16_49_22_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7fc2b5443320>:1.0
2017-10-20 16:49:37,323 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:38,323 - session_2017-10-20T16_49_22_0 - DEBUG - Timeout fired
2017-10-20 16:49:38,323 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:38,323 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:38,323 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:38,324 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 16:49:38,325 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510978.32
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:38,325 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:38,325 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:38,327 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:38,327 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:38,331 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 16:49:38,331 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:38,331 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:38,333 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:38,333 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:38,333 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:38,333 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:38,333 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:38,333 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:38,334 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:38,334 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:38,334 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 16:49:38,334 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:38,334 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 16:49:38,334 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:38,334 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:38,334 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:38,335 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:38,335 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:38,335 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:38,335 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:38,335 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:38,335 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:38,335 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:38,335 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:38,338 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:38,339 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:38,339 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:38,341 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 16:49:38,341 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:38,342 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:38,342 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:38,342 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:38,342 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:38,342 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:38,342 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:38,343 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:38,343 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:38,343 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:38,343 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: select
2017-10-20 16:49:38,344 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510978.32
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:38,344 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 16:49:38,348 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              ---------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:38,348 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:38,351 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:38,351 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:38,353 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:38,353 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:38,356 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:38,356 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:38,356 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:38,356 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 16:49:38,358 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:38,358 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 16:49:38,358 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 16:49:38,361 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 16:49:38,361 - session_2017-10-20T16_49_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:38,361 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 16:49:43,842 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 16:49:43,842 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:43,842 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-20 16:49:43,843 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:43,843 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:43,843 - session_2017-10-20T16_49_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 16:49:43,843 - session_2017-10-20T16_49_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 16:49:43,844 - session_2017-10-20T16_49_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 16:49:43,844 - session_2017-10-20T16_49_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-20 16:49:43,844 - session_2017-10-20T16_49_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-20 16:49:43,844 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 16:49:43,845 - session_2017-10-20T16_49_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 16:49:43,845 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 16:49:43,845 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:43,845 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:43,845 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:43,846 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,846 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 16:49:43,847 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 16:49:43,847 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 16:49:43,847 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,847 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,848 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,848 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 16:49:43,848 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 16:49:43,849 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 16:49:43,849 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:43,849 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 16:49:43,849 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 16:49:43,849 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:43,850 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 16:49:43,850 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 16:49:43,851 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,852 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,852 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 16:49:43,852 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:43,853 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 16:49:43,853 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 16:49:43,853 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 16:49:43,853 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 16:49:43,854 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fc2b5442ea8>]
2017-10-20 16:49:43,854 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fc2b5442ea8>], sender=GuiBackend, reason=None)
2017-10-20 16:49:43,854 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posted event
2017-10-20 16:49:43,854 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-20 16:49:43,854 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 16:49:43,854 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 16:49:43,854 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 16:49:43,854 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 16:49:43,855 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,855 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 16:49:43,855 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 16:49:43,856 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 16:49:43,858 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,858 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fc2b5442ea8>], sender=GuiBackend, reason=None))
2017-10-20 16:49:43,859 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fc2b5442ea8>], sender=GuiBackend, reason=None)
2017-10-20 16:49:43,859 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 16:49:43,861 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,861 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:43,862 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 16:49:43,863 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:43,863 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 16:49:43,863 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 16:49:43,863 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 16:49:43,864 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:43,864 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:43,864 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 16:49:43,865 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 16:49:43,866 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510983.87
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:43,866 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:43,866 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:43,866 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:43,870 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 16:49:43,870 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:43,871 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:43,873 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:43,873 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:43,873 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:43,873 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:43,873 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:43,873 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:43,873 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:43,874 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:43,874 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:43,874 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:43,874 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:43,874 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:43,878 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 16:49:43,878 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:43,878 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:43,878 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:43,879 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:43,879 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:43,881 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:43,882 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:43,883 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:43,883 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:43,883 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:43,883 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:43,883 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:43,883 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:43,883 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:43,883 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:43,884 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:43,884 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:43,884 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:43,886 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 16:49:43,887 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:43,887 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:43,887 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:43,887 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:43,887 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:43,888 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,888 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 16:49:43,889 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:43,889 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 16:49:43,889 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,889 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,890 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,890 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:43,891 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510983.89
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:43,891 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:43,894 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-20 16:49:43,894 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:43,899 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 16:49:43,899 - session_2017-10-20T16_49_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 16:49:43,899 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:43,903 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 16:49:43,904 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:43,911 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 16:49:43,911 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:43,911 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:43,914 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:43,914 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:43,914 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:43,917 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:43,917 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:43,918 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:43,918 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:43,918 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:43,918 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:43,918 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 16:49:43,918 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:43,918 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 16:49:43,918 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:43,922 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 16:49:43,922 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:43,922 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:43,925 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-20 16:49:43,925 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:43,925 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:43,928 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-20 16:49:43,928 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:43,929 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:43,932 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 16:49:43,932 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:43,932 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:43,932 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:43,933 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:43,935 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 16:49:43,935 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:43,935 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:43,935 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:43,936 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:43,936 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:43,936 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 16:49:43,936 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:43,936 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: select
2017-10-20 16:49:43,937 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510983.89
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:43,937 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 16:49:43,941 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 16:49:43,941 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:43,944 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-20 16:49:43,944 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:43,947 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:43,947 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:43,947 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:43,947 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 16:49:43,949 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:43,950 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 16:49:43,950 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 16:49:43,952 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 16:49:43,952 - session_2017-10-20T16_49_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 16:49:43,953 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:43,953 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-20 16:49:43,953 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 16:49:43,953 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 16:49:43,953 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,954 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:43,954 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:43,954 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:43,955 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,956 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-20 16:49:43,956 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 16:49:43,956 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 16:49:43,957 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,957 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,958 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,958 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 16:49:43,958 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 16:49:43,958 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 16:49:43,958 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 16:49:43,958 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 16:49:43,959 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 16:49:43,959 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 16:49:43,959 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-20 16:49:43,960 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 16:49:43,960 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,961 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 16:49:43,962 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 16:49:43,962 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 16:49:43,962 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 16:49:43,963 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 16:49:43,963 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 16:49:43,963 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 16:49:43,963 - session_2017-10-20T16_49_22_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 16:49:43,964 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7fc2b5443f38>, <tdm.tdm_gui_protocol.Popup instance at 0x7fc2b5443e18>]
2017-10-20 16:49:43,964 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7fc2b5443f38>, <tdm.tdm_gui_protocol.Popup instance at 0x7fc2b5443e18>], sender=GuiBackend, reason=None)
2017-10-20 16:49:43,964 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posted event
2017-10-20 16:49:43,964 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-20 16:49:43,964 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 16:49:43,964 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 16:49:43,965 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,965 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-20 16:49:43,965 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 16:49:43,965 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 16:49:43,966 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,966 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7fc2b5443f38>, <tdm.tdm_gui_protocol.Popup instance at 0x7fc2b5443e18>], sender=GuiBackend, reason=None))
2017-10-20 16:49:43,966 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7fc2b5443f38>, <tdm.tdm_gui_protocol.Popup instance at 0x7fc2b5443e18>], sender=GuiBackend, reason=None)
2017-10-20 16:49:43,967 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 16:49:43,967 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:43,967 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:43,990 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 16:49:43,990 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 16:49:43,991 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-20 16:49:43,991 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-20 16:49:43,991 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 16:49:43,991 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 16:49:43,991 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 16:49:43,992 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 16:49:43,992 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 16:49:43,993 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510983.99
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:43,993 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:43,993 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:43,993 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:44,000 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 16:49:44,000 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:44,000 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:44,003 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-20 16:49:44,003 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:44,003 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:44,003 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:44,003 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:44,004 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:44,004 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:44,004 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:44,004 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:44,004 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:44,004 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 16:49:44,004 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:44,008 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 16:49:44,008 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:44,008 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:44,008 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:44,008 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:44,009 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:44,011 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 16:49:44,011 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 16:49:44,011 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:44,014 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:44,015 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:44,016 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:44,016 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:44,016 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:44,016 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:44,016 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:44,016 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:44,016 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:44,019 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 16:49:44,019 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:44,019 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Went to next], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:44,019 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 16:49:44,019 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:44,019 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 16:49:44,020 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 16:49:44,020 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Went to next], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 16:49:44,020 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Went to next], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:44,021 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Went to next], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 16:49:44,021 - session_2017-10-20T16_49_22_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7fc2b5c6ca70>:1.0
2017-10-20 16:49:44,021 - session_2017-10-20T16_49_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 16:49:45,021 - session_2017-10-20T16_49_22_0 - DEBUG - Timeout fired
2017-10-20 16:49:45,021 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:45,022 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:45,022 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 16:49:45,022 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 16:49:45,023 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510985.02
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:45,023 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 16:49:45,023 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 16:49:45,025 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:45,025 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 16:49:45,029 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 16:49:45,029 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 16:49:45,029 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 16:49:45,031 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - INFO - BEGIN integrate_moves
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 16:49:45,032 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:integrate
2017-10-20 16:49:45,033 - session_2017-10-20T16_49_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 16:49:45,033 - session_2017-10-20T16_49_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 16:49:45,033 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:45,033 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:45,033 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:45,033 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 16:49:45,033 - session_2017-10-20T16_49_22_0 - INFO - breaking out of accommodate
2017-10-20 16:49:45,034 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 16:49:45,034 - session_2017-10-20T16_49_22_0 - INFO - END integrate_moves
2017-10-20 16:49:45,034 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:45,036 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:45,037 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:45,037 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:45,039 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 16:49:45,039 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:45,039 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:45,040 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:45,040 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 16:49:45,040 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 16:49:45,040 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 16:49:45,040 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 16:49:45,040 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 16:49:45,040 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 16:49:45,041 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 16:49:45,041 - session_2017-10-20T16_49_22_0 - INFO - running ISU module: select
2017-10-20 16:49:45,042 - session_2017-10-20T16_49_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fc2b83889d0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fc2b5c64710>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508510985.02
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 16:49:45,042 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 16:49:45,045 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              ---------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:45,045 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_action
2017-10-20 16:49:45,048 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 16:49:45,048 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:45,051 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 16:49:45,051 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:45,054 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 16:49:45,054 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 16:49:45,054 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:select_move
2017-10-20 16:49:45,054 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 16:49:45,056 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 16:49:45,056 - session_2017-10-20T16_49_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 16:49:45,056 - session_2017-10-20T16_49_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 16:49:45,059 - session_2017-10-20T16_49_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 16:49:45,059 - session_2017-10-20T16_49_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 16:49:45,059 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:02:28,407 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:02:28,407 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-20 17:02:28,407 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:02:28,408 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:02:28,408 - session_2017-10-20T16_49_22_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 17:02:28,408 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:02:28,408 - session_2017-10-20T16_49_22_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 17:02:28,409 - session_2017-10-20T16_49_22_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:02:28,409 - session_2017-10-20T16_49_22_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 17:02:28,409 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:02:28,409 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 17:02:28,409 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:02:28,410 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:02:28,410 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:02:28,410 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 17:02:28,410 - session_2017-10-20T16_49_22_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:02:28,410 - session_2017-10-20T16_49_22_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-20 17:02:28,410 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:02:28,410 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:02:28,411 - session_2017-10-20T16_49_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:02:28,412 - session_2017-10-20T16_49_22_0 - DEBUG - Sent.
2017-10-20 17:02:28,412 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 17:02:28,413 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:02:28,413 - session_2017-10-20T16_49_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:02:28,413 - session_2017-10-20T16_49_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:02:28,413 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:02:28,415 - session_2017-10-20T16_49_22_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:02:28,416 - session_2017-10-20T16_49_22_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:02:28,417 - session_2017-10-20T16_49_22_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:02:28,417 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-20 17:02:28,417 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 17:02:28,417 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-20 17:02:28,417 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 17:02:28,417 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-20 17:02:28,418 - session_2017-10-20T16_49_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
