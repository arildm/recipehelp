2017-10-20 18:02:55,666 - session_2017-10-20T18_02_55_0 - DEBUG - Backend()
2017-10-20 18:02:55,667 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.initialize()
2017-10-20 18:02:55,698 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7a82e3fe50>>, False])
2017-10-20 18:02:55,698 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7a82e3fe50>>, 'eng'])
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7a82e3fe50>>, True, 'disabled'])
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7a82e3fe50>>])
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f7a82e3fe50>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7a82e3fe50>>, 'eng', False, True])
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend initialized
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 18:02:55,699 - session_2017-10-20T18_02_55_0 - DEBUG - Backend uses language 'eng'
2017-10-20 18:02:55,700 - session_2017-10-20T18_02_55_0 - DEBUG - running module InterpretModule
2017-10-20 18:02:55,700 - session_2017-10-20T18_02_55_0 - DEBUG - running module DmeModule
2017-10-20 18:02:55,701 - session_2017-10-20T18_02_55_0 - DEBUG - running module DeviceManager
2017-10-20 18:02:55,701 - session_2017-10-20T18_02_55_0 - DEBUG - running module GenerateModule
2017-10-20 18:02:55,702 - session_2017-10-20T18_02_55_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 18:02:55,702 - session_2017-10-20T18_02_55_0 - DEBUG - running module GuiBackend
2017-10-20 18:02:55,702 - session_2017-10-20T18_02_55_0 - DEBUG - running module CogloadModule
2017-10-20 18:02:55,702 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:02:55,702 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:02:55,703 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 18:02:55,703 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 18:02:55,703 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 18:02:55,704 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:02:55,704 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:02:55,716 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 18:02:55,717 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:02:55,718 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 18:02:55,719 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,719 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 18:02:55,719 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 18:02:55,719 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 18:02:55,720 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:02:55,720 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:02:55,722 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 18:02:55,722 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:02:55,722 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 18:02:55,722 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,723 - session_2017-10-20T18_02_55_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,723 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,723 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 18:02:55,723 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 18:02:55,724 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515375.72
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:02:55,724 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:02:55,724 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:02:55,724 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:02:55,727 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:02:55,728 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:02:55,728 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:02:55,730 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:02:55,730 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:02:55,730 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:02:55,731 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:02:55,732 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:02:55,735 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:02:55,735 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:02:55,737 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:02:55,737 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:02:55,737 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:02:55,738 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:02:55,738 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:02:55,738 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:02:55,738 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:02:55,738 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:02:55,739 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:02:55,739 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:02:55,739 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:02:55,739 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:02:55,740 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515375.72
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:02:55,740 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:02:55,743 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 18:02:55,743 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:02:55,746 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:02:55,746 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:02:55,748 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:02:55,748 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:02:55,751 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:02:55,751 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:02:55,751 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:02:55,751 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:02:55,753 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:02:55,753 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:02:55,753 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:02:55,755 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 18:02:55,756 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 18:02:55,756 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 18:02:55,756 - session_2017-10-20T18_02_55_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,756 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,756 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,757 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,757 - session_2017-10-20T18_02_55_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 18:02:55,757 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 18:02:55,757 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 18:02:55,757 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 18:02:55,757 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 18:02:55,757 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 18:02:55,758 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:02:55,758 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:02:55,758 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:02:55,758 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:02:55,759 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:02:55,759 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 18:02:55,760 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 18:02:55,760 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:02:55,760 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:02:55,760 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:02:55,761 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:02:55,761 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 18:02:55,761 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 18:02:55,761 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 18:02:55,761 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:02:55,762 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 18:02:55,762 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 18:02:55,762 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:02:55,763 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 18:02:55,763 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 18:02:55,764 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:02:55,765 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:02:55,765 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:02:55,765 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 18:02:55,765 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 18:02:55,765 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 18:02:55,766 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 18:02:55,766 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:02:55,766 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend generated message []
2017-10-20 18:02:55,766 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 18:02:55,766 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posted event
2017-10-20 18:02:55,766 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 18:02:55,766 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 18:02:55,767 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:02:55,767 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:02:55,767 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 18:02:55,767 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 18:02:55,767 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:02:55,768 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:02:55,768 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:02:55,809 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:02:55,809 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:02:55,809 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 18:02:55,809 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 18:02:55,810 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:02:55,810 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:02:55,810 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:02:55,810 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:02:55,810 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 18:02:55,812 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515375.81
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:02:55,812 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:02:55,812 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:02:55,812 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:02:55,815 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 18:02:55,815 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:02:55,815 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:02:55,817 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:02:55,818 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:02:55,819 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:02:55,822 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 18:02:55,822 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:02:55,822 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:02:55,823 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:02:55,823 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:02:55,823 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:02:55,826 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 18:02:55,826 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:02:55,826 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:02:55,827 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:02:55,827 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:02:55,827 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:02:55,827 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:02:55,827 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:02:55,827 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:02:55,827 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:02:55,827 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:02:55,828 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:02:55,828 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:02:55,828 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:02:55,828 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:02:55,828 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:02:55,828 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:02:55,828 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:02:55,828 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:02:55,829 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:02:55,829 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:02:55,829 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:02:55,831 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:02:55,831 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:02:55,831 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:02:55,831 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:02:55,831 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:02:55,831 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:02:55,832 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:02:55,832 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 18:02:55,832 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:02:55,833 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:02:55,833 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:00,242 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 18:03:00,242 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:00,242 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-20 18:03:00,242 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:00,242 - session_2017-10-20T18_02_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:00,243 - session_2017-10-20T18_02_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 18:03:00,243 - session_2017-10-20T18_02_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 18:03:00,248 - session_2017-10-20T18_02_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 18:03:00,248 - session_2017-10-20T18_02_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-20 18:03:00,248 - session_2017-10-20T18_02_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-20 18:03:00,248 - session_2017-10-20T18_02_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 18:03:00,249 - session_2017-10-20T18_02_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 18:03:00,249 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:00,249 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-20 18:03:00,249 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 18:03:00,249 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 18:03:00,249 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 18:03:00,250 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 18:03:00,250 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:00,250 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 18:03:00,250 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:00,251 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:00,251 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:00,252 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:00,253 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515380.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:00,253 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:00,256 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-20 18:03:00,256 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:00,260 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 18:03:00,261 - session_2017-10-20T18_02_55_0 - INFO - hypotheses reranking had no effect
2017-10-20 18:03:00,261 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:00,266 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 18:03:00,266 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:00,273 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 18:03:00,274 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:00,274 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:00,276 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:00,276 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:00,276 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:00,281 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 18:03:00,281 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:00,282 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:00,282 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:00,282 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:00,282 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:00,282 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 18:03:00,282 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:00,282 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 18:03:00,282 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:00,286 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:00,286 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:00,286 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:00,289 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 18:03:00,289 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:00,289 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:00,293 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 -------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.plan: Stack([findout(?X.goal(X))])
?                          ^ ^^^ ^    ^^ ^
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^ ^^^^ ^^^    ^ ^^^^^^
-- END TIS changes --
2017-10-20 18:03:00,293 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:00,294 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:00,297 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step("0")}
?                   +++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 18:03:00,297 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:00,297 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:00,298 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:00,298 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:00,300 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 18:03:00,300 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:00,300 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:00,301 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:00,301 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:00,301 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:00,301 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 18:03:00,301 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-20 18:03:00,301 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:03:00,302 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515380.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:00,302 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:03:00,307 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^^^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                ^^^^^ ^
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step("0")}
?                           +++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 18:03:00,307 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:00,310 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:00,310 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:00,313 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-20 18:03:00,313 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:00,316 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                         ---     ---- ^^^ ^^
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("0")))])
?                                               ^^^^^^^^^^^^^ ^^^^^^
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:00,316 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:00,316 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:00,316 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:03:00,318 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:00,319 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:03:00,319 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:03:00,321 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 18:03:00,321 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')])
2017-10-20 18:03:00,322 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:00,322 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-20 18:03:00,322 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 18:03:00,322 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 18:03:00,322 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:00,323 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None))
2017-10-20 18:03:00,323 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-20 18:03:00,323 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:00,324 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:00,324 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-20 18:03:00,325 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:00,325 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:03:00,325 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:00,325 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:00,326 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:00,326 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("0")), ddd_name=u'recipehelp'), facts={say_step("0")})
2017-10-20 18:03:00,327 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-20 18:03:00,327 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-20 18:03:00,327 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move Move(answer(say_step("0")), ddd_name=u'recipehelp') generated as u'Ok 0.'
2017-10-20 18:03:00,327 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None)
2017-10-20 18:03:00,328 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:00,329 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:00,330 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:00,330 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:03:00,330 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')])
2017-10-20 18:03:00,331 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("0")), ddd_name=u'recipehelp'), facts={say_step("0")})
2017-10-20 18:03:00,331 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-20 18:03:00,332 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f7a80739a70>]
2017-10-20 18:03:00,332 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f7a80739a70>], sender=GuiBackend, reason=None)
2017-10-20 18:03:00,332 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posted event
2017-10-20 18:03:00,332 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None))
2017-10-20 18:03:00,332 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None)
2017-10-20 18:03:00,332 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok 0."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:03:00,333 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:00,333 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 18:03:00,333 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:00,333 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok 0."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 18:03:00,334 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:00,334 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f7a80739a70>], sender=GuiBackend, reason=None))
2017-10-20 18:03:00,334 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f7a80739a70>], sender=GuiBackend, reason=None)
2017-10-20 18:03:00,334 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok 0."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:03:00,335 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:00,335 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:00,347 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok 0."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:03:00,347 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:00,348 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok 0.], sender=TextOutputComponent, reason=None))
2017-10-20 18:03:00,348 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok 0.], sender=TextOutputComponent, reason=None)
2017-10-20 18:03:00,348 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:03:00,348 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-20 18:03:00,348 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-20 18:03:00,349 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-20 18:03:00,349 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None))
2017-10-20 18:03:00,350 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515380.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("0")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("0")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:00,350 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:00,350 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:00,351 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:00,357 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:00,357 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:00,358 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:00,360 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:00,360 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:00,360 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:00,360 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:00,360 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:00,360 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:00,360 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:00,361 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:00,361 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:00,361 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:00,361 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:00,361 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:00,364 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {say_step("0")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:00,364 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:00,365 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:00,368 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("0")}
+ tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 18:03:00,368 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:00,368 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:00,368 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:00,368 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:00,368 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:00,368 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:00,369 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:00,370 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:00,370 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:00,370 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:00,370 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:00,373 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 18:03:00,373 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-20 18:03:00,373 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok 0.], latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:00,373 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None))
2017-10-20 18:03:00,373 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-20 18:03:00,373 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:00,374 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:00,374 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok 0.], latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 18:03:00,374 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok 0.], latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:00,375 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok 0.], latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:00,375 - session_2017-10-20T18_02_55_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f7a80726368>:1.0
2017-10-20 18:03:00,375 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:01,375 - session_2017-10-20T18_02_55_0 - DEBUG - Timeout fired
2017-10-20 18:03:01,376 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:01,376 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:01,376 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:01,376 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:03:01,377 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515381.38
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("0")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("0")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:01,377 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:01,377 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:01,379 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:01,380 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:01,384 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-20 18:03:01,384 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:01,384 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:01,386 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:01,386 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:01,386 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:01,386 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:01,387 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:01,388 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:01,388 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:01,388 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:01,388 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:01,388 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:01,388 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:01,391 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:03:01,391 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:01,391 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:01,395 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step("0")}
?                   -------------
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 18:03:01,395 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:01,395 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:01,395 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:01,395 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:01,395 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:01,396 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:01,396 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:01,396 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:01,396 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:01,396 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:01,396 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:03:01,397 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515381.38
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("0")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:01,397 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:03:01,402 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step("0")}
?                           -------------
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:01,402 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:01,404 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:01,404 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:01,406 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:03:01,407 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:01,410 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:01,410 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:01,410 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:01,410 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:03:01,412 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:01,412 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:03:01,412 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:03:01,414 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 18:03:01,415 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 18:03:01,415 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:03:08,105 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 18:03:08,105 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:08,105 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-20 18:03:08,106 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:08,106 - session_2017-10-20T18_02_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:08,106 - session_2017-10-20T18_02_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 18:03:08,106 - session_2017-10-20T18_02_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 18:03:08,108 - session_2017-10-20T18_02_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 18:03:08,108 - session_2017-10-20T18_02_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-20 18:03:08,108 - session_2017-10-20T18_02_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-20 18:03:08,108 - session_2017-10-20T18_02_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 18:03:08,108 - session_2017-10-20T18_02_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 18:03:08,109 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:08,109 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:03:08,109 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:08,109 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:08,110 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,110 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 18:03:08,110 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:03:08,110 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:03:08,111 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,111 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,112 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,112 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 18:03:08,112 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 18:03:08,112 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 18:03:08,112 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:03:08,112 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 18:03:08,113 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 18:03:08,113 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:03:08,113 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 18:03:08,113 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 18:03:08,114 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,116 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,116 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:03:08,116 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 18:03:08,117 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 18:03:08,117 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 18:03:08,117 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 18:03:08,117 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:03:08,117 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a806dc950>]
2017-10-20 18:03:08,117 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a806dc950>], sender=GuiBackend, reason=None)
2017-10-20 18:03:08,118 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posted event
2017-10-20 18:03:08,118 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-20 18:03:08,118 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 18:03:08,118 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 18:03:08,118 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 18:03:08,118 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 18:03:08,119 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,119 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 18:03:08,119 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 18:03:08,119 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:03:08,120 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,120 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a806dc950>], sender=GuiBackend, reason=None))
2017-10-20 18:03:08,120 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a806dc950>], sender=GuiBackend, reason=None)
2017-10-20 18:03:08,120 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:03:08,121 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,121 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:08,163 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:03:08,163 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:08,163 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 18:03:08,163 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 18:03:08,163 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:03:08,164 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:03:08,164 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:03:08,164 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:03:08,164 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 18:03:08,165 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515388.16
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:08,165 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:08,165 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:08,166 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:08,169 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 18:03:08,169 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:08,169 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:08,173 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:08,174 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:08,174 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:08,177 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 18:03:08,177 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:08,177 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,177 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:08,178 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,178 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:08,180 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 18:03:08,180 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:08,181 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,181 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:08,182 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,183 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,183 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:08,183 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,183 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,183 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,183 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:08,183 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:08,186 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 18:03:08,186 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:08,186 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:03:08,186 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:03:08,186 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:08,186 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:08,187 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,187 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 18:03:08,187 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:03:08,188 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:03:08,188 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,188 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,188 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,188 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:08,190 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515388.19
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:08,190 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:08,193 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-20 18:03:08,193 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:08,197 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 18:03:08,197 - session_2017-10-20T18_02_55_0 - INFO - hypotheses reranking had no effect
2017-10-20 18:03:08,197 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:08,203 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 18:03:08,203 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:08,211 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 18:03:08,211 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:08,211 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:08,214 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:08,214 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:08,214 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:08,217 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:08,217 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:08,217 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:08,218 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:08,218 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:08,218 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:08,218 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 18:03:08,218 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:08,218 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 18:03:08,218 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:08,222 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 18:03:08,222 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:08,222 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,225 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-20 18:03:08,225 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:08,225 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,227 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-20 18:03:08,227 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:08,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,232 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 18:03:08,232 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,232 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,232 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,232 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:08,235 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 18:03:08,235 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,235 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,235 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,235 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:08,235 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:08,235 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 18:03:08,236 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:08,236 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:03:08,237 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515388.19
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:08,237 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:03:08,240 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 18:03:08,240 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:08,244 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-20 18:03:08,244 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:08,246 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:08,247 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:08,247 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:08,247 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:03:08,249 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:08,249 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:03:08,249 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:03:08,252 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 18:03:08,252 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 18:03:08,252 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:08,252 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-20 18:03:08,252 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 18:03:08,253 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 18:03:08,253 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,253 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:03:08,253 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:08,254 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:08,254 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,255 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-20 18:03:08,255 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:08,255 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:03:08,256 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,256 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,257 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,257 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 18:03:08,257 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 18:03:08,257 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 18:03:08,257 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 18:03:08,257 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 18:03:08,258 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 18:03:08,258 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 18:03:08,258 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-20 18:03:08,258 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 18:03:08,259 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,260 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:08,261 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,261 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:03:08,261 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 18:03:08,261 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 18:03:08,261 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 18:03:08,262 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 18:03:08,262 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 18:03:08,262 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f7a8072f6c8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a806dcb48>]
2017-10-20 18:03:08,262 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f7a8072f6c8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a806dcb48>], sender=GuiBackend, reason=None)
2017-10-20 18:03:08,263 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posted event
2017-10-20 18:03:08,263 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-20 18:03:08,263 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 18:03:08,263 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:03:08,263 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,264 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-20 18:03:08,264 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:08,264 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 18:03:08,265 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,265 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f7a8072f6c8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a806dcb48>], sender=GuiBackend, reason=None))
2017-10-20 18:03:08,265 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f7a8072f6c8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a806dcb48>], sender=GuiBackend, reason=None)
2017-10-20 18:03:08,265 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:03:08,266 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,266 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:08,286 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:03:08,286 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:08,286 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-20 18:03:08,287 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-20 18:03:08,287 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:03:08,287 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 18:03:08,287 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 18:03:08,287 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 18:03:08,287 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 18:03:08,288 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515388.29
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:08,289 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:08,289 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:08,289 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:08,295 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:08,295 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:08,296 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:08,298 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:08,299 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:08,300 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:08,304 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 18:03:08,304 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:08,304 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,304 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:08,304 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,304 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:08,307 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:08,307 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:08,307 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^
+ tis.shared.previous_goal: perform(go_to_next)
?                           ^^^^ +++++++++  +++
-- END TIS changes --
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:08,311 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:08,312 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:08,312 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,315 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
?                          ^ ^^^^^ ^^^^^^                -
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^^^^^^ ^ ^
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:08,315 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,315 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,318 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
?                                                                                                              ++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 18:03:08,318 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,318 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,319 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,319 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:08,319 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,319 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,319 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,319 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:08,319 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:08,322 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 18:03:08,322 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 18:03:08,322 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:03:08,323 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515388.29
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:08,323 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:03:08,330 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
?                                                                                                                      ++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
-- END TIS changes --
2017-10-20 18:03:08,330 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:08,332 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                                                  +++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:08,332 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:08,335 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-20 18:03:08,335 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:08,338 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:08,338 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:08,338 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:08,338 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:03:08,340 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:08,340 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:03:08,340 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:03:08,343 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:08,343 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-20 18:03:08,343 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 18:03:08,343 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 18:03:08,344 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 18:03:08,344 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:08,344 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,344 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-20 18:03:08,345 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 18:03:08,345 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:03:08,346 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,346 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,347 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,348 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")})
2017-10-20 18:03:08,348 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 18:03:08,348 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 18:03:08,348 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok  Step one: Chop onions and garlic..'
2017-10-20 18:03:08,348 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-20 18:03:08,350 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,351 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:08,352 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:08,352 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:03:08,352 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-20 18:03:08,352 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")})
2017-10-20 18:03:08,353 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 18:03:08,353 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a80698d88>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a80698758>]
2017-10-20 18:03:08,354 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a80698d88>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a80698758>], sender=GuiBackend, reason=None)
2017-10-20 18:03:08,354 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posted event
2017-10-20 18:03:08,354 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None))
2017-10-20 18:03:08,354 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-20 18:03:08,354 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:03:08,355 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,355 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None))
2017-10-20 18:03:08,355 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:08,355 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok  Step one: Chop onions and garlic.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 18:03:08,356 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,356 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a80698d88>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a80698758>], sender=GuiBackend, reason=None))
2017-10-20 18:03:08,356 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a80698d88>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a80698758>], sender=GuiBackend, reason=None)
2017-10-20 18:03:08,356 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok  Step one: Chop onions and garlic.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:03:08,357 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,357 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:08,396 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:03:08,396 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:08,396 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None))
2017-10-20 18:03:08,396 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None)
2017-10-20 18:03:08,396 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:03:08,397 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-20 18:03:08,397 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-20 18:03:08,397 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-20 18:03:08,397 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None))
2017-10-20 18:03:08,398 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515388.4
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:08,399 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:08,399 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:08,399 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:08,403 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 18:03:08,403 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:08,403 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:08,407 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:08,407 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:08,407 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:08,407 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:08,407 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:08,407 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:08,407 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:08,407 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:08,408 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:08,408 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:08,408 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:08,408 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:08,411 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:08,411 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:08,411 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,415 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                                                        ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 18:03:08,415 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:08,415 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:08,416 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,417 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,417 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:08,417 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:08,417 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:08,417 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:08,417 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:08,417 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:08,420 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:08,420 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 18:03:08,420 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:08,420 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 18:03:08,420 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 18:03:08,420 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:08,421 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:08,421 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 18:03:08,421 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:08,422 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:08,422 - session_2017-10-20T18_02_55_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f7a806dc950>:1.0
2017-10-20 18:03:08,422 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:09,422 - session_2017-10-20T18_02_55_0 - DEBUG - Timeout fired
2017-10-20 18:03:09,423 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:09,423 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:09,423 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:09,423 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:03:09,424 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515389.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:09,424 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:09,424 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:09,427 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:09,427 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:09,431 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:09,431 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:09,431 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:09,434 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:09,434 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:09,434 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:09,434 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:09,434 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:09,434 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:09,434 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:09,435 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:09,436 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:09,436 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:09,436 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:09,436 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:09,439 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:03:09,439 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:09,439 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:09,442 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 18:03:09,442 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:09,442 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:09,442 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:09,442 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:09,442 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:09,442 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:09,443 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:09,443 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:09,443 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:09,443 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:09,443 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:03:09,444 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515389.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:09,444 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:03:09,449 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^ ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^^^^^^^^^^^^ ^^^^^ ^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:09,449 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:09,452 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:09,452 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:09,454 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:03:09,454 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:09,457 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:09,457 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:09,457 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:09,457 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:03:09,459 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:09,459 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:03:09,459 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:03:09,461 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 18:03:09,462 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 18:03:09,462 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:03:18,918 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 18:03:18,918 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:18,918 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-20 18:03:18,918 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:18,918 - session_2017-10-20T18_02_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:18,918 - session_2017-10-20T18_02_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 18:03:18,919 - session_2017-10-20T18_02_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 18:03:18,919 - session_2017-10-20T18_02_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 18:03:18,920 - session_2017-10-20T18_02_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-20 18:03:18,920 - session_2017-10-20T18_02_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-20 18:03:18,920 - session_2017-10-20T18_02_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 18:03:18,920 - session_2017-10-20T18_02_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 18:03:18,920 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 18:03:18,920 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:03:18,921 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:18,921 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:18,921 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:18,922 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 18:03:18,922 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:03:18,922 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:03:18,923 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:18,923 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:18,924 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:18,924 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 18:03:18,924 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 18:03:18,924 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 18:03:18,924 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:03:18,924 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 18:03:18,925 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 18:03:18,925 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:03:18,925 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 18:03:18,925 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 18:03:18,926 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:18,929 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:18,929 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:03:18,929 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 18:03:18,929 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 18:03:18,929 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 18:03:18,929 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 18:03:18,929 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 18:03:18,930 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a80739f80>]
2017-10-20 18:03:18,930 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a80739f80>], sender=GuiBackend, reason=None)
2017-10-20 18:03:18,930 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posted event
2017-10-20 18:03:18,930 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-20 18:03:18,930 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 18:03:18,930 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 18:03:18,930 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 18:03:18,930 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 18:03:18,931 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:18,931 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 18:03:18,931 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 18:03:18,932 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:03:18,933 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:18,933 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a80739f80>], sender=GuiBackend, reason=None))
2017-10-20 18:03:18,933 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a80739f80>], sender=GuiBackend, reason=None)
2017-10-20 18:03:18,934 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:03:18,934 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:18,934 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:18,942 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:03:18,942 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:18,942 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 18:03:18,943 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 18:03:18,943 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:03:18,943 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:03:18,943 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:03:18,943 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 18:03:18,944 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 18:03:18,945 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515398.94
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:18,946 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:18,946 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:18,946 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:18,949 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 18:03:18,949 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:18,949 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:18,952 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:18,952 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:18,952 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:18,952 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:18,952 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:18,953 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:18,953 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:18,953 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:18,953 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:18,953 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:18,953 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:18,953 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:18,957 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 18:03:18,957 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:18,957 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:18,957 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:18,957 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:18,957 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:18,960 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 18:03:18,960 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:18,960 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:18,961 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:18,961 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:18,961 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:18,961 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:18,961 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:18,961 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:18,961 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:18,961 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:18,962 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:18,962 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:18,962 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:18,962 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:18,962 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:18,962 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:18,962 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:18,962 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:18,963 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:18,963 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:18,963 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:18,965 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 18:03:18,965 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:18,965 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:03:18,966 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:03:18,966 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:18,966 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:18,966 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:18,967 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 18:03:18,967 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:03:18,967 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 18:03:18,968 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:18,968 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:18,969 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 18:03:18,969 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:18,970 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515398.97
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:18,970 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:18,974 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-20 18:03:18,974 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:18,980 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 18:03:18,980 - session_2017-10-20T18_02_55_0 - INFO - hypotheses reranking had no effect
2017-10-20 18:03:18,981 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:18,987 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 18:03:18,987 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:18,993 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 18:03:18,993 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:18,993 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:18,995 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:18,995 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:18,995 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:18,999 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:18,999 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:18,999 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:18,999 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:19,000 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:19,000 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:19,000 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 18:03:19,000 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:19,000 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 18:03:19,000 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:19,003 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 18:03:19,003 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:19,003 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:19,006 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-20 18:03:19,006 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:19,006 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:19,010 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,013 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 18:03:19,013 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,013 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,014 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,014 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:19,016 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 18:03:19,016 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:19,016 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,017 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,017 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:19,017 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:19,017 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 18:03:19,017 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:19,017 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:03:19,018 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515398.97
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:19,018 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:03:19,022 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 18:03:19,022 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:19,025 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-20 18:03:19,025 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:19,029 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:19,029 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:19,029 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:19,029 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:03:19,031 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:19,031 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:03:19,031 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:03:19,034 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 18:03:19,034 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 18:03:19,034 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:19,034 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-20 18:03:19,035 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 18:03:19,035 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 18:03:19,035 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,035 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 18:03:19,035 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:19,036 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:19,036 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,037 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-20 18:03:19,037 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 18:03:19,037 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:03:19,037 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,038 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,039 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,039 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 18:03:19,039 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 18:03:19,039 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 18:03:19,039 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 18:03:19,039 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 18:03:19,039 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 18:03:19,039 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 18:03:19,040 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-20 18:03:19,040 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 18:03:19,041 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,042 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:19,043 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,043 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:03:19,043 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 18:03:19,043 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 18:03:19,043 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 18:03:19,043 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 18:03:19,043 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 18:03:19,044 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f7a8074c5a8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a8074c8c0>]
2017-10-20 18:03:19,044 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f7a8074c5a8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a8074c8c0>], sender=GuiBackend, reason=None)
2017-10-20 18:03:19,044 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posted event
2017-10-20 18:03:19,044 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-20 18:03:19,044 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 18:03:19,044 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:03:19,045 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,045 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-20 18:03:19,045 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:19,046 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 18:03:19,046 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,046 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f7a8074c5a8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a8074c8c0>], sender=GuiBackend, reason=None))
2017-10-20 18:03:19,046 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f7a8074c5a8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a8074c8c0>], sender=GuiBackend, reason=None)
2017-10-20 18:03:19,047 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:03:19,047 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,047 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:19,065 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:03:19,066 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:19,066 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-20 18:03:19,066 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-20 18:03:19,066 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:03:19,066 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 18:03:19,066 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 18:03:19,066 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 18:03:19,067 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 18:03:19,068 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515399.07
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:19,068 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:19,068 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:19,068 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:19,075 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:19,075 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:19,075 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:19,078 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-20 18:03:19,078 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:19,078 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:19,078 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:19,078 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:19,078 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:19,078 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:19,078 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:19,079 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:19,079 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:19,079 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:19,079 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:19,083 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 18:03:19,083 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:19,083 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:19,084 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:19,084 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,084 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:19,086 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:19,087 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:19,087 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:19,090 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 18:03:19,090 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:19,090 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:19,091 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,095 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
?                          ^ ^^^^^ ^^^^^^                -
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^^^^^^ ^ ^
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:19,095 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,095 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,099 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
?                                                                                                              +++++++++++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 18:03:19,099 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,099 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,099 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,099 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:19,099 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:19,100 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,100 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,100 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:19,100 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:19,103 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 18:03:19,103 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None)
2017-10-20 18:03:19,103 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:03:19,104 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515399.07
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:19,104 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:03:19,112 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
?                                                                                                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
-- END TIS changes --
2017-10-20 18:03:19,112 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:19,115 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                                                  +++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:19,115 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:19,118 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-20 18:03:19,118 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:19,120 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("other example")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:19,120 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:19,120 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:19,121 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:03:19,123 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:19,123 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:03:19,123 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:03:19,125 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:19,126 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')])
2017-10-20 18:03:19,126 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 18:03:19,126 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None))
2017-10-20 18:03:19,126 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None)
2017-10-20 18:03:19,126 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "other example"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:19,127 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,128 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-20 18:03:19,128 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 18:03:19,128 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 18:03:19,128 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,129 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,130 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,130 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("other example")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")})
2017-10-20 18:03:19,130 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("other example")), ddd_name=u'recipehelp')
2017-10-20 18:03:19,130 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("other example")), ddd_name=u'recipehelp')
2017-10-20 18:03:19,131 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule: Move Move(answer(say_step("other example")), ddd_name=u'recipehelp') generated as u'Ok other example.'
2017-10-20 18:03:19,131 - session_2017-10-20T18_02_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok other example.], sender=GenerateModule, reason=None)
2017-10-20 18:03:19,132 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,133 - session_2017-10-20T18_02_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok other example.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:19,134 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 18:03:19,135 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 18:03:19,135 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')])
2017-10-20 18:03:19,135 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("other example")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")})
2017-10-20 18:03:19,135 - session_2017-10-20T18_02_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("other example")), ddd_name=u'recipehelp')
2017-10-20 18:03:19,136 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a8074c5f0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a8074cc20>]
2017-10-20 18:03:19,136 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a8074c5f0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a8074cc20>], sender=GuiBackend, reason=None)
2017-10-20 18:03:19,136 - session_2017-10-20T18_02_55_0 - DEBUG - GuiBackend posted event
2017-10-20 18:03:19,136 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok other example.], sender=GenerateModule, reason=None))
2017-10-20 18:03:19,136 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok other example.], sender=GenerateModule, reason=None)
2017-10-20 18:03:19,136 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok other example."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 18:03:19,137 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,137 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok other example.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 18:03:19,137 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok other example.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 18:03:19,137 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok other example."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 18:03:19,138 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,138 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a8074c5f0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a8074cc20>], sender=GuiBackend, reason=None))
2017-10-20 18:03:19,138 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7a8074c5f0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f7a8074cc20>], sender=GuiBackend, reason=None)
2017-10-20 18:03:19,138 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok other example."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 18:03:19,139 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,139 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:19,180 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok other example."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 18:03:19,180 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 18:03:19,181 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok other example.], sender=TextOutputComponent, reason=None))
2017-10-20 18:03:19,181 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok other example.], sender=TextOutputComponent, reason=None)
2017-10-20 18:03:19,181 - session_2017-10-20T18_02_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 18:03:19,181 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None)
2017-10-20 18:03:19,181 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None)
2017-10-20 18:03:19,181 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None)
2017-10-20 18:03:19,182 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None))
2017-10-20 18:03:19,183 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515399.18
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("other example")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:19,183 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:19,183 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:19,183 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:19,188 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 18:03:19,188 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:19,188 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:19,191 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:19,192 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 18:03:19,192 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:19,196 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example")}
?                                                        +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:19,196 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 18:03:19,196 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:19,200 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example"), resolved(?X.say_step(X))}
?                                                                                   ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 18:03:19,200 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 18:03:19,200 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,200 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:19,200 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:19,200 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,201 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:19,202 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:19,202 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:19,202 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:19,202 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:19,202 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:19,205 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:19,205 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None)
2017-10-20 18:03:19,205 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok other example.], latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:19,206 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None))
2017-10-20 18:03:19,206 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None)
2017-10-20 18:03:19,206 - session_2017-10-20T18_02_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "other example"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 18:03:19,206 - session_2017-10-20T18_02_55_0 - DEBUG - Sent.
2017-10-20 18:03:19,206 - session_2017-10-20T18_02_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok other example.], latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 18:03:19,207 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok other example.], latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:19,207 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok other example.], latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 18:03:19,208 - session_2017-10-20T18_02_55_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f7a807397e8>:1.0
2017-10-20 18:03:19,208 - session_2017-10-20T18_02_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 18:03:20,208 - session_2017-10-20T18_02_55_0 - DEBUG - Timeout fired
2017-10-20 18:03:20,208 - session_2017-10-20T18_02_55_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:20,208 - session_2017-10-20T18_02_55_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:20,208 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 18:03:20,208 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 18:03:20,209 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515400.21
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("other example")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:20,209 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:filterReadings
2017-10-20 18:03:20,210 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 18:03:20,212 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:20,212 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 18:03:20,216 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 18:03:20,217 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 18:03:20,217 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 18:03:20,219 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:20,219 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 18:03:20,219 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 18:03:20,219 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 18:03:20,219 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - INFO - BEGIN integrate_moves
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:integrate
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:20,220 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:20,221 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:accommodate
2017-10-20 18:03:20,221 - session_2017-10-20T18_02_55_0 - INFO - breaking out of accommodate
2017-10-20 18:03:20,221 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_reject
2017-10-20 18:03:20,221 - session_2017-10-20T18_02_55_0 - INFO - END integrate_moves
2017-10-20 18:03:20,221 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:20,224 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:03:20,224 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:20,224 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:20,227 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 18:03:20,227 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:20,227 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:20,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:20,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 18:03:20,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 18:03:20,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:exec_plan
2017-10-20 18:03:20,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:load_plan
2017-10-20 18:03:20,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 18:03:20,228 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 18:03:20,229 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 18:03:20,229 - session_2017-10-20T18_02_55_0 - INFO - running ISU module: select
2017-10-20 18:03:20,230 - session_2017-10-20T18_02_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7a82e3ffd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7a80738210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515400.21
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 18:03:20,230 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 18:03:20,235 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^ ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^^^^^^^^^^^^ ^^^^^ ^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:20,235 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_action
2017-10-20 18:03:20,238 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 18:03:20,238 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:20,240 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 18:03:20,240 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:20,243 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 18:03:20,243 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_icm
2017-10-20 18:03:20,243 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:select_move
2017-10-20 18:03:20,243 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 18:03:20,246 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 18:03:20,246 - session_2017-10-20T18_02_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 18:03:20,246 - session_2017-10-20T18_02_55_0 - DEBUG - rulegroup:set_timeout
2017-10-20 18:03:20,248 - session_2017-10-20T18_02_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 18:03:20,248 - session_2017-10-20T18_02_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 18:03:20,249 - session_2017-10-20T18_02_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
