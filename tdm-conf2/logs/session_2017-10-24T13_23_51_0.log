2017-10-24 13:23:51,744 - session_2017-10-24T13_23_51_0 - DEBUG - Backend()
2017-10-24 13:23:51,745 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.initialize()
2017-10-24 13:23:51,777 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f95069a7dd0>>, False])
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f95069a7dd0>>, 'eng'])
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f95069a7dd0>>, True, 'disabled'])
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f95069a7dd0>>])
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f95069a7dd0>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f95069a7dd0>>, 'eng', False, True])
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend initialized
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 13:23:51,778 - session_2017-10-24T13_23_51_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 13:23:51,779 - session_2017-10-24T13_23_51_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 13:23:51,779 - session_2017-10-24T13_23_51_0 - DEBUG - Backend uses language 'eng'
2017-10-24 13:23:51,779 - session_2017-10-24T13_23_51_0 - DEBUG - running module InterpretModule
2017-10-24 13:23:51,779 - session_2017-10-24T13_23_51_0 - DEBUG - running module DmeModule
2017-10-24 13:23:51,780 - session_2017-10-24T13_23_51_0 - DEBUG - running module DeviceManager
2017-10-24 13:23:51,781 - session_2017-10-24T13_23_51_0 - DEBUG - running module GenerateModule
2017-10-24 13:23:51,781 - session_2017-10-24T13_23_51_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 13:23:51,781 - session_2017-10-24T13_23_51_0 - DEBUG - running module GuiBackend
2017-10-24 13:23:51,781 - session_2017-10-24T13_23_51_0 - DEBUG - running module CogloadModule
2017-10-24 13:23:51,781 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:23:51,782 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:23:51,782 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 13:23:51,783 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 13:23:51,783 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 13:23:51,783 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:51,783 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:23:51,813 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 13:23:51,814 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:23:51,814 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 13:23:51,815 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,815 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 13:23:51,815 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 13:23:51,816 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 13:23:51,816 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:51,816 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:23:51,819 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 13:23:51,819 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:23:51,819 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 13:23:51,819 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,820 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,820 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,820 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 13:23:51,820 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 13:23:51,821 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844231.82
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:23:51,821 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:23:51,821 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:23:51,821 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:23:51,824 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:23:51,824 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:23:51,824 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 13:23:51,827 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:23:51,828 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:23:51,829 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:51,829 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:23:51,829 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:51,829 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:51,832 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 13:23:51,832 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:51,834 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 13:23:51,834 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:51,834 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:51,835 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:51,835 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:23:51,835 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:51,835 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:51,835 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:51,836 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:51,836 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:23:51,836 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:23:51,836 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:23:51,838 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844231.82
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:23:51,838 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:23:51,841 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 13:23:51,841 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:23:51,843 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:23:51,843 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:23:51,846 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 13:23:51,846 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:23:51,848 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:23:51,848 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:23:51,848 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:23:51,849 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:23:51,850 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:23:51,851 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:23:51,851 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:23:51,853 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 13:23:51,853 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 13:23:51,853 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 13:23:51,853 - session_2017-10-24T13_23_51_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,853 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,854 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,854 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,854 - session_2017-10-24T13_23_51_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 13:23:51,854 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 13:23:51,854 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 13:23:51,855 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 13:23:51,855 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 13:23:51,855 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 13:23:51,855 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:51,855 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 13:23:51,855 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:23:51,856 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:23:51,857 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:51,857 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 13:23:51,857 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 13:23:51,858 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:23:51,858 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:51,858 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:51,859 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:51,859 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 13:23:51,859 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 13:23:51,859 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 13:23:51,859 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 13:23:51,859 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 13:23:51,861 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 13:23:51,861 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 13:23:51,861 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 13:23:51,861 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 13:23:51,862 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:51,863 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:51,863 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 13:23:51,864 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 13:23:51,864 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 13:23:51,864 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 13:23:51,864 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 13:23:51,864 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 13:23:51,864 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend generated message []
2017-10-24 13:23:51,864 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 13:23:51,864 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posted event
2017-10-24 13:23:51,865 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 13:23:51,865 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 13:23:51,865 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 13:23:51,865 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:51,865 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 13:23:51,865 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 13:23:51,866 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 13:23:51,867 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:51,867 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:23:51,908 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 13:23:51,908 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:23:51,908 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 13:23:51,908 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 13:23:51,908 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 13:23:51,908 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 13:23:51,908 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 13:23:51,908 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 13:23:51,909 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 13:23:51,910 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844231.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:23:51,910 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:23:51,910 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:23:51,910 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:23:51,913 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 13:23:51,913 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:23:51,913 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:23:51,916 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:23:51,916 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:23:51,916 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:23:51,916 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:23:51,916 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:23:51,916 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:23:51,916 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:23:51,917 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:23:51,917 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:23:51,917 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:23:51,917 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:23:51,917 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:23:51,920 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 13:23:51,921 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:23:51,921 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:51,921 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:23:51,921 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:51,921 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:23:51,924 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 13:23:51,924 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:23:51,924 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:51,925 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:23:51,926 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:51,926 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:51,926 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:23:51,926 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:51,926 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:51,926 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:51,927 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:51,927 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:23:51,929 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:23:51,929 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:23:51,929 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:23:51,930 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 13:23:51,930 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:23:51,930 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:23:51,931 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:51,931 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 13:23:51,931 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:23:51,932 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:23:51,932 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:23:59,588 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 13:23:59,589 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:23:59,589 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to step one}], sender=TextInputComponent, reason=None))
2017-10-24 13:23:59,589 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to step one}], sender=TextInputComponent, reason=None)
2017-10-24 13:23:59,589 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to step one}], sender=TextInputComponent, reason=None)
2017-10-24 13:23:59,589 - session_2017-10-24T13_23_51_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 13:23:59,589 - session_2017-10-24T13_23_51_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 13:23:59,595 - session_2017-10-24T13_23_51_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 13:23:59,596 - session_2017-10-24T13_23_51_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])} for DDD 'recipehelp'
2017-10-24 13:23:59,596 - session_2017-10-24T13_23_51_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}
2017-10-24 13:23:59,596 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 13:23:59,597 - session_2017-10-24T13_23_51_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}, {"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"7df9060a3399228b5ad4ef77628d15ef.PredicateProposition": {"_polarity": "POS", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "name": "step_to_choose", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}, "_content": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "name": "step_to_choose", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}, "_predicted": false, "_type": "PREDICATE", "individual": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 13:23:59,597 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to step one}], sender=TextInputComponent, reason=None)
2017-10-24 13:23:59,597 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 13:23:59,597 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 13:23:59,597 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 13:23:59,597 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 13:23:59,597 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 13:23:59,598 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:59,598 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 13:23:59,599 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:23:59,599 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:23:59,599 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:23:59,600 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:23:59,601 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844239.6
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:23:59,601 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:23:59,606 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}
-- END TIS changes --
2017-10-24 13:23:59,606 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:23:59,611 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^                                                                                                                                                      ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^                                                                                                                                                      ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step one'), #])}
?                                                                                                                                ^                                                                                                                                                      ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])}
?                                                                                                                                ^                                                                                                                                                      ^
-- END TIS changes --
2017-10-24 13:23:59,611 - session_2017-10-24T13_23_51_0 - INFO - hypotheses reranking had no effect
2017-10-24 13:23:59,612 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:23:59,616 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 13:23:59,616 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:23:59,623 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 13:23:59,623 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:23:59,623 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:23:59,626 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:23:59,626 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:23:59,627 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:23:59,631 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 13:23:59,631 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:23:59,631 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:23:59,631 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:23:59,631 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:23:59,632 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:23:59,632 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])
2017-10-24 13:23:59,632 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:23:59,632 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])
2017-10-24 13:23:59,632 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:23:59,636 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])
+ tis.private.nim: OpenQueue([Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 13:23:59,636 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:23:59,636 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:59,639 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 13:23:59,639 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:23:59,640 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,643 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 13:23:59,643 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:23:59,644 - session_2017-10-24T13_23_51_0 - INFO - shifted: OpenQueue([#, Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')])
2017-10-24 13:23:59,644 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')])
2017-10-24 13:23:59,644 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:23:59,644 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:59,644 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:23:59,644 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:59,644 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:23:59,649 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: accommodatePlan2Goals
-- BEGIN TIS changes --
- tis.private.issues_being_accommodated: {}
+ tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
?                                         ++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:23:59,649 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:retract
2017-10-24 13:23:59,649 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:23:59,649 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])
2017-10-24 13:23:59,649 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:23:59,652 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
-- END TIS changes --
2017-10-24 13:23:59,653 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:23:59,653 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:59,656 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 13:23:59,657 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:23:59,660 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 13:23:59,660 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,660 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:23:59,660 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:23:59,660 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:59,660 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:23:59,660 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:59,660 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:23:59,661 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:23:59,661 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:59,661 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:23:59,661 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:59,664 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose step1")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 13:23:59,664 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,664 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:59,667 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 13:23:59,667 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,668 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:59,668 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,668 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:23:59,670 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 13:23:59,671 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:59,671 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:59,671 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,671 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:59,671 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:23:59,671 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 13:23:59,671 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to step one, sender=DmeModule, reason=None)
2017-10-24 13:23:59,672 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 13:23:59,672 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:23:59,673 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844239.6
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step one
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:23:59,673 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:23:59,678 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose step1")}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 13:23:59,678 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:23:59,681 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), respond(?X.go_to_step(X))])
?                                                                                                  +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:23:59,681 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:23:59,684 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), respond(?X.go_to_step(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 13:23:59,684 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:23:59,684 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:23:59,687 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.go_to_step(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 13:23:59,687 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:23:59,690 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:23:59,690 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:23:59,691 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:23:59,691 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:23:59,693 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:23:59,693 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:23:59,693 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:23:59,696 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 13:23:59,697 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 13:23:59,697 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:23:59,697 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 13:23:59,697 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 13:23:59,698 - session_2017-10-24T13_23_51_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 13:23:59,698 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to step one, sender=DmeModule, reason=None))
2017-10-24 13:23:59,698 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to step one, sender=DmeModule, reason=None)
2017-10-24 13:23:59,698 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 13:23:59,698 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:59,699 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 13:23:59,699 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 13:23:59,699 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:23:59,700 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:59,700 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 13:23:59,700 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:23:59,701 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:23:59,701 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:59,701 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:59,702 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:59,703 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 13:23:59,703 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 13:23:59,703 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 13:23:59,703 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp') generated as u'Ok chose step1.'
2017-10-24 13:23:59,704 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 13:23:59,705 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:59,706 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:23:59,707 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:23:59,707 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 13:23:59,707 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 13:23:59,707 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 13:23:59,708 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 13:23:59,708 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f950423b3f8>]
2017-10-24 13:23:59,709 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f950423b3f8>], sender=GuiBackend, reason=None)
2017-10-24 13:23:59,709 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posted event
2017-10-24 13:23:59,709 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None))
2017-10-24 13:23:59,709 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 13:23:59,709 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose step1."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 13:23:59,710 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:59,710 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 13:23:59,710 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:23:59,710 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose step1."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 13:23:59,711 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:59,711 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f950423b3f8>], sender=GuiBackend, reason=None))
2017-10-24 13:23:59,711 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f950423b3f8>], sender=GuiBackend, reason=None)
2017-10-24 13:23:59,711 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose step1."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 13:23:59,712 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:59,712 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:23:59,753 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose step1."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 13:23:59,754 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:23:59,755 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None))
2017-10-24 13:23:59,755 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None)
2017-10-24 13:23:59,755 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 13:23:59,755 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 13:23:59,756 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 13:23:59,756 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 13:23:59,756 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None))
2017-10-24 13:23:59,757 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844239.76
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step one
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:23:59,757 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:23:59,758 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:23:59,758 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:23:59,765 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.issues_being_accommodated: {?X.step_to_choose(X)}
?                                         --------------------
+ tis.private.issues_being_accommodated: {}
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:23:59,765 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:23:59,765 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:23:59,768 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:23:59,768 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:23:59,768 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:23:59,768 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:23:59,768 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:23:59,768 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:23:59,768 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:23:59,768 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:23:59,769 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:23:59,769 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:23:59,769 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:23:59,769 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:23:59,772 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose step1")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:23:59,772 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:23:59,772 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:59,776 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose step1")}
+ tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
?                                           ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 13:23:59,776 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:23:59,776 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,776 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:23:59,776 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:23:59,776 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:59,776 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:23:59,777 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:23:59,778 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:23:59,778 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:23:59,778 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:23:59,778 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:23:59,781 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 13:23:59,781 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 13:23:59,781 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 13:23:59,781 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 13:23:59,782 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 13:23:59,782 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:23:59,782 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:23:59,782 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 13:23:59,783 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 13:23:59,783 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 13:23:59,784 - session_2017-10-24T13_23_51_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f95042a1bd8>:1.0
2017-10-24 13:23:59,784 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:00,784 - session_2017-10-24T13_23_51_0 - DEBUG - Timeout fired
2017-10-24 13:24:00,784 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 13:24:00,784 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 13:24:00,784 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 13:24:00,784 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 13:24:00,786 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844240.78
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step one
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:00,786 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:00,786 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:00,788 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:00,788 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:00,792 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one'), Move(answer(step_to_choose(step1)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step one')}
-- END TIS changes --
2017-10-24 13:24:00,793 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:00,793 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:00,795 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:00,795 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:00,795 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:00,795 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:00,795 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:00,796 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:00,797 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:00,797 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:00,797 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:00,797 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:00,797 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:00,800 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 13:24:00,800 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:00,801 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:00,804 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose step1")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 13:24:00,804 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:00,804 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:00,804 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:00,804 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:00,804 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:00,804 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:00,805 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:00,805 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:00,805 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:00,805 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:24:00,805 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:24:00,806 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844240.78
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step one
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:00,806 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:24:00,811 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 ^^^  ^^^^^^^^^^^^  ^^^^ ----------- ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^  ^  ^
- tis.private.tmp.sys.bel: {go_to_step("chose step1")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 13:24:00,811 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:00,814 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:24:00,814 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:00,817 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 13:24:00,817 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:00,819 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:00,820 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:00,820 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:00,820 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:24:00,822 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:00,822 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:24:00,822 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:24:00,824 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 13:24:00,825 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 13:24:00,825 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 13:24:05,448 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 13:24:05,448 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:05,449 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next step}], sender=TextInputComponent, reason=None))
2017-10-24 13:24:05,449 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next step}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:05,449 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next step}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:05,449 - session_2017-10-24T13_23_51_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 13:24:05,449 - session_2017-10-24T13_23_51_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 13:24:05,451 - session_2017-10-24T13_23_51_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 13:24:05,451 - session_2017-10-24T13_23_51_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])} for DDD 'recipehelp'
2017-10-24 13:24:05,451 - session_2017-10-24T13_23_51_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}
2017-10-24 13:24:05,451 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 13:24:05,452 - session_2017-10-24T13_23_51_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 13:24:05,452 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next step}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:05,452 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 13:24:05,452 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:24:05,452 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:05,453 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,453 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 13:24:05,453 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 13:24:05,454 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:24:05,454 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,454 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,455 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,455 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 13:24:05,455 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 13:24:05,455 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 13:24:05,455 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:05,456 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 13:24:05,456 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 13:24:05,456 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:05,456 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 13:24:05,457 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 13:24:05,457 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,459 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,459 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 13:24:05,459 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 13:24:05,459 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 13:24:05,460 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 13:24:05,460 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 13:24:05,460 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:05,460 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950429bf38>]
2017-10-24 13:24:05,460 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950429bf38>], sender=GuiBackend, reason=None)
2017-10-24 13:24:05,460 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posted event
2017-10-24 13:24:05,461 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 13:24:05,461 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 13:24:05,461 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 13:24:05,461 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 13:24:05,461 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 13:24:05,462 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,462 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 13:24:05,462 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 13:24:05,463 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 13:24:05,463 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,464 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950429bf38>], sender=GuiBackend, reason=None))
2017-10-24 13:24:05,464 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950429bf38>], sender=GuiBackend, reason=None)
2017-10-24 13:24:05,464 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 13:24:05,465 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,465 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:05,471 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 13:24:05,471 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:05,471 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 13:24:05,471 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 13:24:05,471 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 13:24:05,471 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 13:24:05,472 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 13:24:05,472 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 13:24:05,472 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 13:24:05,473 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844245.47
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:05,473 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:05,474 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:05,474 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:05,477 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 13:24:05,478 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:05,478 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:05,480 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:05,480 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:05,480 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:05,481 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:05,481 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:05,481 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:05,481 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:05,481 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:05,481 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:05,481 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:05,481 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:05,482 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:05,485 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 13:24:05,485 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:05,485 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,486 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:05,486 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,486 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:05,489 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:05,490 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,491 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,491 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,491 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:05,491 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:05,494 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 13:24:05,494 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:24:05,494 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:05,494 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 13:24:05,494 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:24:05,494 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:05,495 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,495 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 13:24:05,495 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:05,495 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:05,496 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,496 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,496 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,497 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:05,498 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844245.5
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:05,498 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:05,501 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}
-- END TIS changes --
2017-10-24 13:24:05,501 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:05,506 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next step'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 13:24:05,507 - session_2017-10-24T13_23_51_0 - INFO - hypotheses reranking had no effect
2017-10-24 13:24:05,507 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:05,513 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 13:24:05,513 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:05,519 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 13:24:05,519 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:05,519 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:05,521 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:05,522 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:05,522 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:05,524 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:05,524 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:05,525 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:05,525 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:05,525 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:05,525 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:05,525 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])
2017-10-24 13:24:05,525 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:05,525 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])
2017-10-24 13:24:05,525 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:05,529 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')}
-- END TIS changes --
2017-10-24 13:24:05,529 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:05,529 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,532 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 13:24:05,532 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:05,532 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,535 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 13:24:05,535 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:05,535 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:05,535 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:05,535 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:05,535 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:05,535 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:05,536 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:05,536 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:05,536 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:05,536 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,539 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 13:24:05,539 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,539 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,539 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,539 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next step, sender=DmeModule, reason=None)
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:24:05,542 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:24:05,543 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844245.5
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:05,544 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:24:05,548 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 13:24:05,548 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:05,551 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 13:24:05,551 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:05,553 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:05,554 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:05,554 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:05,554 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:24:05,556 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:05,556 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:24:05,556 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:24:05,559 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 13:24:05,559 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 13:24:05,559 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:05,559 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next step, sender=DmeModule, reason=None))
2017-10-24 13:24:05,559 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next step, sender=DmeModule, reason=None)
2017-10-24 13:24:05,559 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 13:24:05,560 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,560 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 13:24:05,560 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:24:05,561 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:05,561 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,562 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 13:24:05,562 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:05,562 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:24:05,563 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,563 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,564 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,565 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 13:24:05,565 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 13:24:05,565 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 13:24:05,565 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 13:24:05,565 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 13:24:05,565 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 13:24:05,566 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 13:24:05,566 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-24 13:24:05,566 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 13:24:05,567 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,568 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:24:05,569 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,569 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 13:24:05,569 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 13:24:05,569 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 13:24:05,570 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 13:24:05,570 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 13:24:05,570 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 13:24:05,570 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f95042989e0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f95042a87a0>]
2017-10-24 13:24:05,571 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f95042989e0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f95042a87a0>], sender=GuiBackend, reason=None)
2017-10-24 13:24:05,571 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posted event
2017-10-24 13:24:05,571 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-24 13:24:05,571 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 13:24:05,571 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 13:24:05,571 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,572 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 13:24:05,572 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:24:05,572 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 13:24:05,573 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,573 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f95042989e0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f95042a87a0>], sender=GuiBackend, reason=None))
2017-10-24 13:24:05,573 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f95042989e0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f95042a87a0>], sender=GuiBackend, reason=None)
2017-10-24 13:24:05,573 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 13:24:05,574 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,574 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:05,584 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 13:24:05,584 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:05,585 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-24 13:24:05,585 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-24 13:24:05,585 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 13:24:05,585 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 13:24:05,585 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 13:24:05,585 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 13:24:05,586 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 13:24:05,587 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844245.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:05,588 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:05,588 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:05,588 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:05,594 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:24:05,595 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:05,595 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:05,597 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 13:24:05,597 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:05,597 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:05,598 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:05,603 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 13:24:05,603 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:05,603 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,603 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:05,603 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,603 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:05,606 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:24:05,607 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:05,607 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^
+ tis.shared.previous_goal: perform(go_to_next)
?                           ^^^^ +++++++++  +++
-- END TIS changes --
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:05,610 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:05,611 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:05,611 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:05,611 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,614 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:24:05,614 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,614 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,618 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 13:24:05,618 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,618 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,618 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,619 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:05,619 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,619 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,619 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,619 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:05,620 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:05,622 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 13:24:05,622 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 13:24:05,622 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:24:05,623 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844245.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:05,623 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:24:05,629 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 13:24:05,629 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:05,632 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:24:05,632 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:05,635 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 13:24:05,635 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:05,638 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:05,638 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:05,639 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:05,639 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:24:05,641 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:05,641 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:24:05,641 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:24:05,644 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 13:24:05,644 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 13:24:05,644 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 13:24:05,644 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 13:24:05,645 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 13:24:05,645 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:05,645 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,646 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-24 13:24:05,646 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 13:24:05,646 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:24:05,646 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,647 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,649 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,649 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 13:24:05,649 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 13:24:05,649 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 13:24:05,649 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:05,649 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 13:24:05,650 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 13:24:05,650 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:05,650 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 13:24:05,650 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 13:24:05,652 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,654 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:05,654 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 13:24:05,654 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 13:24:05,654 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 13:24:05,655 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 13:24:05,655 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 13:24:05,655 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:05,655 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950423b200>]
2017-10-24 13:24:05,656 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950423b200>], sender=GuiBackend, reason=None)
2017-10-24 13:24:05,656 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posted event
2017-10-24 13:24:05,656 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 13:24:05,656 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 13:24:05,656 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 13:24:05,657 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,657 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950423b200>], sender=GuiBackend, reason=None))
2017-10-24 13:24:05,657 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950423b200>], sender=GuiBackend, reason=None)
2017-10-24 13:24:05,657 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 13:24:05,658 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,658 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:05,697 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 13:24:05,697 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:05,697 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 13:24:05,697 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 13:24:05,697 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 13:24:05,698 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 13:24:05,698 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 13:24:05,698 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 13:24:05,698 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-24 13:24:05,700 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844245.7
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:05,700 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:05,700 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:05,700 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:05,705 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next step')}
-- END TIS changes --
2017-10-24 13:24:05,705 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:05,705 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:05,708 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:05,709 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:05,709 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:05,712 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 13:24:05,712 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:05,713 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,713 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:05,713 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,713 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:05,718 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 13:24:05,718 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:05,718 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,718 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:05,718 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,718 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:05,718 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:05,719 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:05,719 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:05,719 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:05,719 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:05,719 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:05,719 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:05,719 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:05,719 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,720 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,720 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:05,720 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:05,720 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:05,720 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:05,721 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:05,721 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:05,723 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 13:24:05,723 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 13:24:05,724 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:05,724 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 13:24:05,724 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 13:24:05,724 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:05,724 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:05,725 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 13:24:05,725 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:05,725 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:05,725 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:18,401 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go back"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 13:24:18,402 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:18,402 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None))
2017-10-24 13:24:18,403 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:18,403 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:18,403 - session_2017-10-24T13_23_51_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go back"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 13:24:18,403 - session_2017-10-24T13_23_51_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 13:24:18,405 - session_2017-10-24T13_23_51_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 13:24:18,405 - session_2017-10-24T13_23_51_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])} for DDD 'recipehelp'
2017-10-24 13:24:18,405 - session_2017-10-24T13_23_51_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
2017-10-24 13:24:18,405 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None)
2017-10-24 13:24:18,406 - session_2017-10-24T13_23_51_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go back"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go back", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_back"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go back", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 13:24:18,406 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:18,406 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None))
2017-10-24 13:24:18,406 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None)
2017-10-24 13:24:18,406 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 13:24:18,406 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 13:24:18,406 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 13:24:18,408 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,408 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 13:24:18,408 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,408 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,409 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,409 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:18,410 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844258.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:18,411 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:18,415 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
-- END TIS changes --
2017-10-24 13:24:18,415 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:18,415 - session_2017-10-24T13_23_51_0 - INFO - hypotheses reranking had no effect
2017-10-24 13:24:18,415 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:18,419 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')])
-- END TIS changes --
2017-10-24 13:24:18,420 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:18,426 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:24:18,426 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:18,426 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:18,428 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:18,428 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:18,428 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:18,435 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ++++++++++++++++++++ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    ++++++++++++++
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 13:24:18,435 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:18,435 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:18,439 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 13:24:18,439 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:18,439 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:18,439 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:18,439 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])
2017-10-24 13:24:18,439 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:18,439 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])
2017-10-24 13:24:18,439 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:18,443 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([do(go_back), findout(?X.done(X)), forget(done)])
?                          +++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_back), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')}
-- END TIS changes --
2017-10-24 13:24:18,443 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:18,443 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:18,444 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:18,444 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,446 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_back), findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([dev_perform(go_back, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:18,447 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,451 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
?                                                                                                                                                                                                                                                                                                                                       +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([dev_perform(go_back, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 13:24:18,451 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,451 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,452 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,452 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:18,452 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:18,452 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,452 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,453 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:18,453 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:18,453 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None)
2017-10-24 13:24:18,453 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 13:24:18,453 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:24:18,454 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844258.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(go_back), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:18,454 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:24:18,462 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
?                                                                                                                                                                                                                                                                                                                                               +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_back), resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 13:24:18,462 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:18,467 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_back, [], True, None))])
-- END TIS changes --
2017-10-24 13:24:18,467 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:18,471 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:18,471 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:18,471 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:18,471 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:24:18,474 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:18,474 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:24:18,475 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:24:18,478 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 13:24:18,478 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 13:24:18,478 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:18,478 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None))
2017-10-24 13:24:18,478 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None)
2017-10-24 13:24:18,479 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": "go back", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 13:24:18,479 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,479 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 13:24:18,479 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 13:24:18,480 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:18,481 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,481 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)))
2017-10-24 13:24:18,482 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:18,482 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:24:18,482 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,482 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,483 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,484 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 13:24:18,484 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 13:24:18,484 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 13:24:18,484 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 13:24:18,484 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 13:24:18,484 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 13:24:18,484 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 13:24:18,485 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp') generated as u'Went to the previous step'
2017-10-24 13:24:18,485 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None)
2017-10-24 13:24:18,486 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,488 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:24:18,489 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,490 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 13:24:18,490 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 13:24:18,491 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 13:24:18,491 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 13:24:18,491 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 13:24:18,492 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 13:24:18,493 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f950420bd40>, <tdm.tdm_gui_protocol.Popup instance at 0x7f950420b5f0>]
2017-10-24 13:24:18,493 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f950420bd40>, <tdm.tdm_gui_protocol.Popup instance at 0x7f950420b5f0>], sender=GuiBackend, reason=None)
2017-10-24 13:24:18,493 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posted event
2017-10-24 13:24:18,493 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None))
2017-10-24 13:24:18,493 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None)
2017-10-24 13:24:18,494 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to the previous step"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 13:24:18,494 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,494 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None))
2017-10-24 13:24:18,495 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:24:18,495 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to the previous step"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 13:24:18,496 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,497 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f950420bd40>, <tdm.tdm_gui_protocol.Popup instance at 0x7f950420b5f0>], sender=GuiBackend, reason=None))
2017-10-24 13:24:18,497 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f950420bd40>, <tdm.tdm_gui_protocol.Popup instance at 0x7f950420b5f0>], sender=GuiBackend, reason=None)
2017-10-24 13:24:18,498 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_back", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to the previous step"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 13:24:18,500 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,500 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:18,501 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to the previous step"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 13:24:18,501 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:18,501 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to the previous step], sender=TextOutputComponent, reason=None))
2017-10-24 13:24:18,502 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to the previous step], sender=TextOutputComponent, reason=None)
2017-10-24 13:24:18,502 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 13:24:18,502 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 13:24:18,503 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 13:24:18,503 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 13:24:18,503 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 13:24:18,504 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844258.5
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(go_back), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(go_back), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:18,505 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:18,505 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:18,505 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:18,511 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:24:18,512 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:18,512 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:18,515 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 13:24:18,515 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:18,515 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:18,515 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:18,516 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:18,516 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:18,516 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:18,516 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:18,516 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:18,516 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:18,516 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:18,516 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:18,521 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 13:24:18,521 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:18,521 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:18,522 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:18,522 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,522 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:18,526 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
?                                                        +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:24:18,526 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:18,526 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:18,529 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_back), resolve(?X.say_step(X)), perform(top)])
?                             ------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
- tis.shared.previous_goal: perform(go_to_next)
?                                      ^^^^^^^
+ tis.shared.previous_goal: perform(go_back)
?                                      ^^^^
-- END TIS changes --
2017-10-24 13:24:18,529 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:18,530 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,534 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 13:24:18,534 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,534 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,540 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 13:24:18,541 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,541 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,541 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,541 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:18,541 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:18,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:18,542 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:18,545 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 13:24:18,545 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:18,545 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:24:18,546 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844258.5
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(go_back), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:18,546 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:24:18,557 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
?                                                                 +++++++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(go_back), resolve(?X.say_step(X)), perform(top)])
?                                      ------------------
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 13:24:18,557 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:18,560 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:24:18,560 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:18,563 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 13:24:18,563 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:18,566 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:18,566 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:18,566 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:18,566 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:24:18,569 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:18,569 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:24:18,569 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:24:18,572 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 13:24:18,572 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 13:24:18,572 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 13:24:18,573 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 13:24:18,573 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:18,573 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:18,574 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,574 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)))
2017-10-24 13:24:18,574 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 13:24:18,574 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:24:18,575 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,575 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,577 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,578 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), device_activity_terminated(go_back), DeviceResultProposition(go_to_next, [], True, None), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 13:24:18,578 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 13:24:18,578 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), device_activity_terminated(go_back), DeviceResultProposition(go_to_next, [], True, None), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 13:24:18,578 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:18,578 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 13:24:18,579 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 13:24:18,579 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:18,579 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 13:24:18,579 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 13:24:18,581 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,583 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:18,583 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 13:24:18,584 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 13:24:18,584 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), device_activity_terminated(go_back), DeviceResultProposition(go_to_next, [], True, None), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 13:24:18,584 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 13:24:18,584 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), device_activity_terminated(go_back), DeviceResultProposition(go_to_next, [], True, None), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 13:24:18,584 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 13:24:18,585 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950420b170>]
2017-10-24 13:24:18,585 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950420b170>], sender=GuiBackend, reason=None)
2017-10-24 13:24:18,585 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posted event
2017-10-24 13:24:18,585 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 13:24:18,585 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 13:24:18,585 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 13:24:18,586 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,586 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950420b170>], sender=GuiBackend, reason=None))
2017-10-24 13:24:18,586 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f950420b170>], sender=GuiBackend, reason=None)
2017-10-24 13:24:18,586 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 13:24:18,587 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,587 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:18,627 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 13:24:18,627 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:18,627 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 13:24:18,627 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 13:24:18,627 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 13:24:18,627 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 13:24:18,627 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 13:24:18,628 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 13:24:18,628 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-24 13:24:18,629 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844258.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:18,629 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:18,629 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:18,630 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:18,636 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back')}
-- END TIS changes --
2017-10-24 13:24:18,636 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:18,636 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:18,639 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:18,639 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:18,639 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:18,639 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:18,639 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:18,639 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:18,639 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:18,639 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:18,640 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:18,640 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:18,640 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:18,640 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:18,645 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 13:24:18,645 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:18,645 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:18,645 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:18,645 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,646 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:18,649 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 13:24:18,649 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:18,649 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:18,649 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:18,650 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,651 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,651 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:18,651 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:18,651 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:18,652 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:18,652 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:18,652 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:18,655 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 13:24:18,655 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:18,656 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:18,656 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 13:24:18,656 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:18,656 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:18,657 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:18,657 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 13:24:18,658 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:18,658 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 13:24:18,658 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:29,893 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "what should i do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 13:24:29,893 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:29,894 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None))
2017-10-24 13:24:29,894 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:29,894 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:29,894 - session_2017-10-24T13_23_51_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "what should i do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 13:24:29,894 - session_2017-10-24T13_23_51_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 13:24:29,896 - session_2017-10-24T13_23_51_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 13:24:29,896 - session_2017-10-24T13_23_51_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])} for DDD 'recipehelp'
2017-10-24 13:24:29,896 - session_2017-10-24T13_23_51_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
2017-10-24 13:24:29,896 - session_2017-10-24T13_23_51_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 13:24:29,897 - session_2017-10-24T13_23_51_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "what should i do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "what should i do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "what should i do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 13:24:29,897 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 13:24:29,897 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 13:24:29,897 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 13:24:29,898 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 13:24:29,898 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 13:24:29,898 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 13:24:29,898 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:29,898 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 13:24:29,899 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:29,899 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:29,900 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 13:24:29,900 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:29,901 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844269.9
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:29,901 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:29,904 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
-- END TIS changes --
2017-10-24 13:24:29,904 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:29,905 - session_2017-10-24T13_23_51_0 - INFO - hypotheses reranking had no effect
2017-10-24 13:24:29,906 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:29,910 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')])
-- END TIS changes --
2017-10-24 13:24:29,910 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:29,915 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:24:29,916 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:29,916 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:29,918 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:29,919 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:29,919 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:29,925 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
- tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
?                                                                 +++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:24:29,925 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:29,926 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:29,929 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 13:24:29,929 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:29,929 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:29,929 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:29,929 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])
2017-10-24 13:24:29,930 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:29,930 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])
2017-10-24 13:24:29,930 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:29,933 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.say_step(X)])
?                           ++++++++++++++
-- END TIS changes --
2017-10-24 13:24:29,933 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:29,933 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:29,934 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:29,934 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:29,934 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:29,934 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:29,934 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:29,934 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:29,934 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:29,934 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:29,935 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:29,935 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:29,935 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:29,935 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:29,936 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:29,936 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:29,939 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X)])
?                           --------------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 13:24:29,939 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:29,939 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:29,940 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:29,940 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:29,940 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:29,940 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None)
2017-10-24 13:24:29,940 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:29,940 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:24:29,942 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844269.9
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:29,942 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:24:29,948 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^  ^ ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                ^^^^^ +++++++++++++++++ ^^^^^ ^^
-- END TIS changes --
2017-10-24 13:24:29,948 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:29,952 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 13:24:29,952 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:29,955 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:29,955 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:29,955 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:29,955 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:24:29,958 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:29,958 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:24:29,958 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:24:29,961 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 13:24:29,962 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')])
2017-10-24 13:24:29,962 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:29,962 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None))
2017-10-24 13:24:29,962 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None)
2017-10-24 13:24:29,963 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": "what should i do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 13:24:29,963 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:29,963 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 13:24:29,963 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:29,963 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:29,964 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:29,965 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 13:24:29,965 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 13:24:29,965 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:24:29,966 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:29,966 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:29,968 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:29,969 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), device_activity_terminated(go_back), DeviceResultProposition(go_to_next, [], True, None), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 13:24:29,969 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')
2017-10-24 13:24:29,969 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')
2017-10-24 13:24:29,970 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule: Move Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp') generated as u'Ok Step one: preheat the oven to 180 degrees..'
2017-10-24 13:24:29,970 - session_2017-10-24T13_23_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step one: preheat the oven to 180 degrees..], sender=GenerateModule, reason=None)
2017-10-24 13:24:29,971 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:29,973 - session_2017-10-24T13_23_51_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok Step one: preheat the oven to 180 degrees..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:24:29,975 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:24:29,975 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 13:24:29,975 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')])
2017-10-24 13:24:29,975 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), device_activity_terminated(go_back), DeviceResultProposition(go_to_next, [], True, None), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 13:24:29,975 - session_2017-10-24T13_23_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')
2017-10-24 13:24:29,976 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f95069ab758>]
2017-10-24 13:24:29,976 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f95069ab758>], sender=GuiBackend, reason=None)
2017-10-24 13:24:29,976 - session_2017-10-24T13_23_51_0 - DEBUG - GuiBackend posted event
2017-10-24 13:24:29,976 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step one: preheat the oven to 180 degrees..], sender=GenerateModule, reason=None))
2017-10-24 13:24:29,977 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step one: preheat the oven to 180 degrees..], sender=GenerateModule, reason=None)
2017-10-24 13:24:29,977 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok Step one: preheat the oven to 180 degrees.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 13:24:29,977 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:29,978 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok Step one: preheat the oven to 180 degrees..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 13:24:29,978 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok Step one: preheat the oven to 180 degrees..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:24:29,978 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok Step one: preheat the oven to 180 degrees.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 13:24:29,979 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:29,979 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f95069ab758>], sender=GuiBackend, reason=None))
2017-10-24 13:24:29,979 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f95069ab758>], sender=GuiBackend, reason=None)
2017-10-24 13:24:29,980 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok Step one: preheat the oven to 180 degrees.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 13:24:29,980 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:29,980 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:29,986 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok Step one: preheat the oven to 180 degrees.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 13:24:29,987 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:24:29,987 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok Step one: preheat the oven to 180 degrees..], sender=TextOutputComponent, reason=None))
2017-10-24 13:24:29,987 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok Step one: preheat the oven to 180 degrees..], sender=TextOutputComponent, reason=None)
2017-10-24 13:24:29,987 - session_2017-10-24T13_23_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 13:24:29,987 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None)
2017-10-24 13:24:29,988 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None)
2017-10-24 13:24:29,988 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None)
2017-10-24 13:24:29,988 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None))
2017-10-24 13:24:29,990 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844269.99
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:29,990 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:29,991 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:29,991 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:29,997 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:24:29,997 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:29,997 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 13:24:30,000 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:30,005 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
+ tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back), say_step("Step one: preheat the oven to 180 degrees.")}
?                                                                                             ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 13:24:30,005 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 13:24:30,005 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:30,009 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back), say_step("Step one: preheat the oven to 180 degrees.")}
+ tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back), say_step("Step one: preheat the oven to 180 degrees."), resolved(?X.say_step(X))}
?                                                                                                                                                     ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 13:24:30,009 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:30,010 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:30,011 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:30,011 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:30,011 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:30,011 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:30,012 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:30,012 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:30,012 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:30,015 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 13:24:30,015 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:30,015 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok Step one: preheat the oven to 180 degrees..], latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 13:24:30,016 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 13:24:30,016 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:30,016 - session_2017-10-24T13_23_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:24:30,016 - session_2017-10-24T13_23_51_0 - DEBUG - Sent.
2017-10-24 13:24:30,016 - session_2017-10-24T13_23_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok Step one: preheat the oven to 180 degrees..], latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 13:24:30,017 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok Step one: preheat the oven to 180 degrees..], latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 13:24:30,017 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok Step one: preheat the oven to 180 degrees..], latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 13:24:30,018 - session_2017-10-24T13_23_51_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f950471c7a0>:1.0
2017-10-24 13:24:30,018 - session_2017-10-24T13_23_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 13:24:31,019 - session_2017-10-24T13_23_51_0 - DEBUG - Timeout fired
2017-10-24 13:24:31,019 - session_2017-10-24T13_23_51_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 13:24:31,019 - session_2017-10-24T13_23_51_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 13:24:31,019 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 13:24:31,019 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 13:24:31,020 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844271.02
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back), say_step("Step one: preheat the oven to 180 degrees."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:31,021 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:filterReadings
2017-10-24 13:24:31,021 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 13:24:31,023 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:31,023 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 13:24:31,028 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
-- END TIS changes --
2017-10-24 13:24:31,028 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 13:24:31,029 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 13:24:31,031 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:31,031 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 13:24:31,031 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - INFO - BEGIN integrate_moves
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:integrate
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 13:24:31,032 - session_2017-10-24T13_23_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 13:24:31,033 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:31,033 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:31,033 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:31,033 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:accommodate
2017-10-24 13:24:31,033 - session_2017-10-24T13_23_51_0 - INFO - breaking out of accommodate
2017-10-24 13:24:31,033 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_reject
2017-10-24 13:24:31,033 - session_2017-10-24T13_23_51_0 - INFO - END integrate_moves
2017-10-24 13:24:31,033 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:31,034 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:31,034 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 13:24:31,034 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 13:24:31,034 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:exec_plan
2017-10-24 13:24:31,035 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:load_plan
2017-10-24 13:24:31,035 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 13:24:31,035 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 13:24:31,036 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 13:24:31,036 - session_2017-10-24T13_23_51_0 - INFO - running ISU module: select
2017-10-24 13:24:31,037 - session_2017-10-24T13_23_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f95069a7e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9504290910>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508844271.02
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back), say_step("Step one: preheat the oven to 180 degrees."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 13:24:31,037 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 13:24:31,041 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back)}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back), say_step("Step one: preheat the oven to 180 degrees."), resolved(?X.say_step(X))}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 13:24:31,041 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_action
2017-10-24 13:24:31,044 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 +++++++++++++++++++++
-- END TIS changes --
2017-10-24 13:24:31,044 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:31,044 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:31,047 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.done(X)))])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 13:24:31,047 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_icm
2017-10-24 13:24:31,047 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:select_move
2017-10-24 13:24:31,047 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 13:24:31,050 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 13:24:31,050 - session_2017-10-24T13_23_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 13:24:31,050 - session_2017-10-24T13_23_51_0 - DEBUG - rulegroup:set_timeout
2017-10-24 13:24:31,053 - session_2017-10-24T13_23_51_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 13:24:31,053 - session_2017-10-24T13_23_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 13:24:31,054 - session_2017-10-24T13_23_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_to_next), device_activity_terminated(go_back), say_step("Step one: preheat the oven to 180 degrees."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
