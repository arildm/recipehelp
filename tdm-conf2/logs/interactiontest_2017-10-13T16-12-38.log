2017-10-13 16:12:38,577 - interactiontest - DEBUG - InteractionTestingBackend()
2017-10-13 16:12:38,577 - interactiontest - DEBUG - InteractionTestingBackend.initialize()
2017-10-13 16:12:38,600 - interactiontest - DEBUG - InteractionTestingBackend.add_module(DmeModule, args=[<bound method InteractionTestingBackend.get_tis of <tdm.backend.InteractionTestingBackend object at 0x7f5eb6bd8c10>>, False])
2017-10-13 16:12:38,600 - interactiontest - DEBUG - InteractionTestingBackend.add_module(GenerateModule, args=[<bound method InteractionTestingBackend.get_tis of <tdm.backend.InteractionTestingBackend object at 0x7f5eb6bd8c10>>, 'eng'])
2017-10-13 16:12:38,600 - interactiontest - DEBUG - InteractionTestingBackend.add_module(DeviceManager, args=[])
2017-10-13 16:12:38,600 - interactiontest - DEBUG - InteractionTestingBackend.add_module(CogloadModule, args=[])
2017-10-13 16:12:38,601 - interactiontest - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-13 16:12:38,601 - interactiontest - DEBUG - InteractionTestingBackend.add_module(GuiBackend, args=[<bound method InteractionTestingBackend.get_tis of <tdm.backend.InteractionTestingBackend object at 0x7f5eb6bd8c10>>, True, 'disabled'])
2017-10-13 16:12:38,601 - interactiontest - DEBUG - InteractionTestingBackend.add_module(IndependentGuiBackend, args=[<bound method InteractionTestingBackend.get_tis of <tdm.backend.InteractionTestingBackend object at 0x7f5eb6bd8c10>>])
2017-10-13 16:12:38,601 - interactiontest - DEBUG - InteractionTestingBackend.add_module(InterpretModule, args=[<bound method InteractionTestingBackend.get_device_manager of <tdm.backend.InteractionTestingBackend object at 0x7f5eb6bd8c10>>, <bound method InteractionTestingBackend.get_tis of <tdm.backend.InteractionTestingBackend object at 0x7f5eb6bd8c10>>, 'eng', False, False])
2017-10-13 16:12:38,601 - interactiontest - DEBUG - Backend initialized
2017-10-13 16:12:38,601 - interactiontest - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-13 16:12:38,601 - interactiontest - DEBUG - Backend uses TDM version '5.0.0'
2017-10-13 16:12:38,601 - interactiontest - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-13 16:12:38,601 - interactiontest - DEBUG - Backend uses language 'eng'
2017-10-13 16:12:38,601 - interactiontest - DEBUG - running module InterpretModule
2017-10-13 16:12:38,601 - interactiontest - DEBUG - running module DmeModule
2017-10-13 16:12:38,624 - interactiontest - DEBUG - running module DeviceManager
2017-10-13 16:12:38,624 - interactiontest - DEBUG - running module GenerateModule
2017-10-13 16:12:38,624 - interactiontest - DEBUG - running module IndependentGuiBackend
2017-10-13 16:12:38,624 - interactiontest - DEBUG - running module GuiBackend
2017-10-13 16:12:38,624 - interactiontest - DEBUG - running module CogloadModule
2017-10-13 16:12:38,625 - interactiontest - DEBUG - Backend.handle_event_from_external_queue()
2017-10-13 16:12:38,625 - interactiontest - DEBUG - Backend._handle_external_event(...)
2017-10-13 16:12:38,625 - interactiontest - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-13 16:12:38,625 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-13 16:12:38,625 - interactiontest - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-13 16:12:38,625 - interactiontest - DEBUG - Sent.
2017-10-13 16:12:38,625 - interactiontest - DEBUG - Backend.handle_event_from_external_queue()
2017-10-13 16:12:38,626 - interactiontest - DEBUG - Backend communication: Backend received event {"content": {"manages_timeout": true}, "_sender": "InteractionTestingTestCase", "_reason": null, "event_type": "FRONTEND_CONFIG"}
2017-10-13 16:12:38,626 - interactiontest - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "InteractionTestingTestCase", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-13 16:12:38,627 - interactiontest - DEBUG - Backend._handle_external_event(...)
2017-10-13 16:12:38,627 - interactiontest - DEBUG - Backend._handle_event(Event(FRONTEND_CONFIG, {manages_timeout: True}, sender=InteractionTestingTestCase, reason=None))
2017-10-13 16:12:38,627 - interactiontest - DEBUG - TurnManager handles Event(FRONTEND_CONFIG, {manages_timeout: True}, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,627 - interactiontest - DEBUG - Backend.handle_event_from_external_queue()
2017-10-13 16:12:38,627 - interactiontest - DEBUG - Backend._handle_external_event(...)
2017-10-13 16:12:38,627 - interactiontest - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=InteractionTestingTestCase, reason=None))
2017-10-13 16:12:38,628 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,628 - interactiontest - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-13 16:12:38,628 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-13 16:12:38,628 - interactiontest - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-13 16:12:38,628 - interactiontest - DEBUG - Sent.
2017-10-13 16:12:38,628 - interactiontest - DEBUG - Backend.handle_event_from_external_queue()
2017-10-13 16:12:38,630 - interactiontest - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "InteractionTestingTestCase", "_reason": null, "event_type": "START"}
2017-10-13 16:12:38,630 - interactiontest - DEBUG - Backend._handle_external_event(...)
2017-10-13 16:12:38,630 - interactiontest - DEBUG - Backend._handle_event(Event(START, None, sender=InteractionTestingTestCase, reason=None))
2017-10-13 16:12:38,630 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,630 - interactiontest - DEBUG - InterpretModule handles Event(START, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,631 - interactiontest - DEBUG - DmeModule handles Event(START, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,631 - interactiontest - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-13 16:12:38,631 - interactiontest - INFO - running ISU module: update (Event(START, None, sender=InteractionTestingTestCase, reason=None))
2017-10-13 16:12:38,632 - interactiontest - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5eb6bd8b50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5eb6713190>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1507903958.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=InteractionTestingTestCase, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-13 16:12:38,632 - interactiontest - DEBUG - rulegroup:filterReadings
2017-10-13 16:12:38,632 - interactiontest - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-13 16:12:38,632 - interactiontest - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-13 16:12:38,634 - interactiontest - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-13 16:12:38,634 - interactiontest - DEBUG - Testing preconds for rule:switch_ddd
2017-10-13 16:12:38,634 - interactiontest - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-13 16:12:38,637 - interactiontest - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-13 16:12:38,637 - interactiontest - DEBUG - rulegroup:integrateDeviceAction
2017-10-13 16:12:38,637 - interactiontest - DEBUG - rulegroup:backupSharedUsr
2017-10-13 16:12:38,637 - interactiontest - DEBUG - rulegroup:noFollowupToActionConf
2017-10-13 16:12:38,637 - interactiontest - DEBUG - rulegroup:irrelevantFollowup
2017-10-13 16:12:38,637 - interactiontest - DEBUG - rulegroup:noFollowupToUndQ
2017-10-13 16:12:38,637 - interactiontest - DEBUG - rulegroup:downdateClarification
2017-10-13 16:12:38,637 - interactiontest - INFO - BEGIN integrate_moves
2017-10-13 16:12:38,638 - interactiontest - INFO - init_shift: OpenQueue([#])
2017-10-13 16:12:38,638 - interactiontest - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-13 16:12:38,638 - interactiontest - INFO - init_shift: OpenQueue([#])
2017-10-13 16:12:38,638 - interactiontest - DEBUG - rulegroup:integrate
2017-10-13 16:12:38,638 - interactiontest - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-13 16:12:38,638 - interactiontest - INFO - END try_move_integratation_without_accommodation
2017-10-13 16:12:38,638 - interactiontest - DEBUG - rulegroup:removeYesNo
2017-10-13 16:12:38,638 - interactiontest - DEBUG - rulegroup:select_action
2017-10-13 16:12:38,639 - interactiontest - DEBUG - rulegroup:select_reject
2017-10-13 16:12:38,639 - interactiontest - DEBUG - rulegroup:accommodate
2017-10-13 16:12:38,639 - interactiontest - INFO - breaking out of accommodate
2017-10-13 16:12:38,639 - interactiontest - DEBUG - rulegroup:select_reject
2017-10-13 16:12:38,639 - interactiontest - INFO - END integrate_moves
2017-10-13 16:12:38,639 - interactiontest - DEBUG - rulegroup:exec_plan
2017-10-13 16:12:38,639 - interactiontest - DEBUG - rulegroup:load_plan
2017-10-13 16:12:38,642 - interactiontest - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(top)])
?                          -------
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-13 16:12:38,642 - interactiontest - DEBUG - rulegroup:exec_plan
2017-10-13 16:12:38,675 - interactiontest - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
-- END TIS changes --
2017-10-13 16:12:38,676 - interactiontest - DEBUG - rulegroup:load_plan
2017-10-13 16:12:38,676 - interactiontest - DEBUG - rulegroup:exec_plan
2017-10-13 16:12:38,676 - interactiontest - DEBUG - rulegroup:load_plan
2017-10-13 16:12:38,676 - interactiontest - DEBUG - rulegroup:downdate_qud
2017-10-13 16:12:38,677 - interactiontest - DEBUG - rulegroup:downdate_goals
2017-10-13 16:12:38,677 - interactiontest - DEBUG - rulegroup:exec_plan
2017-10-13 16:12:38,677 - interactiontest - DEBUG - rulegroup:load_plan
2017-10-13 16:12:38,677 - interactiontest - DEBUG - rulegroup:removeYesNo
2017-10-13 16:12:38,677 - interactiontest - DEBUG - rulegroup:enable_timeout
2017-10-13 16:12:38,677 - interactiontest - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-13 16:12:38,677 - interactiontest - INFO - running ISU module: select
2017-10-13 16:12:38,678 - interactiontest - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5eb6bd8b50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5eb6713190>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1507903958.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=InteractionTestingTestCase, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-13 16:12:38,678 - interactiontest - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-13 16:12:38,681 - interactiontest - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
-- END TIS changes --
2017-10-13 16:12:38,681 - interactiontest - DEBUG - rulegroup:select_action
2017-10-13 16:12:38,681 - interactiontest - DEBUG - rulegroup:select_icm
2017-10-13 16:12:38,683 - interactiontest - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-13 16:12:38,683 - interactiontest - DEBUG - rulegroup:select_move
2017-10-13 16:12:38,683 - interactiontest - DEBUG - rulegroup:select_icm
2017-10-13 16:12:38,683 - interactiontest - DEBUG - rulegroup:select_move
2017-10-13 16:12:38,683 - interactiontest - DEBUG - Testing preconds for rule:clearContext
2017-10-13 16:12:38,685 - interactiontest - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-13 16:12:38,685 - interactiontest - DEBUG - Testing preconds for rule:setGUIContext
2017-10-13 16:12:38,685 - interactiontest - DEBUG - rulegroup:set_timeout
2017-10-13 16:12:38,687 - interactiontest - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 1.0
?                       ^^^
-- END TIS changes --
2017-10-13 16:12:38,688 - interactiontest - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))])
2017-10-13 16:12:38,688 - interactiontest - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=InteractionTestingTestCase, reason=None))
2017-10-13 16:12:38,688 - interactiontest - DEBUG - DeviceManager handles Event(START, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,688 - interactiontest - DEBUG - GenerateModule handles Event(START, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,688 - interactiontest - DEBUG - IndependentGuiBackend handles Event(START, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,688 - interactiontest - DEBUG - GuiBackend handles Event(START, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,688 - interactiontest - DEBUG - CogloadModule handles Event(START, None, sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,689 - interactiontest - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-13 16:12:38,689 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-13 16:12:38,689 - interactiontest - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-13 16:12:38,689 - interactiontest - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-13 16:12:38,689 - interactiontest - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-13 16:12:38,689 - interactiontest - DEBUG - Sent.
2017-10-13 16:12:38,689 - interactiontest - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-13 16:12:38,689 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-13 16:12:38,689 - interactiontest - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-13 16:12:38,689 - interactiontest - DEBUG - Sent.
2017-10-13 16:12:38,690 - interactiontest - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=InteractionTestingTestCase, reason=None)))
2017-10-13 16:12:38,690 - interactiontest - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=InteractionTestingTestCase, reason=None))
2017-10-13 16:12:38,690 - interactiontest - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-13 16:12:38,690 - interactiontest - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-13 16:12:38,690 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-13 16:12:38,691 - interactiontest - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-13 16:12:38,691 - interactiontest - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-13 16:12:38,691 - interactiontest - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-13 16:12:38,691 - interactiontest - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-13 16:12:38,692 - interactiontest - DEBUG - Performing system turn
2017-10-13 16:12:38,692 - interactiontest - DEBUG - Awaiting system utterance u'What would you like to do?'
2017-10-13 16:12:38,692 - interactiontest - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-13 16:12:38,693 - interactiontest - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view.], sender=GenerateModule, reason=None)
2017-10-13 16:12:38,693 - interactiontest - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-13 16:12:38,694 - interactiontest - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-13 16:12:38,695 - interactiontest - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-13 16:12:38,695 - interactiontest - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top))])
2017-10-13 16:12:38,695 - interactiontest - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-13 16:12:38,695 - interactiontest - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-13 16:12:38,695 - interactiontest - DEBUG - GuiBackend generated message []
2017-10-13 16:12:38,695 - interactiontest - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-13 16:12:38,695 - interactiontest - DEBUG - GuiBackend posted event
2017-10-13 16:12:38,696 - interactiontest - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view.], sender=GenerateModule, reason=None))
2017-10-13 16:12:38,696 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view.], sender=GenerateModule, reason=None)
2017-10-13 16:12:38,696 - interactiontest - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-13 16:12:38,696 - interactiontest - DEBUG - Sent.
2017-10-13 16:12:38,696 - interactiontest - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-13 16:12:38,696 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-13 16:12:38,696 - interactiontest - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-13 16:12:38,696 - interactiontest - DEBUG - Sent.
2017-10-13 16:12:38,696 - interactiontest - DEBUG - Backend.handle_event_from_external_queue()
2017-10-13 16:12:38,697 - interactiontest - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view."], "_sender": "InteractionTestingTestCase", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-13 16:12:38,697 - interactiontest - DEBUG - Got system utterance u'Returning to the start view.'
2017-10-13 16:12:38,697 - interactiontest - DEBUG - Backend._handle_external_event(...)
2017-10-13 16:12:38,698 - interactiontest - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view.], sender=InteractionTestingTestCase, reason=None))
2017-10-13 16:12:38,698 - interactiontest - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view.], sender=InteractionTestingTestCase, reason=None)
2017-10-13 16:12:38,698 - interactiontest - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-13 16:12:38,698 - interactiontest - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view.], sender=TurnManager, reason=None)
2017-10-13 16:12:38,698 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view.], sender=TurnManager, reason=None)
2017-10-13 16:12:38,698 - interactiontest - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view.], sender=TurnManager, reason=None)
2017-10-13 16:12:38,699 - interactiontest - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view.], sender=TurnManager, reason=None))
2017-10-13 16:12:38,700 - interactiontest - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5eb6bd8b50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5eb6713190>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1507903958.7
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-13 16:12:38,700 - interactiontest - DEBUG - rulegroup:filterReadings
2017-10-13 16:12:38,701 - interactiontest - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-13 16:12:38,701 - interactiontest - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-13 16:12:38,704 - interactiontest - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-13 16:12:38,704 - interactiontest - DEBUG - Testing preconds for rule:switch_ddd
2017-10-13 16:12:38,704 - interactiontest - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-13 16:12:38,706 - interactiontest - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-13 16:12:38,706 - interactiontest - DEBUG - rulegroup:integrateDeviceAction
2017-10-13 16:12:38,706 - interactiontest - DEBUG - rulegroup:backupSharedUsr
2017-10-13 16:12:38,706 - interactiontest - DEBUG - rulegroup:noFollowupToActionConf
2017-10-13 16:12:38,706 - interactiontest - DEBUG - rulegroup:irrelevantFollowup
2017-10-13 16:12:38,706 - interactiontest - DEBUG - rulegroup:noFollowupToUndQ
2017-10-13 16:12:38,707 - interactiontest - DEBUG - rulegroup:downdateClarification
2017-10-13 16:12:38,707 - interactiontest - INFO - BEGIN integrate_moves
2017-10-13 16:12:38,707 - interactiontest - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), #])
2017-10-13 16:12:38,707 - interactiontest - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-13 16:12:38,707 - interactiontest - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), #])
2017-10-13 16:12:38,707 - interactiontest - DEBUG - rulegroup:integrate
2017-10-13 16:12:38,709 - interactiontest - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-13 16:12:38,709 - interactiontest - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-13 16:12:38,709 - interactiontest - DEBUG - rulegroup:downdate_goals
2017-10-13 16:12:38,709 - interactiontest - DEBUG - Testing preconds for rule:removeFindout
2017-10-13 16:12:38,710 - interactiontest - DEBUG - rulegroup:load_plan
2017-10-13 16:12:38,710 - interactiontest - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-13 16:12:38,710 - interactiontest - INFO - END try_move_integratation_without_accommodation
2017-10-13 16:12:38,710 - interactiontest - DEBUG - rulegroup:removeYesNo
2017-10-13 16:12:38,710 - interactiontest - DEBUG - rulegroup:select_action
2017-10-13 16:12:38,710 - interactiontest - DEBUG - rulegroup:select_reject
2017-10-13 16:12:38,710 - interactiontest - DEBUG - rulegroup:accommodate
2017-10-13 16:12:38,710 - interactiontest - INFO - breaking out of accommodate
2017-10-13 16:12:38,710 - interactiontest - DEBUG - rulegroup:select_reject
2017-10-13 16:12:38,710 - interactiontest - INFO - END integrate_moves
2017-10-13 16:12:38,710 - interactiontest - DEBUG - rulegroup:exec_plan
2017-10-13 16:12:38,713 - interactiontest - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
-- END TIS changes --
2017-10-13 16:12:38,713 - interactiontest - DEBUG - rulegroup:load_plan
2017-10-13 16:12:38,713 - interactiontest - DEBUG - rulegroup:exec_plan
2017-10-13 16:12:38,713 - interactiontest - DEBUG - rulegroup:load_plan
2017-10-13 16:12:38,713 - interactiontest - DEBUG - rulegroup:downdate_qud
2017-10-13 16:12:38,713 - interactiontest - DEBUG - rulegroup:downdate_goals
2017-10-13 16:12:38,713 - interactiontest - DEBUG - rulegroup:exec_plan
2017-10-13 16:12:38,713 - interactiontest - DEBUG - rulegroup:load_plan
2017-10-13 16:12:38,714 - interactiontest - DEBUG - rulegroup:removeYesNo
2017-10-13 16:12:38,714 - interactiontest - DEBUG - rulegroup:enable_timeout
2017-10-13 16:12:38,716 - interactiontest - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-13 16:12:38,717 - interactiontest - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-13 16:12:38,717 - interactiontest - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view.], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-13 16:12:38,717 - interactiontest - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-13 16:12:38,717 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-13 16:12:38,717 - interactiontest - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-13 16:12:38,717 - interactiontest - DEBUG - Sent.
2017-10-13 16:12:38,717 - interactiontest - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view.], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None))
2017-10-13 16:12:38,717 - interactiontest - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view.], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-13 16:12:38,718 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view.], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-13 16:12:38,718 - interactiontest - DEBUG - TurnManager posts Event(START_FRONTEND_TIMER, None, sender=TurnManager, reason=None)
2017-10-13 16:12:38,718 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(START_FRONTEND_TIMER, None, sender=TurnManager, reason=None)
2017-10-13 16:12:38,718 - interactiontest - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "START_FRONTEND_TIMER"}
2017-10-13 16:12:38,718 - interactiontest - DEBUG - Sent.
2017-10-13 16:12:38,718 - interactiontest - DEBUG - Backend.handle_event_from_external_queue()
2017-10-13 16:12:38,718 - interactiontest - DEBUG - Backend._handle_external_event(...)
2017-10-13 16:12:38,718 - interactiontest - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-13 16:12:38,718 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-13 16:12:38,718 - interactiontest - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-13 16:12:38,718 - interactiontest - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-13 16:12:38,719 - interactiontest - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-13 16:12:38,720 - interactiontest - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-13 16:12:38,720 - interactiontest - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-13 16:12:38,720 - interactiontest - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-13 16:12:38,720 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-13 16:12:38,720 - interactiontest - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-13 16:12:38,720 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-13 16:12:38,720 - interactiontest - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-13 16:12:38,720 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-13 16:12:38,720 - interactiontest - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-13 16:12:38,720 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-13 16:12:38,720 - interactiontest - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-13 16:12:38,720 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-13 16:12:38,721 - interactiontest - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-13 16:12:38,721 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-13 16:12:38,721 - interactiontest - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-13 16:12:38,721 - interactiontest - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
