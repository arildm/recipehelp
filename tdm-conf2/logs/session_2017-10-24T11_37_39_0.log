2017-10-24 11:37:39,640 - session_2017-10-24T11_37_39_0 - DEBUG - Backend()
2017-10-24 11:37:39,640 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.initialize()
2017-10-24 11:37:39,671 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f5e31a08f10>>, False])
2017-10-24 11:37:39,671 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f5e31a08f10>>, 'eng'])
2017-10-24 11:37:39,671 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 11:37:39,671 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 11:37:39,671 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 11:37:39,671 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f5e31a08f10>>, True, 'disabled'])
2017-10-24 11:37:39,671 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f5e31a08f10>>])
2017-10-24 11:37:39,671 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f5e31a08f10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f5e31a08f10>>, 'eng', False, True])
2017-10-24 11:37:39,672 - session_2017-10-24T11_37_39_0 - DEBUG - Backend initialized
2017-10-24 11:37:39,672 - session_2017-10-24T11_37_39_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 11:37:39,672 - session_2017-10-24T11_37_39_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 11:37:39,672 - session_2017-10-24T11_37_39_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 11:37:39,672 - session_2017-10-24T11_37_39_0 - DEBUG - Backend uses language 'eng'
2017-10-24 11:37:39,672 - session_2017-10-24T11_37_39_0 - DEBUG - running module InterpretModule
2017-10-24 11:37:39,672 - session_2017-10-24T11_37_39_0 - DEBUG - running module DmeModule
2017-10-24 11:37:39,674 - session_2017-10-24T11_37_39_0 - DEBUG - running module DeviceManager
2017-10-24 11:37:39,674 - session_2017-10-24T11_37_39_0 - DEBUG - running module GenerateModule
2017-10-24 11:37:39,674 - session_2017-10-24T11_37_39_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 11:37:39,674 - session_2017-10-24T11_37_39_0 - DEBUG - running module GuiBackend
2017-10-24 11:37:39,675 - session_2017-10-24T11_37_39_0 - DEBUG - running module CogloadModule
2017-10-24 11:37:39,675 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:39,675 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:39,676 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 11:37:39,676 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 11:37:39,676 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 11:37:39,677 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:39,677 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:39,708 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 11:37:39,708 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:39,709 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 11:37:39,710 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,710 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 11:37:39,710 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 11:37:39,710 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 11:37:39,711 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:39,711 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:39,713 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 11:37:39,714 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:39,714 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:37:39,714 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,715 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,715 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,715 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:37:39,715 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:37:39,716 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837859.72
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:39,716 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:39,716 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:37:39,716 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:37:39,719 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:39,719 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:37:39,720 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:37:39,721 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:37:39,722 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:37:39,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:39,724 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:37:39,724 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:39,724 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:39,727 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:37:39,727 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:39,729 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:37:39,729 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:39,729 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:39,730 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:39,730 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:37:39,730 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:39,730 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:39,730 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:39,730 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:39,730 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:37:39,731 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:39,731 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: select
2017-10-24 11:37:39,732 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837859.72
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:39,732 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:37:39,736 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:37:39,736 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:39,738 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:37:39,738 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:39,740 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:37:39,740 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:39,743 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:37:39,743 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:39,744 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:39,744 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:37:39,745 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:39,746 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:37:39,746 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:37:39,748 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 11:37:39,748 - session_2017-10-24T11_37_39_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:37:39,748 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:37:39,749 - session_2017-10-24T11_37_39_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,749 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,749 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,749 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,749 - session_2017-10-24T11_37_39_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:37:39,749 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 11:37:39,749 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:37:39,750 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:37:39,750 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:37:39,750 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 11:37:39,750 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:39,750 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:37:39,751 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:39,751 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:37:39,752 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:39,752 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 11:37:39,753 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:37:39,753 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:37:39,753 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:39,753 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:39,754 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:39,754 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:37:39,754 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:37:39,754 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:37:39,754 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:37:39,754 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 11:37:39,755 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 11:37:39,755 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:37:39,755 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 11:37:39,756 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:37:39,756 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:39,758 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:39,758 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:37:39,758 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:37:39,758 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:37:39,758 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:37:39,758 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:37:39,758 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:37:39,759 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend generated message []
2017-10-24 11:37:39,759 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:37:39,759 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posted event
2017-10-24 11:37:39,759 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 11:37:39,759 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:37:39,759 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:37:39,760 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:39,760 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 11:37:39,761 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:37:39,761 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:37:39,762 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:39,762 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:39,801 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:37:39,801 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:39,801 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 11:37:39,801 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 11:37:39,801 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:37:39,801 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:37:39,801 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:37:39,802 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:37:39,802 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 11:37:39,803 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837859.8
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:39,803 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:39,803 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:37:39,804 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:37:39,806 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 11:37:39,806 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:37:39,806 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:37:39,809 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:37:39,810 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:39,813 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:37:39,813 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:37:39,813 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:39,813 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:37:39,813 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:39,813 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:39,816 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 11:37:39,816 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:37:39,816 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:39,817 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:37:39,817 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:39,817 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:37:39,817 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:37:39,817 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:39,817 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:39,817 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:39,817 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:37:39,818 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:37:39,818 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:39,818 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:37:39,818 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:39,818 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:39,818 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:37:39,818 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:39,818 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:39,819 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:39,819 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:39,819 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:37:39,821 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:39,821 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:39,821 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:37:39,821 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:37:39,821 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:39,821 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:37:39,822 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:39,822 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:37:39,823 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:37:39,823 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:37:39,823 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:44,676 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:37:44,676 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:44,676 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 11:37:44,677 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:37:44,677 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:37:44,677 - session_2017-10-24T11_37_39_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:37:44,677 - session_2017-10-24T11_37_39_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:37:44,683 - session_2017-10-24T11_37_39_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:37:44,683 - session_2017-10-24T11_37_39_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 11:37:44,683 - session_2017-10-24T11_37_39_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 11:37:44,683 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:37:44,684 - session_2017-10-24T11_37_39_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:37:44,684 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:37:44,684 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:37:44,684 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:37:44,684 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:37:44,684 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:37:44,685 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 11:37:44,685 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:44,685 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 11:37:44,686 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:37:44,686 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:37:44,687 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:37:44,687 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:37:44,688 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837864.69
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:44,689 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:44,692 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 11:37:44,692 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:44,695 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 11:37:44,696 - session_2017-10-24T11_37_39_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:37:44,696 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:37:44,700 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 11:37:44,700 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:37:44,705 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:37:44,706 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:37:44,706 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:37:44,709 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:44,710 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:37:44,710 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:37:44,715 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 11:37:44,715 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:37:44,715 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:37:44,715 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:37:44,715 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:37:44,715 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:37:44,715 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 11:37:44,715 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:37:44,716 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 11:37:44,716 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:44,719 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 11:37:44,719 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:37:44,720 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:44,723 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 11:37:44,723 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:37:44,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:44,727 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:37:44,727 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:37:44,727 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:37:44,727 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:44,727 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:44,727 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:44,727 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:37:44,727 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:37:44,728 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:44,728 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:37:44,728 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:44,728 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:44,728 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:37:44,731 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:37:44,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:44,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:44,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:44,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:44,732 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:37:44,732 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 11:37:44,732 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:44,732 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: select
2017-10-24 11:37:44,733 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837864.69
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:44,733 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:37:44,737 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:37:44,737 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:44,740 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:37:44,740 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:44,743 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 11:37:44,743 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:44,744 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:44,746 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 11:37:44,747 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:44,751 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:37:44,751 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:44,751 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:44,751 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:37:44,753 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:44,753 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:37:44,753 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:37:44,756 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:44,756 - session_2017-10-24T11_37_39_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 11:37:44,757 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:37:44,757 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 11:37:44,757 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 11:37:44,757 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:37:44,757 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:44,758 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:37:44,758 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:44,758 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:37:44,759 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:44,759 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:37:44,760 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:37:44,760 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:37:44,760 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:44,760 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:44,762 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:44,762 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 11:37:44,762 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:37:44,762 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:37:44,762 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:37:44,762 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:37:44,762 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:37:44,762 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 11:37:44,763 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 11:37:44,763 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 11:37:44,763 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 11:37:44,763 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:37:44,764 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 11:37:44,764 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 11:37:44,765 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:44,767 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:44,767 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:37:44,767 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 11:37:44,767 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 11:37:44,768 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:37:44,768 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:37:44,768 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:37:44,768 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:37:44,768 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:37:44,768 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend generated message []
2017-10-24 11:37:44,769 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:37:44,769 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posted event
2017-10-24 11:37:44,769 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 11:37:44,769 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 11:37:44,769 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:37:44,769 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:44,770 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 11:37:44,770 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:37:44,770 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:37:44,770 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:44,771 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:44,787 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:37:44,788 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:44,788 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 11:37:44,788 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 11:37:44,788 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:37:44,788 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:37:44,788 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:37:44,789 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:37:44,789 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 11:37:44,790 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837864.79
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:44,790 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:44,790 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:37:44,791 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:37:44,797 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:37:44,797 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:37:44,797 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:37:44,799 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:37:44,800 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:44,804 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:37:44,804 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:37:44,804 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:44,804 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:37:44,805 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:44,805 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:44,809 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:37:44,809 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:37:44,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:44,809 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:37:44,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:44,809 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:44,812 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 11:37:44,813 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:37:44,813 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:44,813 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:37:44,813 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:37:44,814 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:44,815 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:44,815 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:37:44,815 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:44,815 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:44,815 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:44,815 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:44,816 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:37:44,818 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:44,818 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:44,818 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:37:44,818 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:37:44,818 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:44,818 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:37:44,819 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:44,819 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:37:44,819 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:37:44,820 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:37:44,820 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:55,343 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:37:55,343 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:55,343 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-24 11:37:55,344 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 11:37:55,344 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 11:37:55,344 - session_2017-10-24T11_37_39_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:37:55,344 - session_2017-10-24T11_37_39_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:37:55,347 - session_2017-10-24T11_37_39_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:37:55,347 - session_2017-10-24T11_37_39_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-24 11:37:55,347 - session_2017-10-24T11_37_39_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-24 11:37:55,347 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:37:55,347 - session_2017-10-24T11_37_39_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:37:55,348 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 11:37:55,348 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:37:55,348 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:37:55,348 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:37:55,348 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:37:55,348 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 11:37:55,349 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:55,349 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 11:37:55,349 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:37:55,350 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:37:55,350 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:37:55,350 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:37:55,351 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837875.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:55,352 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:55,356 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-24 11:37:55,356 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:55,361 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-24 11:37:55,368 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-24 11:37:55,369 - session_2017-10-24T11_37_39_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:37:55,369 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:37:55,372 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 11:37:55,372 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:37:55,377 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 11:37:55,378 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:37:55,378 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:37:55,380 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:55,381 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:37:55,381 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:37:55,387 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 11:37:55,387 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:37:55,387 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:37:55,387 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:37:55,388 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:37:55,388 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:37:55,388 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 11:37:55,388 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:37:55,388 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 11:37:55,388 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:55,391 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 11:37:55,392 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:37:55,392 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:55,396 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 11:37:55,396 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:37:55,399 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:37:55,399 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:55,399 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:37:55,399 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:37:55,399 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:55,399 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:55,399 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:55,399 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:37:55,400 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:37:55,400 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:55,400 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:37:55,400 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:55,403 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:37:55,403 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:55,403 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:55,406 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 11:37:55,406 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:55,406 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:55,406 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:55,406 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:37:55,409 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:37:55,409 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:55,409 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:55,409 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:55,410 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:55,410 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:37:55,410 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 11:37:55,410 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 11:37:55,410 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 11:37:55,410 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: select
2017-10-24 11:37:55,411 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837875.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:55,411 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:37:55,416 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose a step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 11:37:55,416 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:55,419 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:37:55,419 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:55,422 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 11:37:55,422 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:55,425 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:37:55,425 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:55,425 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:55,425 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:37:55,427 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:55,427 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:37:55,427 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:37:55,430 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 11:37:55,430 - session_2017-10-24T11_37_39_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-24 11:37:55,430 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:37:55,431 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 11:37:55,431 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 11:37:55,431 - session_2017-10-24T11_37_39_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 11:37:55,431 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-24 11:37:55,431 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 11:37:55,431 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:37:55,432 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:55,432 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-24 11:37:55,432 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 11:37:55,432 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:37:55,434 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:55,434 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:37:55,434 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:37:55,435 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:37:55,435 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:55,435 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:55,437 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:55,437 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-24 11:37:55,437 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 11:37:55,437 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 11:37:55,438 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-24 11:37:55,438 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-24 11:37:55,439 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:55,440 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:37:55,441 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:55,441 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:37:55,441 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-24 11:37:55,442 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-24 11:37:55,442 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 11:37:55,443 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f5e302ad560>]
2017-10-24 11:37:55,443 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f5e302ad560>], sender=GuiBackend, reason=None)
2017-10-24 11:37:55,443 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posted event
2017-10-24 11:37:55,443 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-24 11:37:55,443 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-24 11:37:55,444 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:37:55,444 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:55,444 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:37:55,444 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:37:55,445 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 11:37:55,445 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:55,445 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f5e302ad560>], sender=GuiBackend, reason=None))
2017-10-24 11:37:55,445 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f5e302ad560>], sender=GuiBackend, reason=None)
2017-10-24 11:37:55,446 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:37:55,447 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:55,447 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:55,453 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:37:55,454 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:55,454 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-24 11:37:55,454 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-24 11:37:55,454 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:37:55,454 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 11:37:55,454 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 11:37:55,454 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 11:37:55,455 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-24 11:37:55,456 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837875.46
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:55,456 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:55,456 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:37:55,457 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:37:55,463 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:37:55,463 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:37:55,463 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:37:55,466 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:55,466 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:37:55,466 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:37:55,466 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:37:55,466 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:37:55,467 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:37:55,467 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:37:55,467 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:37:55,467 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:37:55,467 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:37:55,467 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:37:55,467 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:55,470 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose a step")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:37:55,470 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:37:55,470 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                            ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:55,474 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:37:55,475 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:37:55,475 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:55,475 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:37:55,475 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:55,475 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:55,475 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:37:55,475 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:55,475 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:55,476 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:55,476 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:55,476 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:37:55,478 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 11:37:55,478 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 11:37:55,479 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:37:55,479 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-24 11:37:55,479 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 11:37:55,479 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:37:55,480 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:37:55,480 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 11:37:55,480 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:37:55,481 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:37:55,482 - session_2017-10-24T11_37_39_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f5e302fd830>:1.0
2017-10-24 11:37:55,482 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:37:56,482 - session_2017-10-24T11_37_39_0 - DEBUG - Timeout fired
2017-10-24 11:37:56,482 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:37:56,482 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:37:56,482 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:37:56,483 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:37:56,484 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837876.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:56,484 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:37:56,484 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:37:56,486 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:37:56,486 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:37:56,490 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 11:37:56,491 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:37:56,491 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:37:56,493 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:37:56,494 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:37:56,494 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:37:56,494 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:37:56,494 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:37:56,494 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:56,494 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:56,494 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:56,495 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:37:56,495 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:37:56,495 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:37:56,496 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:37:56,496 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:56,498 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:37:56,499 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:56,499 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:56,502 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose a step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 11:37:56,502 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:56,502 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:56,502 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:56,503 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:37:56,503 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:37:56,503 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:37:56,503 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:37:56,503 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:37:56,503 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:37:56,503 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:56,503 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: select
2017-10-24 11:37:56,504 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837876.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:37:56,505 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:37:56,509 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose a step")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:37:56,509 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:37:56,512 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:37:56,512 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:56,514 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:37:56,515 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:56,517 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:37:56,517 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:37:56,518 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:37:56,518 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:37:56,520 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:37:56,520 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:37:56,520 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:37:56,522 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 11:37:56,523 - session_2017-10-24T11_37_39_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:37:56,523 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:38:04,557 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:38:04,558 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:38:04,558 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 11:38:04,558 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:38:04,559 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:38:04,559 - session_2017-10-24T11_37_39_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:38:04,559 - session_2017-10-24T11_37_39_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:38:04,561 - session_2017-10-24T11_37_39_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:38:04,561 - session_2017-10-24T11_37_39_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 11:38:04,561 - session_2017-10-24T11_37_39_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 11:38:04,561 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:38:04,561 - session_2017-10-24T11_37_39_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:38:04,562 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:38:04,562 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:38:04,562 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:38:04,562 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:38:04,563 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,564 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 11:38:04,564 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:38:04,564 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:38:04,564 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,564 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,565 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,565 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 11:38:04,565 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 11:38:04,566 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:38:04,566 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:38:04,566 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 11:38:04,567 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 11:38:04,567 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:38:04,568 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 11:38:04,568 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:38:04,569 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,571 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,571 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:38:04,571 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:38:04,571 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 11:38:04,571 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 11:38:04,571 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:38:04,572 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:38:04,572 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f5e302ad320>]
2017-10-24 11:38:04,572 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f5e302ad320>], sender=GuiBackend, reason=None)
2017-10-24 11:38:04,572 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posted event
2017-10-24 11:38:04,572 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:38:04,573 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:38:04,573 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 11:38:04,573 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 11:38:04,573 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 11:38:04,573 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,573 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 11:38:04,574 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:38:04,574 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:38:04,576 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,576 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f5e302ad320>], sender=GuiBackend, reason=None))
2017-10-24 11:38:04,576 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f5e302ad320>], sender=GuiBackend, reason=None)
2017-10-24 11:38:04,577 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:38:04,581 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,581 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:38:04,584 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:38:04,584 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:38:04,584 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 11:38:04,584 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 11:38:04,584 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:38:04,585 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:38:04,585 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:38:04,585 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:38:04,586 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 11:38:04,587 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837884.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:38:04,587 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:38:04,587 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:38:04,587 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:38:04,591 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:38:04,591 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:38:04,591 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:38:04,594 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:38:04,594 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:38:04,594 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:38:04,594 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:38:04,595 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:38:04,595 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:38:04,595 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:38:04,595 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:38:04,595 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:38:04,595 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:38:04,595 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:38:04,595 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:38:04,599 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:38:04,599 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:38:04,600 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:38:04,600 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:38:04,600 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,600 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:38:04,603 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 11:38:04,603 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:38:04,603 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:38:04,604 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:38:04,605 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:38:04,605 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:04,605 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,605 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:38:04,605 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:38:04,605 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:04,605 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,606 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:38:04,606 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:38:04,608 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 11:38:04,609 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:38:04,609 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:38:04,609 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:38:04,609 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:38:04,609 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:38:04,609 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,610 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:38:04,610 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:38:04,610 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:38:04,611 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,611 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,611 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,611 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:38:04,613 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837884.61
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:38:04,613 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:38:04,616 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 11:38:04,616 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:38:04,620 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 11:38:04,620 - session_2017-10-24T11_37_39_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:38:04,620 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:38:04,625 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 11:38:04,625 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:38:04,631 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:38:04,632 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:38:04,632 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:38:04,635 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:38:04,635 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:38:04,635 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:38:04,641 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 11:38:04,642 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:38:04,645 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-24 11:38:04,645 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:38:04,645 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:38:04,648 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 11:38:04,648 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:38:04,648 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,651 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 -------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.plan: Stack([findout(?X.goal(X))])
?                          ^ ^^^ ^    ^^ ^
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^ ^^^^ ^^^    ^ ^^^^^^
-- END TIS changes --
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:38:04,652 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:04,656 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 11:38:04,656 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,657 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:04,657 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,657 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:38:04,659 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:38:04,659 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:38:04,659 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:04,660 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,660 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:38:04,660 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:38:04,660 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 11:38:04,660 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 11:38:04,660 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: select
2017-10-24 11:38:04,661 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837884.61
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:38:04,661 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:38:04,666 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                --- ^ --------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^^^
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 11:38:04,666 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:38:04,668 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:38:04,668 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:38:04,671 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 11:38:04,671 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:38:04,674 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:38:04,675 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:38:04,675 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:38:04,675 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:38:04,678 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:38:04,678 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:38:04,678 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:38:04,680 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 11:38:04,681 - session_2017-10-24T11_37_39_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 11:38:04,681 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:38:04,681 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 11:38:04,681 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 11:38:04,681 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:38:04,682 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,682 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 11:38:04,682 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 11:38:04,682 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:38:04,683 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,683 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:38:04,684 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:38:04,684 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:38:04,684 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,684 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,685 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,685 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 11:38:04,686 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 11:38:04,686 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 11:38:04,686 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule: Move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok  Step one: Chop onions and garlic..'
2017-10-24 11:38:04,686 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 11:38:04,687 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,689 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:38:04,689 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:38:04,690 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:38:04,690 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 11:38:04,690 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 11:38:04,690 - session_2017-10-24T11_37_39_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 11:38:04,691 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f5e302ad5f0>]
2017-10-24 11:38:04,691 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f5e302ad5f0>], sender=GuiBackend, reason=None)
2017-10-24 11:38:04,691 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posted event
2017-10-24 11:38:04,691 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None))
2017-10-24 11:38:04,691 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 11:38:04,691 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:38:04,692 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,692 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:38:04,693 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:38:04,693 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok  Step one: Chop onions and garlic.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 11:38:04,693 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,693 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f5e302ad5f0>], sender=GuiBackend, reason=None))
2017-10-24 11:38:04,694 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f5e302ad5f0>], sender=GuiBackend, reason=None)
2017-10-24 11:38:04,694 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok  Step one: Chop onions and garlic.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:38:04,694 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,695 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:38:04,710 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:38:04,711 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:38:04,711 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None))
2017-10-24 11:38:04,712 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None)
2017-10-24 11:38:04,712 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:38:04,712 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 11:38:04,712 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 11:38:04,712 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 11:38:04,713 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None))
2017-10-24 11:38:04,714 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837884.71
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:38:04,714 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:38:04,714 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:38:04,714 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:38:04,721 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:38:04,721 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:38:04,721 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:38:04,723 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:38:04,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:38:04,723 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:38:04,724 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:38:04,724 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:38:04,724 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:38:04,724 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:38:04,724 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:38:04,724 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:38:04,724 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:38:04,725 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:38:04,725 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:38:04,727 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {say_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:38:04,727 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:38:04,727 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:38:04,731 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:38:04,732 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:38:04,732 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:04,732 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,732 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:38:04,732 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:38:04,732 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:04,733 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:04,733 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:38:04,733 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:38:04,735 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 11:38:04,735 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 11:38:04,735 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:38:04,735 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 11:38:04,736 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 11:38:04,736 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:38:04,736 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:38:04,737 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 11:38:04,737 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:38:04,737 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:38:04,738 - session_2017-10-24T11_37_39_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f5e302b9c20>:1.0
2017-10-24 11:38:04,738 - session_2017-10-24T11_37_39_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:38:05,738 - session_2017-10-24T11_37_39_0 - DEBUG - Timeout fired
2017-10-24 11:38:05,738 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:38:05,739 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:38:05,739 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:38:05,739 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:38:05,740 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837885.74
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:38:05,740 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:38:05,741 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:38:05,743 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:38:05,743 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:38:05,747 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 11:38:05,747 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:38:05,748 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - INFO - BEGIN integrate_moves
2017-10-24 11:38:05,751 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:integrate
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:38:05,752 - session_2017-10-24T11_37_39_0 - INFO - breaking out of accommodate
2017-10-24 11:38:05,753 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:38:05,753 - session_2017-10-24T11_37_39_0 - INFO - END integrate_moves
2017-10-24 11:38:05,753 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:05,756 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:38:05,756 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:05,756 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:05,758 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 11:38:05,758 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:05,759 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:05,759 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:05,759 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:38:05,759 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:38:05,759 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:38:05,759 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:38:05,760 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:38:05,760 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:38:05,760 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:38:05,760 - session_2017-10-24T11_37_39_0 - INFO - running ISU module: select
2017-10-24 11:38:05,761 - session_2017-10-24T11_37_39_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f5e311d1090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f5e31a08b90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837885.74
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:38:05,762 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:38:05,765 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:38:05,765 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_action
2017-10-24 11:38:05,768 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:38:05,768 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:38:05,770 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:38:05,771 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:38:05,774 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:38:05,774 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:38:05,774 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:select_move
2017-10-24 11:38:05,774 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:38:05,776 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:38:05,776 - session_2017-10-24T11_37_39_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:38:05,776 - session_2017-10-24T11_37_39_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:38:05,779 - session_2017-10-24T11_37_39_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 11:38:05,779 - session_2017-10-24T11_37_39_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:38:05,779 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:40:24,121 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:40:24,121 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 11:40:24,122 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:40:24,122 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:40:24,122 - session_2017-10-24T11_37_39_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 11:40:24,122 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:40:24,123 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 11:40:24,124 - session_2017-10-24T11_37_39_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:40:24,124 - session_2017-10-24T11_37_39_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 11:40:24,124 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:40:24,124 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:40:24,124 - session_2017-10-24T11_37_39_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:40:24,125 - session_2017-10-24T11_37_39_0 - DEBUG - Sent.
2017-10-24 11:40:24,126 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 11:40:24,126 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:40:24,126 - session_2017-10-24T11_37_39_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:40:24,126 - session_2017-10-24T11_37_39_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:40:24,127 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:40:24,128 - session_2017-10-24T11_37_39_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:40:24,129 - session_2017-10-24T11_37_39_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 11:40:24,130 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 11:40:24,131 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:40:24,131 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:40:24,131 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 11:40:24,131 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 11:40:24,131 - session_2017-10-24T11_37_39_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 11:40:24,131 - session_2017-10-24T11_37_39_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
