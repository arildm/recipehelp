2017-10-24 16:30:02,619 - session_2017-10-24T16_30_02_0 - DEBUG - Backend()
2017-10-24 16:30:02,619 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.initialize()
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7ff3cf19af10>>, False])
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7ff3cf19af10>>, 'eng'])
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7ff3cf19af10>>, True, 'disabled'])
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7ff3cf19af10>>])
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7ff3cf19af10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7ff3cf19af10>>, 'eng', False, True])
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend initialized
2017-10-24 16:30:02,651 - session_2017-10-24T16_30_02_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 16:30:02,652 - session_2017-10-24T16_30_02_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 16:30:02,652 - session_2017-10-24T16_30_02_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 16:30:02,652 - session_2017-10-24T16_30_02_0 - DEBUG - Backend uses language 'eng'
2017-10-24 16:30:02,652 - session_2017-10-24T16_30_02_0 - DEBUG - running module InterpretModule
2017-10-24 16:30:02,652 - session_2017-10-24T16_30_02_0 - DEBUG - running module DmeModule
2017-10-24 16:30:02,654 - session_2017-10-24T16_30_02_0 - DEBUG - running module DeviceManager
2017-10-24 16:30:02,654 - session_2017-10-24T16_30_02_0 - DEBUG - running module GenerateModule
2017-10-24 16:30:02,654 - session_2017-10-24T16_30_02_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 16:30:02,654 - session_2017-10-24T16_30_02_0 - DEBUG - running module GuiBackend
2017-10-24 16:30:02,654 - session_2017-10-24T16_30_02_0 - DEBUG - running module CogloadModule
2017-10-24 16:30:02,655 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:02,655 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:02,655 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 16:30:02,656 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 16:30:02,656 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 16:30:02,657 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:02,657 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:02,688 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 16:30:02,689 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:02,689 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 16:30:02,690 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,690 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 16:30:02,690 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 16:30:02,690 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 16:30:02,691 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:02,691 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:02,696 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 16:30:02,697 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:02,698 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:30:02,698 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,698 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,698 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,698 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:30:02,698 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:30:02,699 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855402.7
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:02,699 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:02,699 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:02,700 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:02,702 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:02,702 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:02,702 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:02,704 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:02,705 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:02,706 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:02,706 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:02,706 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:02,706 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:02,708 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:30:02,709 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:02,711 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:30:02,711 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:02,711 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:02,711 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:02,712 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:02,712 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:02,712 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:02,712 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:02,712 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:02,712 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:02,712 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:02,713 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:02,713 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855402.7
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:02,713 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:02,717 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:02,717 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:02,720 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:02,720 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:02,722 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:30:02,722 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:02,725 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:02,725 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:02,725 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:02,725 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:02,728 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:02,728 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:02,728 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:02,730 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 16:30:02,730 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:30:02,731 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:30:02,731 - session_2017-10-24T16_30_02_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,731 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,731 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,731 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,731 - session_2017-10-24T16_30_02_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:30:02,731 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 16:30:02,731 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:30:02,732 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:30:02,732 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:30:02,732 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 16:30:02,732 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:02,732 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:02,733 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:02,733 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:02,734 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:02,735 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 16:30:02,737 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:30:02,737 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:30:02,737 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:02,737 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:02,738 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:02,738 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:30:02,739 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:30:02,739 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:30:02,739 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:02,739 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:30:02,739 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:30:02,740 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:02,740 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 16:30:02,740 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:30:02,741 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:02,743 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:02,743 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:30:02,743 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:30:02,743 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:30:02,743 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:30:02,744 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:30:02,744 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:02,744 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend generated message []
2017-10-24 16:30:02,744 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:30:02,744 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posted event
2017-10-24 16:30:02,744 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 16:30:02,744 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:30:02,745 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:30:02,745 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:02,745 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 16:30:02,745 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:30:02,746 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:30:02,746 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:02,747 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:02,806 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:30:02,807 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:02,807 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 16:30:02,808 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 16:30:02,808 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:30:02,808 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:30:02,808 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:30:02,808 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:30:02,808 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 16:30:02,809 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855402.81
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:02,809 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:02,810 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:02,810 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:02,812 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 16:30:02,812 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:02,812 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:02,814 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:02,814 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:02,815 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:02,819 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:30:02,819 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:02,819 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:02,819 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:02,819 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:02,819 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:02,822 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 16:30:02,822 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:02,822 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:02,823 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:02,824 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:02,824 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:02,824 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:02,824 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:02,824 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:02,824 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:02,824 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:02,825 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:02,825 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:02,825 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:02,827 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:02,827 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:02,827 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:02,827 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:02,828 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:02,828 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:02,828 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:02,828 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:30:02,829 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:02,829 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:02,829 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:06,915 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:30:06,915 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:06,915 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 16:30:06,916 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:06,916 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:06,916 - session_2017-10-24T16_30_02_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:30:06,916 - session_2017-10-24T16_30_02_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:30:06,921 - session_2017-10-24T16_30_02_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:30:06,922 - session_2017-10-24T16_30_02_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 16:30:06,922 - session_2017-10-24T16_30_02_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 16:30:06,922 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:30:06,922 - session_2017-10-24T16_30_02_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:30:06,922 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:06,923 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:30:06,923 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:30:06,923 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:30:06,923 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:30:06,923 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 16:30:06,924 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:06,924 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 16:30:06,924 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:06,924 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:06,925 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:06,925 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:06,926 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855406.93
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:06,927 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:06,930 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 16:30:06,930 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:06,934 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 16:30:06,935 - session_2017-10-24T16_30_02_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:30:06,935 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:06,939 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 16:30:06,939 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:06,944 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:30:06,944 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:06,944 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:06,946 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:06,946 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:06,946 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:06,951 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 16:30:06,952 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:06,955 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:06,955 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:06,955 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:06,959 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 16:30:06,959 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:06,960 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:06,964 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:30:06,964 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:06,964 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:06,964 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:06,964 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:06,965 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:06,965 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:06,965 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:06,965 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:06,965 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:06,965 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:06,966 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:06,966 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:06,969 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:30:06,969 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:06,969 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:06,970 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:06,970 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:06,970 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:06,970 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 16:30:06,970 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:06,970 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:06,971 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855406.93
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:06,971 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:06,976 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:30:06,976 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:06,980 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:06,980 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:06,983 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 16:30:06,983 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:06,983 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:06,987 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 16:30:06,987 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:06,990 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:06,990 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:06,990 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:06,990 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:06,992 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:06,992 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:06,992 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:06,995 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:06,995 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 16:30:06,995 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:06,996 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 16:30:06,996 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 16:30:06,996 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:30:06,996 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:06,996 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:06,997 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:06,997 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:06,998 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:06,998 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:30:06,999 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:06,999 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:30:06,999 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:06,999 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:07,001 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:07,001 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 16:30:07,001 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:30:07,001 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:30:07,001 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:30:07,001 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:30:07,001 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:07,001 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:30:07,002 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:30:07,002 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:30:07,003 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:30:07,003 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:07,005 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 16:30:07,005 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 16:30:07,006 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:07,009 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:07,009 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:30:07,009 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 16:30:07,010 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 16:30:07,010 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:30:07,010 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:30:07,010 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:30:07,010 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:30:07,010 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:07,011 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend generated message []
2017-10-24 16:30:07,011 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:30:07,011 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posted event
2017-10-24 16:30:07,011 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 16:30:07,011 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 16:30:07,011 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:30:07,012 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:07,012 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 16:30:07,012 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:30:07,012 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:30:07,013 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:07,013 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:07,017 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:30:07,018 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:07,018 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 16:30:07,018 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 16:30:07,018 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:30:07,018 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:30:07,018 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:30:07,018 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:30:07,019 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 16:30:07,020 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855407.02
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:07,021 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:07,021 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:07,021 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:07,027 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:07,027 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:07,028 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:07,031 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:07,032 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:07,032 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:07,035 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:30:07,035 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:07,036 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:07,036 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:07,036 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:07,036 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:07,040 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:07,040 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:07,040 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:07,040 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:07,040 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:07,041 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:07,044 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 16:30:07,044 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:07,044 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:07,044 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:07,044 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:07,044 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:07,045 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:07,046 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:07,046 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:07,046 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:07,046 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:07,046 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:07,046 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:07,049 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:07,049 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:07,049 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:07,049 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:07,049 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:07,049 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:07,051 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:07,051 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:30:07,051 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:07,051 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:07,051 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:10,289 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:30:10,289 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:10,289 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-24 16:30:10,289 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:10,289 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:10,290 - session_2017-10-24T16_30_02_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:30:10,290 - session_2017-10-24T16_30_02_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:30:10,292 - session_2017-10-24T16_30_02_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:30:10,292 - session_2017-10-24T16_30_02_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-24 16:30:10,292 - session_2017-10-24T16_30_02_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-24 16:30:10,293 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:30:10,293 - session_2017-10-24T16_30_02_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:30:10,293 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:10,293 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:30:10,294 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:30:10,294 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:30:10,294 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:30:10,294 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 16:30:10,294 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:10,294 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 16:30:10,295 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:10,295 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:10,296 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:10,296 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:10,297 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855410.3
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:10,297 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:10,301 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-24 16:30:10,301 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:10,305 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-24 16:30:10,310 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-24 16:30:10,311 - session_2017-10-24T16_30_02_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:30:10,311 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:10,314 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 16:30:10,314 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:10,318 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 16:30:10,318 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:10,318 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:10,321 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:10,321 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:10,321 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:10,327 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 16:30:10,327 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:10,328 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:10,328 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:10,328 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:10,328 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:10,328 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 16:30:10,329 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:10,329 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 16:30:10,329 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:10,333 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 16:30:10,333 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:10,333 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:10,337 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 16:30:10,337 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:10,341 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:30:10,341 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:10,341 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:10,341 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:10,341 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:10,342 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:10,342 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:10,342 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:10,342 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:10,342 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:10,342 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:10,342 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:10,345 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose step1")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:30:10,346 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:10,346 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:10,348 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 16:30:10,348 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:10,349 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:10,349 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:10,349 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:10,352 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:30:10,352 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:10,352 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:10,353 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:10,353 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:10,353 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:10,353 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:30:10,353 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 16:30:10,353 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:30:10,353 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:10,354 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855410.3
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:10,354 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:10,358 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose step1")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 16:30:10,358 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:10,361 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:10,361 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:10,364 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 16:30:10,364 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:10,367 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:10,367 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:10,367 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:10,368 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:10,371 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:10,371 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:10,371 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:10,373 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:30:10,374 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 16:30:10,374 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:10,374 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 16:30:10,374 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:30:10,374 - session_2017-10-24T16_30_02_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:30:10,375 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-24 16:30:10,375 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 16:30:10,375 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:30:10,375 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:10,375 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 16:30:10,376 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:30:10,376 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:10,377 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:10,377 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:30:10,378 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:10,378 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:30:10,378 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:10,379 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:10,380 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:10,380 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 16:30:10,380 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:30:10,380 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:30:10,381 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp') generated as u'Ok chose step1.'
2017-10-24 16:30:10,381 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 16:30:10,382 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:10,383 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:10,384 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:10,384 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:30:10,384 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 16:30:10,384 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 16:30:10,384 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:30:10,385 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc1f0e18>]
2017-10-24 16:30:10,385 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc1f0e18>], sender=GuiBackend, reason=None)
2017-10-24 16:30:10,385 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posted event
2017-10-24 16:30:10,385 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None))
2017-10-24 16:30:10,385 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 16:30:10,386 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose step1."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:30:10,386 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:10,386 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:30:10,387 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:10,387 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose step1."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:30:10,387 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:10,387 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc1f0e18>], sender=GuiBackend, reason=None))
2017-10-24 16:30:10,388 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc1f0e18>], sender=GuiBackend, reason=None)
2017-10-24 16:30:10,388 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose step1."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:30:10,389 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:10,389 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:10,409 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose step1."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:30:10,409 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:10,409 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None))
2017-10-24 16:30:10,409 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None)
2017-10-24 16:30:10,410 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:30:10,410 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:30:10,410 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:30:10,410 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:30:10,410 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None))
2017-10-24 16:30:10,411 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855410.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:10,411 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:10,412 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:10,412 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:10,417 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:10,417 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:10,417 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:10,420 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:10,420 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:10,420 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:10,420 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:10,420 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:10,420 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:10,420 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:10,420 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:10,421 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:10,421 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:10,421 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:10,421 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:10,423 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose step1")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:10,424 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:10,424 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:10,427 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose step1")}
+ tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
?                                           ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 16:30:10,427 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:10,427 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:10,427 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:10,427 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:10,427 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:10,428 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:10,428 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:10,428 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:10,428 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:10,428 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:10,428 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:10,428 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:10,429 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:10,429 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:10,429 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:10,429 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:10,429 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:10,429 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:10,429 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:10,432 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:30:10,432 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:30:10,432 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:10,433 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 16:30:10,433 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:30:10,433 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:10,433 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:10,433 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:30:10,434 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:10,434 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:10,435 - session_2017-10-24T16_30_02_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7ff3cca3a368>:1.0
2017-10-24 16:30:10,435 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:11,435 - session_2017-10-24T16_30_02_0 - DEBUG - Timeout fired
2017-10-24 16:30:11,435 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:11,435 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:11,435 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:11,435 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:30:11,437 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855411.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:11,437 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:11,437 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:11,439 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:11,439 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:11,443 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 16:30:11,443 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:11,444 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:11,446 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:11,446 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:11,446 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:11,446 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:11,446 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:11,447 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:11,448 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:11,448 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:11,448 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:11,448 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:11,448 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:11,448 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:11,451 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:30:11,451 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:11,452 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:11,454 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose step1")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 16:30:11,454 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:11,454 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:11,455 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:11,455 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:11,455 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:11,455 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:11,455 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:11,455 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:11,455 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:11,456 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:11,456 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:11,457 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855411.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:11,457 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:11,461 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose step1")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:11,461 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:11,463 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:11,463 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:11,467 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:30:11,467 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:11,470 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:11,470 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:11,470 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:11,470 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:11,472 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:11,473 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:11,473 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:11,475 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:30:11,475 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:30:11,475 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:30:18,224 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:30:18,224 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:18,224 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 16:30:18,224 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:18,225 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:18,225 - session_2017-10-24T16_30_02_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:30:18,225 - session_2017-10-24T16_30_02_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:30:18,227 - session_2017-10-24T16_30_02_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:30:18,227 - session_2017-10-24T16_30_02_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 16:30:18,227 - session_2017-10-24T16_30_02_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 16:30:18,227 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:30:18,228 - session_2017-10-24T16_30_02_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:30:18,228 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:18,228 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:18,228 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,228 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:18,229 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,229 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:30:18,230 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:30:18,230 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:30:18,230 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,230 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,231 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,231 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 16:30:18,232 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 16:30:18,232 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:30:18,232 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:18,232 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 16:30:18,232 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 16:30:18,233 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:18,233 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 16:30:18,233 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:30:18,234 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,235 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,235 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:30:18,236 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:30:18,236 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 16:30:18,236 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 16:30:18,236 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:30:18,236 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:30:18,236 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7ff3cc217f80>]
2017-10-24 16:30:18,236 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7ff3cc217f80>], sender=GuiBackend, reason=None)
2017-10-24 16:30:18,237 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posted event
2017-10-24 16:30:18,237 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:30:18,237 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:30:18,237 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:30:18,237 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:30:18,237 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:30:18,238 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,239 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 16:30:18,239 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:30:18,239 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:30:18,240 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,240 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7ff3cc217f80>], sender=GuiBackend, reason=None))
2017-10-24 16:30:18,240 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7ff3cc217f80>], sender=GuiBackend, reason=None)
2017-10-24 16:30:18,240 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:30:18,242 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,242 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:18,268 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:30:18,268 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:18,268 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 16:30:18,268 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 16:30:18,269 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:30:18,269 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:30:18,269 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:30:18,269 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:30:18,270 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 16:30:18,271 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855418.27
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:18,271 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:18,271 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:18,272 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:18,275 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:30:18,275 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:18,275 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:18,278 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:18,279 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:18,279 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:18,282 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:30:18,282 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:18,282 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,283 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:18,283 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,283 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:18,286 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 16:30:18,286 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:18,286 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,286 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:18,286 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:18,287 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,288 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,288 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:18,288 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,288 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,288 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,288 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:18,288 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:18,291 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:30:18,291 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,291 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:18,291 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:18,291 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,291 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:18,292 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,292 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:30:18,293 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:18,293 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:30:18,293 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,293 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,294 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,294 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:18,295 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855418.29
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:18,295 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:18,299 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 16:30:18,299 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:18,304 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 16:30:18,304 - session_2017-10-24T16_30_02_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:30:18,305 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:18,312 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 16:30:18,313 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:18,319 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:30:18,319 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:18,319 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:18,322 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:18,322 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:18,322 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:18,327 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 16:30:18,327 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:18,327 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:18,328 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:18,328 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:18,328 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:18,328 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 16:30:18,328 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:18,328 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 16:30:18,328 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:18,331 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 16:30:18,332 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:18,332 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,334 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 16:30:18,334 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:18,335 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:18,338 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:18,339 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:18,339 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,341 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:30:18,341 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,342 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,342 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,342 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:18,344 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:30:18,344 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,344 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,345 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,345 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:18,345 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:18,345 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 16:30:18,345 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,345 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:18,346 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855418.29
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:18,346 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:18,350 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 16:30:18,350 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:18,353 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 16:30:18,353 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:18,356 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:18,356 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:18,356 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:18,356 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:18,359 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:18,359 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:18,359 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:18,361 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:30:18,361 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:30:18,362 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:18,362 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 16:30:18,362 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 16:30:18,362 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:30:18,362 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,363 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:18,363 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,363 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:18,364 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,364 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:30:18,364 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:18,365 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:30:18,365 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,365 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,366 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,367 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:30:18,367 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:30:18,367 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:30:18,367 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:30:18,367 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:30:18,367 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:30:18,367 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:30:18,368 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-24 16:30:18,368 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 16:30:18,369 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,370 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:18,371 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,371 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:30:18,371 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:30:18,371 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:30:18,371 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:30:18,371 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:30:18,371 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:30:18,372 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cc200dd0>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc200638>]
2017-10-24 16:30:18,372 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cc200dd0>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc200638>], sender=GuiBackend, reason=None)
2017-10-24 16:30:18,372 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posted event
2017-10-24 16:30:18,372 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-24 16:30:18,373 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 16:30:18,373 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:30:18,373 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,373 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:30:18,374 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:18,374 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:30:18,374 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,375 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cc200dd0>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc200638>], sender=GuiBackend, reason=None))
2017-10-24 16:30:18,375 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cc200dd0>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc200638>], sender=GuiBackend, reason=None)
2017-10-24 16:30:18,375 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:30:18,376 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,376 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:18,394 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:30:18,394 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:18,394 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-24 16:30:18,394 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-24 16:30:18,394 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:30:18,394 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:30:18,395 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:30:18,395 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:30:18,395 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:30:18,396 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855418.4
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:18,396 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:18,396 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:18,396 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:18,402 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:18,402 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:18,402 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:18,405 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:18,406 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:18,406 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:18,410 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:30:18,410 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:18,410 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,410 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:18,410 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,410 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:18,413 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:18,413 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:18,413 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,416 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^
+ tis.shared.previous_goal: perform(go_to_next)
?                           ^^^^ +++++++++  +++
-- END TIS changes --
2017-10-24 16:30:18,416 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:18,416 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,416 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:18,416 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:18,417 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:18,417 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:18,417 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:18,417 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:18,417 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:18,417 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:18,417 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:18,417 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,420 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([perform(say_step), perform(top)])
?                                     +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:30:18,420 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,420 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,423 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:30:18,423 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,423 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,424 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,424 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:18,424 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,424 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,424 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,424 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:18,424 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:18,427 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:30:18,427 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,427 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:18,428 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855418.4
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:18,428 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:18,437 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                                                 ^^^ ^^                                          ^^  --- ^^      ^^^   ^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                ++ ^ ^^^                                          ^^^ +  ^      ^^^^   ^ ++++++++++++++
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              ^^  --- ^^
+ tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
?                                              ^^^ +  ^
-- END TIS changes --
2017-10-24 16:30:18,437 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:18,440 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:30:18,440 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:18,442 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:18,442 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:18,442 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:18,443 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:18,445 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:18,445 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:18,445 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:18,447 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:18,447 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:30:18,448 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:30:18,448 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:18,448 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,448 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:18,449 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,449 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-24 16:30:18,450 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:30:18,450 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:30:18,450 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,451 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,452 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,452 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:30:18,452 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:18,452 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:18,452 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp') generated as u"I'm sorry, something went wrong."
2017-10-24 16:30:18,453 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:30:18,454 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,454 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:18,455 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:18,456 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:30:18,456 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:30:18,456 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:30:18,456 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:18,457 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7ff3cc2007a0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cc2005a8>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc200170>]
2017-10-24 16:30:18,457 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7ff3cc2007a0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cc2005a8>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc200170>], sender=GuiBackend, reason=None)
2017-10-24 16:30:18,457 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posted event
2017-10-24 16:30:18,457 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None))
2017-10-24 16:30:18,457 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:30:18,457 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I'm sorry, something went wrong."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:30:18,458 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,458 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:30:18,458 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:18,458 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "I'm sorry, something went wrong."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:30:18,459 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,459 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7ff3cc2007a0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cc2005a8>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc200170>], sender=GuiBackend, reason=None))
2017-10-24 16:30:18,459 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7ff3cc2007a0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cc2005a8>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cc200170>], sender=GuiBackend, reason=None)
2017-10-24 16:30:18,460 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": false, "arguments": {}, "failure_reason": "undefined_failure"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "I'm sorry, something went wrong."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:30:18,460 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,460 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:18,506 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": ["I'm sorry, something went wrong."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:30:18,506 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:18,506 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None))
2017-10-24 16:30:18,506 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None)
2017-10-24 16:30:18,506 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:30:18,506 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:18,506 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:18,507 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:18,507 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None))
2017-10-24 16:30:18,508 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855418.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:18,508 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:18,509 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:18,509 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:18,512 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 16:30:18,513 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:18,513 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:18,516 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:18,519 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:18,519 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:18,519 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:18,520 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:18,521 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,521 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,521 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:18,521 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:18,521 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:18,521 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:18,522 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:18,522 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:18,524 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:18,524 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,524 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:18,524 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:18,524 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:18,524 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:18,525 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:18,525 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:30:18,526 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:18,526 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:18,527 - session_2017-10-24T16_30_02_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7ff3cc1f0b90>:1.0
2017-10-24 16:30:18,527 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:19,527 - session_2017-10-24T16_30_02_0 - DEBUG - Timeout fired
2017-10-24 16:30:19,527 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:19,527 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:19,527 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:19,527 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:30:19,529 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855419.53
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:19,529 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:19,529 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:19,531 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:19,531 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:19,536 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:19,536 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:19,536 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:19,539 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:19,539 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:19,539 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:19,539 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:19,539 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:19,540 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:19,540 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:19,540 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:19,540 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:30:19,540 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:19,540 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:30:19,540 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:19,541 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:19,544 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 16:30:19,544 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:19,545 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:19,547 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:30:19,547 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:19,547 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:19,548 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:19,548 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:19,548 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:19,548 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:19,548 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:19,548 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:19,548 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:19,548 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:19,549 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:19,550 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855419.53
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:19,550 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:19,554 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                ^  ^ ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                ^^^^^^^^^^^^ ++++ ^^^^^ ^
-- END TIS changes --
2017-10-24 16:30:19,554 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:19,557 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                 --------------------------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:30:19,557 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:19,560 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:19,560 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:19,560 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:19,560 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:19,562 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:19,562 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:19,562 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:19,565 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:19,565 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:30:19,565 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:30:24,851 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "what should i do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:30:24,851 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:24,852 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None))
2017-10-24 16:30:24,852 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:24,852 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:24,852 - session_2017-10-24T16_30_02_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "what should i do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:30:24,852 - session_2017-10-24T16_30_02_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:30:24,853 - session_2017-10-24T16_30_02_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:30:24,854 - session_2017-10-24T16_30_02_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])} for DDD 'recipehelp'
2017-10-24 16:30:24,854 - session_2017-10-24T16_30_02_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
2017-10-24 16:30:24,854 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:30:24,854 - session_2017-10-24T16_30_02_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "what should i do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "what should i do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "say_step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "what should i do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:30:24,854 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: what should i do}], sender=TextInputComponent, reason=None)
2017-10-24 16:30:24,855 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:24,855 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:24,855 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:24,855 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,856 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:30:24,856 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:30:24,857 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:30:24,858 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,858 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,860 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,860 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(say_step)), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:30:24,860 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(say_step))
2017-10-24 16:30:24,860 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:30:24,860 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:24,860 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(say_step))
2017-10-24 16:30:24,861 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(say_step)) generated as u'Returning to tell me what to do.'
2017-10-24 16:30:24,861 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:24,861 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp') generated as u"I'm sorry, something went wrong."
2017-10-24 16:30:24,862 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:30:24,863 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,864 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:24,866 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,866 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:30:24,866 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:30:24,866 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(say_step)), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:30:24,866 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(say_step))
2017-10-24 16:30:24,866 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:30:24,866 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:24,867 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cca42488>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cca42908>]
2017-10-24 16:30:24,867 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cca42488>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cca42908>], sender=GuiBackend, reason=None)
2017-10-24 16:30:24,867 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posted event
2017-10-24 16:30:24,867 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:30:24,867 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:30:24,868 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:30:24,868 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:30:24,868 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:30:24,868 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,869 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=GenerateModule, reason=None))
2017-10-24 16:30:24,869 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:30:24,869 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to tell me what to do.", "I'm sorry, something went wrong."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:30:24,870 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,870 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:30:24,870 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:24,870 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "I'm sorry, something went wrong."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:30:24,871 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,871 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cca42488>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cca42908>], sender=GuiBackend, reason=None))
2017-10-24 16:30:24,871 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cca42488>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cca42908>], sender=GuiBackend, reason=None)
2017-10-24 16:30:24,871 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": false, "arguments": {}, "failure_reason": "undefined_failure"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "I'm sorry, something went wrong."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:30:24,872 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,872 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:24,879 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to tell me what to do.", "I'm sorry, something went wrong."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:30:24,880 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:24,880 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None))
2017-10-24 16:30:24,880 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None)
2017-10-24 16:30:24,880 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:30:24,881 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:24,881 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:24,881 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:24,882 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=TurnManager, reason=None))
2017-10-24 16:30:24,883 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855424.88
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to tell me what to do., I'm sorry, something went wrong.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:24,883 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:24,883 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:24,883 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:24,888 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:30:24,888 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:24,888 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:24,890 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:30:24,890 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:24,890 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:24,890 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:24,890 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:24,890 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:24,891 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:24,891 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:24,891 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:24,891 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:24,891 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:24,891 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:24,896 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:30:24,896 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:24,896 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:24,896 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:24,896 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:24,896 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:24,899 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:24,899 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:24,899 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:24,899 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:24,900 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:24,901 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:24,901 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:24,901 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:24,901 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:24,901 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:24,901 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:24,901 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:24,904 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:24,904 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:24,904 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to tell me what to do., I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:24,905 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:24,905 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:24,905 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:24,905 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,905 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to tell me what to do., I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:30:24,906 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to tell me what to do., I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:24,906 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to tell me what to do., I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:24,907 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,907 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,907 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,908 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:24,909 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855424.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:24,909 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:24,912 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("what should i do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
-- END TIS changes --
2017-10-24 16:30:24,912 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:24,912 - session_2017-10-24T16_30_02_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:30:24,912 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:24,917 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')])
-- END TIS changes --
2017-10-24 16:30:24,917 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:24,921 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:30:24,922 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:24,922 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:24,925 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:24,925 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:24,925 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                      ^^^^^^^^^^   ^^^^^ ^^^^
+ tis.private.tmp.usr.goals: stackset([perform(say_step), perform(top)])
?                                      ^  ++++ ^ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.usr.plan: Stack([])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ----------
+ tis.private.tmp.usr.qud: stackset([])
-- END TIS changes --
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:24,932 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])
2017-10-24 16:30:24,933 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:24,936 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([do(say_step)])
?                          ++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
-- END TIS changes --
2017-10-24 16:30:24,936 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:24,936 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:24,937 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:24,937 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:24,940 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(say_step)])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 16:30:24,940 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:24,940 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:24,940 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:24,940 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:24,940 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:24,940 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:24,941 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:24,941 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:24,941 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:24,941 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:24,944 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:30:24,944 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:24,944 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:24,944 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:24,944 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:24,944 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:24,944 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:24,945 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:24,945 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:24,945 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:24,945 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None)
2017-10-24 16:30:24,945 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:24,945 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:24,946 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855424.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:24,946 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:24,951 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                --- ^ -------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                 ^^^^^
-- END TIS changes --
2017-10-24 16:30:24,951 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:24,954 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:30:24,955 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:24,957 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:24,957 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:24,957 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:24,957 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:24,960 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:24,960 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:24,960 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:24,962 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:24,962 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:30:24,963 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:24,963 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None))
2017-10-24 16:30:24,963 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, what should i do, sender=DmeModule, reason=None)
2017-10-24 16:30:24,963 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": "what should i do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:30:24,964 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,964 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:24,964 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:24,964 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:24,965 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,965 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:30:24,966 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:30:24,966 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:30:24,966 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,967 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,968 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,968 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:30:24,968 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:24,969 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:24,969 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp') generated as u"I'm sorry, something went wrong."
2017-10-24 16:30:24,970 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:30:24,971 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,972 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:24,973 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:30:24,974 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:30:24,974 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:30:24,974 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:30:24,974 - session_2017-10-24T16_30_02_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:30:24,975 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cca58170>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cca58d88>]
2017-10-24 16:30:24,975 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cca58170>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cca58d88>], sender=GuiBackend, reason=None)
2017-10-24 16:30:24,975 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posted event
2017-10-24 16:30:24,975 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None))
2017-10-24 16:30:24,976 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:30:24,976 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I'm sorry, something went wrong."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:30:24,976 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,976 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:30:24,977 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:30:24,977 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "I'm sorry, something went wrong."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:30:24,978 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,979 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cca58170>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cca58d88>], sender=GuiBackend, reason=None))
2017-10-24 16:30:24,980 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7ff3cca58170>, <tdm.tdm_gui_protocol.Popup instance at 0x7ff3cca58d88>], sender=GuiBackend, reason=None)
2017-10-24 16:30:24,980 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": false, "arguments": {}, "failure_reason": "undefined_failure"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "I'm sorry, something went wrong."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:30:24,982 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend received event {"content": ["I'm sorry, something went wrong."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:30:24,982 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:24,983 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:24,983 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:30:24,983 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None))
2017-10-24 16:30:24,984 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None)
2017-10-24 16:30:24,984 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:30:24,984 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:24,984 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:24,985 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:30:24,985 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None))
2017-10-24 16:30:24,986 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855424.99
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:24,986 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:24,986 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:24,986 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:24,993 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(say_step), speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:24,993 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:24,994 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:24,996 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:30:24,996 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:24,996 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:24,996 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:24,996 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:24,996 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:24,996 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:24,997 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:24,997 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:24,997 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:24,997 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:30:24,997 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:25,001 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:30:25,001 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:30:25,001 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:25,001 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:30:25,001 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:25,001 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:25,001 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:25,002 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:25,003 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:25,003 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:25,003 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:25,003 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:25,005 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:25,005 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:25,006 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:25,006 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:30:25,006 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:25,006 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:30:25,006 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:30:25,007 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:30:25,007 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:25,007 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:30:25,007 - session_2017-10-24T16_30_02_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7ff3cc200ab8>:1.0
2017-10-24 16:30:25,007 - session_2017-10-24T16_30_02_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:30:26,007 - session_2017-10-24T16_30_02_0 - DEBUG - Timeout fired
2017-10-24 16:30:26,008 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:26,008 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:26,008 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:30:26,008 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:30:26,009 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855426.01
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:26,009 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:30:26,010 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:30:26,012 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:26,012 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:30:26,016 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'what should i do')}
-- END TIS changes --
2017-10-24 16:30:26,016 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:30:26,017 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - INFO - BEGIN integrate_moves
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:30:26,019 - session_2017-10-24T16_30_02_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:30:26,020 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:integrate
2017-10-24 16:30:26,020 - session_2017-10-24T16_30_02_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:30:26,020 - session_2017-10-24T16_30_02_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:30:26,021 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:26,021 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_action
2017-10-24 16:30:26,021 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:26,021 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:30:26,021 - session_2017-10-24T16_30_02_0 - INFO - breaking out of accommodate
2017-10-24 16:30:26,021 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:30:26,022 - session_2017-10-24T16_30_02_0 - INFO - END integrate_moves
2017-10-24 16:30:26,022 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:26,024 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 16:30:26,024 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:26,024 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:26,028 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:30:26,028 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:26,028 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:26,028 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:26,028 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:30:26,028 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:30:26,029 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:30:26,029 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:30:26,029 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:30:26,029 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:30:26,030 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:30:26,030 - session_2017-10-24T16_30_02_0 - INFO - running ISU module: select
2017-10-24 16:30:26,031 - session_2017-10-24T16_30_02_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7ff3ce964090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7ff3cca2da10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855426.01
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: what should i do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:30:26,031 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:30:26,036 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                 ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                +++ ^^^^ +++ +++ ++++++++
-- END TIS changes --
2017-10-24 16:30:26,036 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:26,039 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(say_step))), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                 --------------------------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:30:26,039 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:26,042 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:30:26,042 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:30:26,042 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:select_move
2017-10-24 16:30:26,042 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:30:26,044 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:26,044 - session_2017-10-24T16_30_02_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:30:26,045 - session_2017-10-24T16_30_02_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:30:26,047 - session_2017-10-24T16_30_02_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:30:26,047 - session_2017-10-24T16_30_02_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:30:26,047 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:32:18,175 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:32:18,176 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 16:32:18,176 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:32:18,176 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:32:18,176 - session_2017-10-24T16_30_02_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 16:32:18,176 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:32:18,177 - session_2017-10-24T16_30_02_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 16:32:18,177 - session_2017-10-24T16_30_02_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:32:18,177 - session_2017-10-24T16_30_02_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 16:32:18,177 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:32:18,177 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 16:32:18,177 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:32:18,177 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:32:18,178 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:32:18,178 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 16:32:18,178 - session_2017-10-24T16_30_02_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:32:18,178 - session_2017-10-24T16_30_02_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 16:32:18,178 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:32:18,178 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:32:18,178 - session_2017-10-24T16_30_02_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:32:18,179 - session_2017-10-24T16_30_02_0 - DEBUG - Sent.
2017-10-24 16:32:18,179 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:32:18,179 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:32:18,179 - session_2017-10-24T16_30_02_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:32:18,180 - session_2017-10-24T16_30_02_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:32:18,180 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:32:18,182 - session_2017-10-24T16_30_02_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:32:18,183 - session_2017-10-24T16_30_02_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:32:18,184 - session_2017-10-24T16_30_02_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:reraise:perform(say_step)), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:32:18,184 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 16:32:18,184 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 16:32:18,185 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 16:32:18,186 - session_2017-10-24T16_30_02_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 16:32:18,186 - session_2017-10-24T16_30_02_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
