2017-10-24 11:33:55,437 - session_2017-10-24T11_33_55_0 - DEBUG - Backend()
2017-10-24 11:33:55,438 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.initialize()
2017-10-24 11:33:55,470 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f0591871dd0>>, False])
2017-10-24 11:33:55,470 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f0591871dd0>>, 'eng'])
2017-10-24 11:33:55,470 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 11:33:55,470 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 11:33:55,470 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f0591871dd0>>, True, 'disabled'])
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f0591871dd0>>])
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f0591871dd0>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f0591871dd0>>, 'eng', False, True])
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - Backend initialized
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - Backend uses language 'eng'
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - running module InterpretModule
2017-10-24 11:33:55,471 - session_2017-10-24T11_33_55_0 - DEBUG - running module DmeModule
2017-10-24 11:33:55,473 - session_2017-10-24T11_33_55_0 - DEBUG - running module DeviceManager
2017-10-24 11:33:55,473 - session_2017-10-24T11_33_55_0 - DEBUG - running module GenerateModule
2017-10-24 11:33:55,473 - session_2017-10-24T11_33_55_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 11:33:55,473 - session_2017-10-24T11_33_55_0 - DEBUG - running module GuiBackend
2017-10-24 11:33:55,474 - session_2017-10-24T11_33_55_0 - DEBUG - running module CogloadModule
2017-10-24 11:33:55,474 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:33:55,474 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:33:55,475 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 11:33:55,475 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 11:33:55,475 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 11:33:55,476 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:33:55,476 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:33:55,483 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 11:33:55,483 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:33:55,484 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 11:33:55,485 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,486 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 11:33:55,486 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 11:33:55,486 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 11:33:55,487 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:33:55,487 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:33:55,489 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 11:33:55,490 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:33:55,490 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:33:55,490 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,490 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,490 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,490 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:33:55,490 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:33:55,491 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837635.49
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:33:55,491 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:33:55,492 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:33:55,492 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:33:55,494 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:33:55,494 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:33:55,494 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:33:55,496 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:33:55,496 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:33:55,496 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:33:55,496 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:33:55,496 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:33:55,496 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:33:55,497 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:33:55,498 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:33:55,498 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:33:55,498 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:33:55,498 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:33:55,498 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:33:55,499 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:33:55,500 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:33:55,502 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:33:55,502 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:33:55,504 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:33:55,504 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:33:55,504 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:33:55,505 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:33:55,505 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:33:55,505 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:33:55,505 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:33:55,505 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:33:55,506 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:33:55,506 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:33:55,506 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:33:55,506 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:33:55,507 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837635.49
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:33:55,507 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:33:55,510 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:33:55,510 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:33:55,513 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:33:55,513 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:33:55,515 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:33:55,515 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:33:55,518 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:33:55,518 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:33:55,518 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:33:55,518 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:33:55,520 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:33:55,520 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:33:55,520 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:33:55,522 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 11:33:55,523 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:33:55,523 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:33:55,523 - session_2017-10-24T11_33_55_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,523 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,523 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,523 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,523 - session_2017-10-24T11_33_55_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:33:55,523 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 11:33:55,524 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:33:55,524 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:33:55,524 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:33:55,524 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 11:33:55,524 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:33:55,525 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:33:55,525 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:33:55,525 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:33:55,526 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:33:55,526 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 11:33:55,526 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:33:55,526 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:33:55,526 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:33:55,527 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:33:55,527 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:33:55,527 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:33:55,528 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:33:55,528 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:33:55,528 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:33:55,528 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 11:33:55,528 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 11:33:55,529 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:33:55,529 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 11:33:55,529 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:33:55,530 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:33:55,531 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:33:55,531 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:33:55,532 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:33:55,532 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:33:55,532 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:33:55,532 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:33:55,532 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:33:55,532 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message []
2017-10-24 11:33:55,532 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:33:55,532 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:33:55,533 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 11:33:55,533 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:33:55,533 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:33:55,533 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:33:55,533 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 11:33:55,534 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:33:55,534 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:33:55,534 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:33:55,534 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:33:55,575 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:33:55,576 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:33:55,576 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 11:33:55,576 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 11:33:55,577 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:33:55,577 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:33:55,577 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:33:55,577 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:33:55,577 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 11:33:55,578 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837635.58
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:33:55,578 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:33:55,578 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:33:55,579 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:33:55,581 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 11:33:55,581 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:33:55,582 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:33:55,584 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:33:55,584 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:33:55,584 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:33:55,584 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:33:55,584 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:33:55,584 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:33:55,585 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:33:55,585 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:33:55,585 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:33:55,585 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:33:55,585 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:33:55,585 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:33:55,588 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:33:55,588 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:33:55,588 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:33:55,588 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:33:55,589 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:33:55,589 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:33:55,592 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 11:33:55,592 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:33:55,592 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:33:55,592 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:33:55,592 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:33:55,592 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:33:55,593 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:33:55,594 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:33:55,594 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:33:55,594 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:33:55,594 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:33:55,595 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:33:55,595 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:33:55,597 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:33:55,597 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:33:55,597 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:33:55,597 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:33:55,597 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:33:55,598 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:33:55,598 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:33:55,598 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:33:55,599 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:33:55,599 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:33:55,599 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:13,201 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:34:13,201 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:13,201 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 11:34:13,202 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:13,202 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:13,202 - session_2017-10-24T11_33_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:34:13,202 - session_2017-10-24T11_33_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:34:13,207 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:34:13,207 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 11:34:13,208 - session_2017-10-24T11_33_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 11:34:13,208 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:13,208 - session_2017-10-24T11_33_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:34:13,209 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:13,209 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:34:13,209 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:13,209 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:13,209 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:13,209 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 11:34:13,210 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:13,210 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 11:34:13,210 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:13,211 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:13,211 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:13,212 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:13,213 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837653.21
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:13,213 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:13,216 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 11:34:13,216 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:13,220 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 11:34:13,221 - session_2017-10-24T11_33_55_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:34:13,221 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:13,224 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 11:34:13,225 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:13,231 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:34:13,231 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:13,231 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:13,235 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:13,235 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:13,235 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:13,239 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 11:34:13,239 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:13,239 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:13,239 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:13,240 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:13,240 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:13,240 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 11:34:13,240 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:13,240 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 11:34:13,240 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:13,244 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:13,244 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:13,245 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:13,247 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 11:34:13,247 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:13,247 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:13,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:13,253 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:13,253 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:13,253 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:13,254 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:13,256 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:34:13,256 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:13,256 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:13,257 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:13,257 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:13,257 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:13,257 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 11:34:13,257 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:13,257 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:13,258 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837653.21
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:13,258 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:13,262 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:34:13,262 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:13,265 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:13,265 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:13,268 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 11:34:13,269 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:13,269 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:13,273 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 11:34:13,273 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:13,276 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:13,276 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:13,276 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:13,276 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:13,279 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:13,279 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:13,279 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:13,281 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:13,282 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:13,282 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:13,282 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 11:34:13,282 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 11:34:13,282 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:34:13,283 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:13,283 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:34:13,284 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:13,284 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:13,284 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:13,285 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:34:13,285 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:13,285 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:13,285 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:13,286 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:13,287 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 11:34:13,288 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 11:34:13,289 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 11:34:13,289 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:13,289 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 11:34:13,289 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 11:34:13,291 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:13,293 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:13,293 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:13,293 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:13,293 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 11:34:13,293 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:34:13,293 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:34:13,293 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:34:13,293 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:34:13,294 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:13,294 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message []
2017-10-24 11:34:13,294 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:34:13,294 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:13,294 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 11:34:13,295 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 11:34:13,295 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:13,295 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:13,295 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 11:34:13,296 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:34:13,296 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:13,296 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:13,297 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:13,309 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:13,309 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:13,309 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:13,309 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:13,309 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:13,309 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:34:13,309 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:34:13,310 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:34:13,310 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 11:34:13,312 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837653.31
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:13,312 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:13,312 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:13,312 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:13,318 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:13,318 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:13,318 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:13,321 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:13,321 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:13,321 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:13,321 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:13,321 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:13,321 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:13,321 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:13,322 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:13,322 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:13,322 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:13,322 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:13,322 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:13,326 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:34:13,326 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:13,326 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:13,326 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:13,326 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:13,326 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:13,330 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:13,330 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:13,330 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:13,331 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:13,331 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:13,331 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:13,334 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 11:34:13,334 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:13,334 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:13,335 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:13,336 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:13,336 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:13,336 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:13,336 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:13,337 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:13,337 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:13,337 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:13,339 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:13,339 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:13,339 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:13,339 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:34:13,340 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:13,340 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:13,340 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:13,340 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:34:13,341 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:13,341 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:13,341 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:18,445 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:34:18,445 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:18,445 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 11:34:18,445 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:18,446 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:18,446 - session_2017-10-24T11_33_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:34:18,446 - session_2017-10-24T11_33_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:34:18,448 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:34:18,448 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 11:34:18,448 - session_2017-10-24T11_33_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 11:34:18,448 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:18,449 - session_2017-10-24T11_33_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:34:18,449 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:18,449 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:34:18,449 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:18,449 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:18,449 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:18,450 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 11:34:18,450 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,450 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 11:34:18,451 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,451 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,452 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,452 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:18,454 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837658.45
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:18,454 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:18,457 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 11:34:18,457 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:18,457 - session_2017-10-24T11_33_55_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:34:18,458 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:18,463 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')])
-- END TIS changes --
2017-10-24 11:34:18,463 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:18,470 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 11:34:18,470 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:18,470 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:18,474 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:18,474 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:18,474 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:18,481 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 11:34:18,481 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:18,481 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:18,486 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:34:18,486 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:18,486 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:18,486 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:18,486 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 11:34:18,486 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:18,486 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 11:34:18,486 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:18,490 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.say_step(X)])
?                           ++++++++++++++
-- END TIS changes --
2017-10-24 11:34:18,490 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:18,490 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:18,491 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:18,491 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,494 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 -------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
-- END TIS changes --
2017-10-24 11:34:18,494 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:18,494 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:18,494 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:18,495 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:18,495 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:18,495 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:18,495 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:18,495 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:18,495 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:18,495 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:18,498 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step("0")}
?                   +++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 11:34:18,498 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,498 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:18,499 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,499 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:18,502 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X)])
?                           --------------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:34:18,502 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:18,502 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:18,502 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,502 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:18,502 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:18,502 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 11:34:18,503 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:18,503 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:18,504 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837658.45
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:18,504 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:18,509 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step("0")}
?                           +++++++++++++
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                 +++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 11:34:18,509 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:18,512 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:18,512 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:18,515 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 11:34:18,515 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:18,518 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                         ---     ---- ^^^ ^^
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("0")))])
?                                               ^^^^^^^^^^^^^ ^^^^^^
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:18,518 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:18,518 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:18,518 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:18,521 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:18,521 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:18,521 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:18,523 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 11:34:18,524 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')])
2017-10-24 11:34:18,524 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:18,524 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 11:34:18,524 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 11:34:18,524 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:34:18,525 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,525 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None))
2017-10-24 11:34:18,525 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:18,525 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:18,526 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,527 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:34:18,527 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:18,527 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:18,528 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,528 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,529 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,529 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("0")), ddd_name=u'recipehelp'), facts={say_step("0")})
2017-10-24 11:34:18,529 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-24 11:34:18,529 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-24 11:34:18,530 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(answer(say_step("0")), ddd_name=u'recipehelp') generated as u'Ok 0.'
2017-10-24 11:34:18,530 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None)
2017-10-24 11:34:18,531 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,532 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:18,534 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,534 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:18,534 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')])
2017-10-24 11:34:18,534 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("0")), ddd_name=u'recipehelp'), facts={say_step("0")})
2017-10-24 11:34:18,534 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-24 11:34:18,535 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f0590107bd8>]
2017-10-24 11:34:18,536 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f0590107bd8>], sender=GuiBackend, reason=None)
2017-10-24 11:34:18,536 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:18,536 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None))
2017-10-24 11:34:18,536 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None)
2017-10-24 11:34:18,536 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok 0."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:18,537 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,537 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:34:18,537 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:18,537 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok 0."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 11:34:18,538 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,538 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f0590107bd8>], sender=GuiBackend, reason=None))
2017-10-24 11:34:18,539 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f0590107bd8>], sender=GuiBackend, reason=None)
2017-10-24 11:34:18,539 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok 0."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:18,539 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,539 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:18,545 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok 0."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:18,546 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:18,546 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok 0.], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:18,546 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok 0.], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:18,546 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:18,546 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-24 11:34:18,546 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-24 11:34:18,546 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-24 11:34:18,547 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None))
2017-10-24 11:34:18,548 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837658.55
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("0")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("0")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:18,548 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:18,548 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:18,549 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:18,555 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:18,555 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:18,555 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:18,558 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:18,558 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:18,558 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:18,559 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:18,562 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {say_step("0")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:18,562 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:18,562 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:18,565 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("0")}
+ tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 11:34:18,565 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:18,565 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,565 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:18,565 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:18,565 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:18,565 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:18,566 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:18,566 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:18,566 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:18,566 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:18,566 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:18,566 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:18,569 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: recoverResolvePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X))))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:34:18,569 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,570 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:18,570 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,570 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:18,570 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:18,571 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:18,571 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,571 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:18,571 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:18,574 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 11:34:18,574 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:18,574 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:18,575 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837658.55
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X))))])
tis.private.bel: {say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("0")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:18,575 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:18,580 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^ ^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X))))])
?                                                                +++ ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {say_step("0"), resolved(?X.say_step(X))}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                 -------------------------
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:34:18,580 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:18,584 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X))))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X)))), findout(?X.step_to_choose(X))])
?                                                                                           +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:18,584 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:18,586 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X)))), findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 11:34:18,586 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:18,590 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))])
?                                                                                       +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:18,590 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:18,590 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:18,590 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:18,592 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:18,592 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:18,593 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:18,595 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 11:34:18,596 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:18,596 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None))
2017-10-24 11:34:18,596 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None))
2017-10-24 11:34:18,596 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:18,596 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:18,597 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,597 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)))
2017-10-24 11:34:18,598 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None))
2017-10-24 11:34:18,598 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:18,598 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,599 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {say_step("0")}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,601 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,601 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:resolve(?X.go_to_step(X))), facts={say_step("0"), resolved(?X.say_step(X))})
2017-10-24 11:34:18,601 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:resolve(?X.go_to_step(X)))
2017-10-24 11:34:18,602 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={say_step("0"), resolved(?X.say_step(X))})
2017-10-24 11:34:18,602 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:18,602 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:resolve(?X.go_to_step(X)))
2017-10-24 11:34:18,602 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:resolve(?X.go_to_step(X))) generated as u'Returning to go to step.'
2017-10-24 11:34:18,602 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:18,603 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 11:34:18,603 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to go to step., Which step?], sender=GenerateModule, reason=None)
2017-10-24 11:34:18,605 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,608 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:18,608 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:18,608 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:18,609 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:resolve(?X.go_to_step(X))), facts={say_step("0"), resolved(?X.say_step(X))})
2017-10-24 11:34:18,609 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:resolve(?X.go_to_step(X)))
2017-10-24 11:34:18,609 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={say_step("0"), resolved(?X.say_step(X))})
2017-10-24 11:34:18,609 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:18,610 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590183680>]
2017-10-24 11:34:18,610 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590183680>], sender=GuiBackend, reason=None)
2017-10-24 11:34:18,610 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:18,610 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to go to step., Which step?], sender=GenerateModule, reason=None))
2017-10-24 11:34:18,610 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to go to step., Which step?], sender=GenerateModule, reason=None)
2017-10-24 11:34:18,610 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to go to step.", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:18,611 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,611 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590183680>], sender=GuiBackend, reason=None))
2017-10-24 11:34:18,611 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590183680>], sender=GuiBackend, reason=None)
2017-10-24 11:34:18,611 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:18,612 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,612 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:18,655 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to go to step.", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:18,655 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:18,655 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to go to step., Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:18,655 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to go to step., Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:18,655 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:18,655 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to go to step., Which step?], sender=TurnManager, reason=None)
2017-10-24 11:34:18,655 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to go to step., Which step?], sender=TurnManager, reason=None)
2017-10-24 11:34:18,656 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to go to step., Which step?], sender=TurnManager, reason=None)
2017-10-24 11:34:18,656 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to go to step., Which step?], sender=TurnManager, reason=None))
2017-10-24 11:34:18,658 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837658.66
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to go to step., Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X))))])
tis.private.tmp.sys.bel: {say_step("0")}
tis.private.tmp.sys.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:18,658 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:18,658 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:18,658 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:18,664 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 11:34:18,664 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:18,664 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:18,667 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:18,667 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:18,667 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:18,667 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:18,667 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:18,667 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:18,667 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:18,668 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:18,668 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:18,668 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:18,668 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:18,668 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:18,672 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ------------------------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:34:18,672 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:18,672 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:18,672 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:18,672 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,672 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:18,677 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 11:34:18,677 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:18,677 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:18,677 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:18,677 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,677 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:18,677 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:18,677 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:18,678 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:18,678 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:18,678 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:18,678 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:18,678 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:18,678 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:18,678 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:18,679 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,679 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:18,679 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:18,679 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:18,679 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:18,680 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:18,680 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:18,682 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 11:34:18,682 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:18,683 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to go to step., Which step?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:18,683 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None))
2017-10-24 11:34:18,683 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:18,683 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:18,684 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:18,684 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to go to step., Which step?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:34:18,684 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to go to step., Which step?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:18,685 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to go to step., Which step?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:18,685 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:39,036 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:34:39,037 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:39,037 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-24 11:34:39,037 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:39,037 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:39,037 - session_2017-10-24T11_33_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:34:39,038 - session_2017-10-24T11_33_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:34:39,040 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:34:39,040 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-24 11:34:39,040 - session_2017-10-24T11_33_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-24 11:34:39,040 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:39,041 - session_2017-10-24T11_33_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:34:39,041 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:39,041 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:34:39,041 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:39,041 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:39,041 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:39,041 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 11:34:39,042 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:39,042 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 11:34:39,043 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:39,043 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:39,043 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:39,043 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:39,045 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837679.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X))), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X))))])
tis.private.tmp.sys.bel: {say_step("0")}
tis.private.tmp.sys.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:39,045 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:39,049 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-24 11:34:39,049 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:39,053 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-24 11:34:39,058 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-24 11:34:39,058 - session_2017-10-24T11_33_55_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:34:39,059 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:39,063 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 11:34:39,063 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:39,069 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:39,069 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:39,069 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:39,072 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:39,072 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:39,073 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
+ tis.private.tmp.usr.bel: {say_step("0")}
?                           +++++++++++++
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.com: {say_step("0"), resolved(?X.say_step(X))}
-- END TIS changes --
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:39,078 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 11:34:39,079 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:39,083 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
+ tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), step_to_choose(step1)}
?                                                         +++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 11:34:39,083 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:39,083 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:39,088 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), step_to_choose(step1)}
+ tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), step_to_choose(step1), resolved(?X.step_to_choose(X))}
?                                                                                ++++++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 11:34:39,088 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:39,092 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:34:39,092 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:39,093 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:39,093 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:39,093 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:39,093 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:39,093 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:39,093 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:39,093 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:39,093 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:39,094 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:39,094 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:39,097 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {say_step("0")}
+ tis.private.bel: {say_step("0"), go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 11:34:39,097 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:39,097 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:39,100 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
-- END TIS changes --
2017-10-24 11:34:39,100 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:39,100 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:39,101 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:39,101 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:39,104 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:34:39,104 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:39,104 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:39,104 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:39,104 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:39,105 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:39,105 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 11:34:39,105 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 11:34:39,105 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}, {predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 11:34:39,105 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:39,106 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837679.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step("0"), go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X))))])
tis.private.tmp.sys.bel: {say_step("0")}
tis.private.tmp.sys.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("0")}
tis.private.tmp.usr.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:39,106 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:39,112 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:resolve(?X.go_to_step(X))))])
?                                                                --- ^ ---------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^^^
- tis.private.tmp.sys.bel: {say_step("0")}
+ tis.private.tmp.sys.bel: {say_step("0"), go_to_step("chose a step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 11:34:39,112 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:39,115 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:39,115 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:39,118 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 11:34:39,118 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:39,121 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:39,121 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:39,121 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:39,121 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:39,123 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:39,124 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:39,124 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:39,126 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 11:34:39,127 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-24 11:34:39,127 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {say_step("0"), go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:39,127 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 11:34:39,127 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 11:34:39,128 - session_2017-10-24T11_33_55_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 11:34:39,128 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-24 11:34:39,128 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 11:34:39,128 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:34:39,129 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:39,129 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}, {predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-24 11:34:39,129 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}, {predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 11:34:39,130 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}, {"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:39,131 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:39,131 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {say_step("0"), go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:34:39,131 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {say_step("0"), go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:39,131 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:39,132 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {say_step("0"), go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:39,132 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {say_step("0"), go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:39,134 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0"), go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:39,134 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={say_step("0"), resolved(?X.say_step(X)), go_to_step("chose a step")})
2017-10-24 11:34:39,134 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 11:34:39,134 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 11:34:39,135 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-24 11:34:39,135 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-24 11:34:39,136 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0"), go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:39,137 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:39,139 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("0"), go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {say_step("0"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:39,139 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:39,139 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-24 11:34:39,139 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={say_step("0"), resolved(?X.say_step(X)), go_to_step("chose a step")})
2017-10-24 11:34:39,139 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 11:34:39,140 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f0590168128>]
2017-10-24 11:34:39,140 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f0590168128>], sender=GuiBackend, reason=None)
2017-10-24 11:34:39,141 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:39,141 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-24 11:34:39,141 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-24 11:34:39,141 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:39,141 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:39,142 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:34:39,142 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:39,142 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 11:34:39,142 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:39,142 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f0590168128>], sender=GuiBackend, reason=None))
2017-10-24 11:34:39,143 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f0590168128>], sender=GuiBackend, reason=None)
2017-10-24 11:34:39,143 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:39,144 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:39,145 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:39,149 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:39,150 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:39,150 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:39,150 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:39,150 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:39,150 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 11:34:39,150 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 11:34:39,151 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 11:34:39,151 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-24 11:34:39,152 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837679.15
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("0"), go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("0"), go_to_step("chose a step")}
tis.private.tmp.sys.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("0")}
tis.private.tmp.usr.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:39,152 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:39,153 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:39,153 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:39,159 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:resolve(?X.go_to_step(X)), speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:39,159 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:39,160 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:39,163 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:39,164 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:39,164 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:39,167 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {say_step("0"), resolved(?X.say_step(X))}
+ tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), go_to_step("chose a step")}
?                                                         ++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:39,167 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:39,167 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:39,171 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), go_to_step("chose a step")}
+ tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                                                                     ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:39,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:39,173 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:39,173 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:39,173 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:39,173 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:39,173 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:39,173 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:39,174 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:39,176 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 11:34:39,176 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}, {predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 11:34:39,176 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:39,177 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}, {predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-24 11:34:39,177 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}, {predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 11:34:39,177 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}, {"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:39,177 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:39,177 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 11:34:39,178 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:39,178 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:39,179 - session_2017-10-24T11_33_55_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f059016bea8>:1.0
2017-10-24 11:34:39,179 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:40,179 - session_2017-10-24T11_33_55_0 - DEBUG - Timeout fired
2017-10-24 11:34:40,179 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:40,180 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:40,180 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:40,180 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:34:40,181 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837680.18
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("0"), go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("0"), go_to_step("chose a step")}
tis.private.tmp.sys.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("0")}
tis.private.tmp.usr.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:40,181 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:40,181 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:40,184 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:40,184 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:40,188 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 11:34:40,188 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:40,189 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:40,192 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:40,193 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:40,194 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:40,197 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:34:40,197 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:40,197 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:40,199 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step("0"), go_to_step("chose a step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step("0"), resolved(?X.say_step(X)), go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 11:34:40,199 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:40,200 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:40,200 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:40,200 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:40,200 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:40,200 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:40,200 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:40,201 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:40,201 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:40,202 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:40,202 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:40,203 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837680.18
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("0"), go_to_step("chose a step")}
tis.private.tmp.sys.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("0")}
tis.private.tmp.usr.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:40,203 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:40,208 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step("0"), go_to_step("chose a step")}
- tis.private.tmp.sys.com: {say_step("0"), resolved(?X.say_step(X))}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:40,208 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:40,210 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:40,210 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:40,213 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:34:40,213 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:40,216 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:40,216 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:40,216 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:40,216 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:40,218 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:40,218 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:40,218 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:40,220 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 11:34:40,221 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:40,221 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:34:46,061 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:34:46,062 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:46,062 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 11:34:46,062 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:46,062 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:46,062 - session_2017-10-24T11_33_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:34:46,062 - session_2017-10-24T11_33_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:34:46,063 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:34:46,064 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 11:34:46,064 - session_2017-10-24T11_33_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 11:34:46,064 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:46,064 - session_2017-10-24T11_33_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:34:46,065 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:46,065 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:34:46,065 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:46,065 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:46,065 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,066 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 11:34:46,066 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:34:46,066 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:46,067 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,067 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,068 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,068 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 11:34:46,069 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 11:34:46,069 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:34:46,069 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:46,069 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 11:34:46,070 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 11:34:46,070 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:46,070 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 11:34:46,070 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:34:46,071 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,073 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,073 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:46,073 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:46,073 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 11:34:46,073 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 11:34:46,073 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:34:46,074 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:46,074 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590141128>]
2017-10-24 11:34:46,074 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590141128>], sender=GuiBackend, reason=None)
2017-10-24 11:34:46,074 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:46,074 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:34:46,074 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:46,075 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:46,075 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:46,075 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 11:34:46,075 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,075 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 11:34:46,076 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:34:46,076 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:46,076 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,076 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590141128>], sender=GuiBackend, reason=None))
2017-10-24 11:34:46,077 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590141128>], sender=GuiBackend, reason=None)
2017-10-24 11:34:46,077 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:46,078 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,078 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:46,109 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:46,110 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:46,110 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:46,110 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:46,110 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:46,110 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:34:46,110 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:34:46,110 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:34:46,111 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 11:34:46,112 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837686.11
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("0")}
tis.private.tmp.usr.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:46,112 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:46,112 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:46,112 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:46,115 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:34:46,116 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:46,116 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:46,118 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:46,119 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:46,123 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:34:46,123 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:46,123 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:46,123 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:46,123 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,123 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:46,126 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 11:34:46,127 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:46,127 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:46,128 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:46,129 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:46,129 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,129 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:46,129 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:46,129 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:46,129 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,129 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:46,130 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:46,132 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 11:34:46,132 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:46,132 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:46,132 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:34:46,133 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:46,133 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:46,133 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,134 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:34:46,134 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:46,135 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:46,135 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,135 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,136 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,136 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:46,137 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837686.14
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("0")}
tis.private.tmp.usr.com: {say_step("0"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:46,137 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:46,140 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 11:34:46,140 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:46,146 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 11:34:46,147 - session_2017-10-24T11_33_55_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:34:46,147 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:46,152 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 11:34:46,152 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:46,159 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:34:46,159 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:46,159 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:46,162 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:46,162 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:46,162 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {say_step("0")}
?                           -------------
+ tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {say_step("0"), resolved(?X.say_step(X))}
+ tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 11:34:46,168 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:46,172 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:46,172 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:46,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:46,175 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 11:34:46,175 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:46,175 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,179 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 -------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.plan: Stack([findout(?X.goal(X))])
?                          ^ ^^^ ^    ^^ ^
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^ ^^^^ ^^^    ^ ^^^^^^
-- END TIS changes --
2017-10-24 11:34:46,179 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:46,179 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:46,179 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:46,179 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:46,179 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:46,179 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:46,179 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:46,180 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:46,180 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:46,180 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:46,183 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 11:34:46,183 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,183 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:46,183 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,183 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:46,186 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:34:46,186 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:46,186 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:46,186 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,186 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:46,186 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:46,187 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 11:34:46,187 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 11:34:46,187 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:46,188 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837686.14
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:46,188 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:46,193 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                --- ^ --------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^^^
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 11:34:46,193 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:46,196 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:46,196 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:46,199 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 11:34:46,199 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:46,202 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:46,202 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:46,202 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:46,202 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:46,204 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:46,204 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:46,205 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:46,207 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 11:34:46,207 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 11:34:46,207 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:46,208 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 11:34:46,208 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 11:34:46,208 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:34:46,208 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,209 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 11:34:46,210 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 11:34:46,210 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:46,210 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,211 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:34:46,211 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:46,211 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:46,212 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,212 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,213 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,213 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 11:34:46,213 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 11:34:46,213 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 11:34:46,214 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok  Step one: Chop onions and garlic..'
2017-10-24 11:34:46,214 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 11:34:46,215 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,216 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:46,217 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:46,217 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:46,217 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 11:34:46,217 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 11:34:46,218 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 11:34:46,218 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f05901412d8>]
2017-10-24 11:34:46,219 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f05901412d8>], sender=GuiBackend, reason=None)
2017-10-24 11:34:46,219 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:46,219 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None))
2017-10-24 11:34:46,219 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 11:34:46,219 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:46,220 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,220 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:34:46,220 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:46,220 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok  Step one: Chop onions and garlic.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 11:34:46,221 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,222 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f05901412d8>], sender=GuiBackend, reason=None))
2017-10-24 11:34:46,222 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f05901412d8>], sender=GuiBackend, reason=None)
2017-10-24 11:34:46,222 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok  Step one: Chop onions and garlic.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:46,223 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,223 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:46,230 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:46,230 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:46,230 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:46,230 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:46,230 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:46,231 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 11:34:46,231 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 11:34:46,231 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 11:34:46,231 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None))
2017-10-24 11:34:46,233 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837686.23
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:46,233 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:46,233 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:46,233 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:46,240 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:46,240 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:46,240 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:46,242 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:46,242 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:46,242 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:46,243 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:46,243 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:46,243 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:46,243 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:46,243 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:46,243 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:46,243 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:46,244 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:46,244 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:46,246 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {say_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:46,246 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:46,246 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:46,250 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 11:34:46,250 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:46,250 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,250 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:46,250 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:46,250 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:46,251 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:46,251 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:46,251 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:46,251 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:46,251 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:46,251 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:46,251 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:46,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:46,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:46,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:46,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:46,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:46,252 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:46,255 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 11:34:46,255 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 11:34:46,255 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:46,255 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 11:34:46,255 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 11:34:46,255 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:46,256 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:46,257 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 11:34:46,257 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:46,257 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:46,258 - session_2017-10-24T11_33_55_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f059016bcb0>:1.0
2017-10-24 11:34:46,258 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:47,258 - session_2017-10-24T11_33_55_0 - DEBUG - Timeout fired
2017-10-24 11:34:47,258 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:47,258 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:47,258 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:47,258 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:34:47,259 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837687.26
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:47,259 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:47,259 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:47,262 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:47,262 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:47,266 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 11:34:47,266 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:47,266 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:47,269 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:47,270 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:47,271 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:47,271 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:47,271 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:47,273 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:34:47,274 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:47,274 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:47,276 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 11:34:47,276 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:47,276 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:47,277 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:47,277 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:47,277 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:47,277 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:47,277 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:47,277 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:47,277 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:47,277 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:47,278 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:47,279 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837687.26
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:47,279 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:47,283 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:47,283 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:47,285 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:47,285 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:47,288 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:34:47,288 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:47,291 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:47,291 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:47,291 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:47,291 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:47,293 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:47,293 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:47,293 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:47,295 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 11:34:47,296 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:47,296 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:34:58,121 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go back"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:34:58,122 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:58,122 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None))
2017-10-24 11:34:58,122 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:58,122 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:58,122 - session_2017-10-24T11_33_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go back"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:34:58,123 - session_2017-10-24T11_33_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:34:58,124 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:34:58,124 - session_2017-10-24T11_33_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])} for DDD 'recipehelp'
2017-10-24 11:34:58,124 - session_2017-10-24T11_33_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
2017-10-24 11:34:58,125 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:58,125 - session_2017-10-24T11_33_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go back"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go back", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_back"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go back", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:34:58,125 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 11:34:58,125 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:34:58,125 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:58,125 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:58,126 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,127 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 11:34:58,127 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:34:58,128 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:58,128 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,129 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,130 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,130 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 11:34:58,130 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 11:34:58,130 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:34:58,130 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:58,130 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 11:34:58,131 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 11:34:58,131 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:58,131 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 11:34:58,131 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:34:58,133 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,134 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,134 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:58,134 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:58,134 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 11:34:58,134 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 11:34:58,135 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:34:58,135 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:34:58,135 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590160dd0>]
2017-10-24 11:34:58,135 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590160dd0>], sender=GuiBackend, reason=None)
2017-10-24 11:34:58,135 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:58,135 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:34:58,136 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:34:58,136 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:58,136 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 11:34:58,136 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 11:34:58,136 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,136 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 11:34:58,137 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:34:58,138 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:58,140 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,140 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590160dd0>], sender=GuiBackend, reason=None))
2017-10-24 11:34:58,141 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f0590160dd0>], sender=GuiBackend, reason=None)
2017-10-24 11:34:58,141 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:58,142 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,143 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:58,145 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:58,146 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:58,146 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:58,146 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:58,146 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:58,146 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:34:58,146 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:34:58,146 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:34:58,147 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 11:34:58,149 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837698.15
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:58,149 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:58,149 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:58,149 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:58,153 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:34:58,153 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:58,153 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:58,155 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:58,155 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:58,155 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:58,155 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:58,155 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:58,155 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:58,155 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:58,155 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:58,156 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:58,156 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:58,156 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:58,156 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:58,159 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:34:58,159 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:58,159 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,160 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:58,160 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,160 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:58,163 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 11:34:58,163 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:58,164 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:58,165 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:58,165 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:58,165 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,165 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,165 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:58,165 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,165 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,166 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,166 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:58,166 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:58,168 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 11:34:58,168 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:58,168 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:58,168 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:34:58,169 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:58,169 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:58,169 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,169 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:34:58,170 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:58,170 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:34:58,170 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,170 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,171 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,171 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:58,172 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837698.17
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:58,172 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:58,176 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
-- END TIS changes --
2017-10-24 11:34:58,176 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:58,181 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                            ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                            ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
?                                                                                                                           ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
?                                                                                                                           ^
-- END TIS changes --
2017-10-24 11:34:58,182 - session_2017-10-24T11_33_55_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:34:58,182 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:58,188 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 11:34:58,188 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:58,195 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:34:58,195 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:58,195 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:58,198 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:58,198 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:58,198 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:58,201 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])
2017-10-24 11:34:58,202 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:58,206 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_back), findout(?X.goal(X))])
?                          +++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_back), resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
-- END TIS changes --
2017-10-24 11:34:58,206 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:58,206 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,208 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_back), resolve_user(?X.goal(X)), perform(top)])
?                                               --------------------------
+ tis.shared.goals: stackset([perform(go_back), perform(top)])
-- END TIS changes --
2017-10-24 11:34:58,209 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:58,209 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_back), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_back, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:58,212 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:58,213 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:58,213 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,215 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_back, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 11:34:58,215 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,216 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,216 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,216 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:58,218 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:34:58,218 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,219 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,219 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,219 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:58,219 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:58,219 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None)
2017-10-24 11:34:58,219 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:58,219 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:58,220 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837698.17
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_back), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:58,220 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:58,225 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_back), perform(top)])
?                                              ++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 11:34:58,225 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:58,228 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_back, [], True, None))])
-- END TIS changes --
2017-10-24 11:34:58,229 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:58,231 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:58,231 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:58,231 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:58,231 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:58,234 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:58,234 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:58,234 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:58,236 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 11:34:58,236 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 11:34:58,237 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:58,237 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None))
2017-10-24 11:34:58,237 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None)
2017-10-24 11:34:58,237 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "go back", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:34:58,238 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,238 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:34:58,238 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:58,238 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:58,239 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,239 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:34:58,239 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:34:58,240 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:58,240 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,240 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,241 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,241 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 11:34:58,241 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:34:58,241 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 11:34:58,241 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 11:34:58,241 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 11:34:58,242 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 11:34:58,242 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 11:34:58,242 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp') generated as u'Went to the previous step'
2017-10-24 11:34:58,242 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None)
2017-10-24 11:34:58,243 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,244 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:58,245 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,245 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:58,245 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 11:34:58,245 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 11:34:58,245 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:34:58,245 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 11:34:58,246 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 11:34:58,246 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f05901608c0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f0590140a70>]
2017-10-24 11:34:58,246 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f05901608c0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f0590140a70>], sender=GuiBackend, reason=None)
2017-10-24 11:34:58,246 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:58,247 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None))
2017-10-24 11:34:58,247 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None)
2017-10-24 11:34:58,247 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to the previous step"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:58,248 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,248 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:34:58,248 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:58,248 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to the previous step"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 11:34:58,249 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,249 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f05901608c0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f0590140a70>], sender=GuiBackend, reason=None))
2017-10-24 11:34:58,249 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f05901608c0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f0590140a70>], sender=GuiBackend, reason=None)
2017-10-24 11:34:58,249 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_back", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to the previous step"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:58,250 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,250 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:58,265 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to the previous step"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:58,266 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:58,266 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to the previous step], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:58,266 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to the previous step], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:58,266 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:58,266 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 11:34:58,266 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 11:34:58,267 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 11:34:58,267 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 11:34:58,268 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837698.27
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_back), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_back), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:58,268 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:58,268 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:58,268 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:58,276 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:58,276 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:58,276 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:58,278 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 11:34:58,278 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:58,279 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:58,284 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:34:58,284 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:58,284 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,284 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:58,284 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,284 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:58,287 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_back)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:58,287 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:58,287 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,290 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_back), perform(top)])
?                                     ------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^ ^^
+ tis.shared.previous_goal: perform(go_back)
?                           ^^^^ ^^^^^^^^^^^
-- END TIS changes --
2017-10-24 11:34:58,290 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:58,290 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,290 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:58,290 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:58,290 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:58,291 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:58,291 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:58,291 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:58,291 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:58,291 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:58,291 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:58,291 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,295 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
?                          ^ ^^^^^ ^^^^^^                -
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^^^^^^ ^ ^
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:58,295 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,295 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,298 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
?                                                                                                        +++++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 11:34:58,298 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,298 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,298 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,298 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:58,298 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,299 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,299 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,299 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:58,299 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:58,301 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 11:34:58,302 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:58,302 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:58,303 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837698.27
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_back), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:58,303 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:58,308 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
?                                                                                                                +++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
- tis.private.tmp.sys.goals: stackset([perform(go_back), perform(top)])
?                                       ------ ^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
-- END TIS changes --
2017-10-24 11:34:58,308 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:58,312 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                                                  +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:58,312 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:58,314 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 11:34:58,314 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:58,317 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("0")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:58,317 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:58,317 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:58,317 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:58,319 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:58,320 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:58,320 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:58,322 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:58,322 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')])
2017-10-24 11:34:58,323 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 11:34:58,323 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None))
2017-10-24 11:34:58,323 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:58,323 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:58,323 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,324 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)))
2017-10-24 11:34:58,324 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 11:34:58,324 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:34:58,325 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,325 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,326 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,326 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("0")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")})
2017-10-24 11:34:58,327 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-24 11:34:58,327 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-24 11:34:58,327 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule: Move Move(answer(say_step("0")), ddd_name=u'recipehelp') generated as u'Ok 0.'
2017-10-24 11:34:58,327 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None)
2017-10-24 11:34:58,329 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,330 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:58,331 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("0")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:34:58,331 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:34:58,331 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp')])
2017-10-24 11:34:58,331 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("0")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")})
2017-10-24 11:34:58,331 - session_2017-10-24T11_33_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("0")), ddd_name=u'recipehelp')
2017-10-24 11:34:58,332 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f05901637a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f0590140710>]
2017-10-24 11:34:58,333 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f05901637a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f0590140710>], sender=GuiBackend, reason=None)
2017-10-24 11:34:58,333 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posted event
2017-10-24 11:34:58,333 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None))
2017-10-24 11:34:58,333 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok 0.], sender=GenerateModule, reason=None)
2017-10-24 11:34:58,333 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok 0."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:34:58,333 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,334 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:34:58,334 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok 0.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:34:58,334 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok 0."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 11:34:58,334 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,335 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f05901637a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f0590140710>], sender=GuiBackend, reason=None))
2017-10-24 11:34:58,335 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f05901637a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f0590140710>], sender=GuiBackend, reason=None)
2017-10-24 11:34:58,335 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok 0."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:34:58,335 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,336 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:58,378 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok 0."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:34:58,380 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:34:58,380 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok 0.], sender=TextOutputComponent, reason=None))
2017-10-24 11:34:58,380 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok 0.], sender=TextOutputComponent, reason=None)
2017-10-24 11:34:58,380 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:34:58,380 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-24 11:34:58,380 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-24 11:34:58,381 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
2017-10-24 11:34:58,381 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None))
2017-10-24 11:34:58,382 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837698.38
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok 0.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("0")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:58,383 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:58,383 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:58,383 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:58,387 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
-- END TIS changes --
2017-10-24 11:34:58,387 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:58,387 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:58,390 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:58,390 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:58,390 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:58,390 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:58,390 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:58,391 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:58,391 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:58,391 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:58,391 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:58,391 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:58,391 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:34:58,391 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:58,395 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_back)}
+ tis.shared.com: {device_activity_terminated(go_back), say_step("0")}
?                                                     +++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:58,395 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:34:58,395 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,398 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_back), say_step("0")}
+ tis.shared.com: {device_activity_terminated(go_back), say_step("0"), resolved(?X.say_step(X))}
?                                                                    ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 11:34:58,398 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:34:58,398 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,398 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,399 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,400 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:58,400 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:58,400 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:58,400 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:58,400 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:58,400 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:58,403 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:58,403 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:58,403 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok 0.], latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:58,403 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None))
2017-10-24 11:34:58,403 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: 0}], sender=DmeModule, reason=None)
2017-10-24 11:34:58,404 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "0"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:34:58,404 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:34:58,404 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok 0.], latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 11:34:58,405 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok 0.], latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:58,405 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok 0.], latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 11:34:58,406 - session_2017-10-24T11_33_55_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f05901245f0>:1.0
2017-10-24 11:34:58,406 - session_2017-10-24T11_33_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:34:59,406 - session_2017-10-24T11_33_55_0 - DEBUG - Timeout fired
2017-10-24 11:34:59,406 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:59,406 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:59,406 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 11:34:59,406 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:34:59,407 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837699.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("0")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_back), say_step("0"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:59,408 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:34:59,408 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:34:59,410 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:59,410 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:34:59,414 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:34:59,414 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:34:59,414 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:34:59,416 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:59,416 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:34:59,416 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:34:59,416 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:34:59,417 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:34:59,417 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:34:59,417 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:34:59,417 - session_2017-10-24T11_33_55_0 - INFO - BEGIN integrate_moves
2017-10-24 11:34:59,417 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:34:59,417 - session_2017-10-24T11_33_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:34:59,417 - session_2017-10-24T11_33_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:34:59,417 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:integrate
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - INFO - breaking out of accommodate
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - INFO - END integrate_moves
2017-10-24 11:34:59,418 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:59,421 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:34:59,421 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:59,421 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:59,424 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_back), say_step("0"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 11:34:59,424 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:59,424 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:59,425 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:59,425 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:34:59,425 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:34:59,425 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:34:59,425 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:34:59,425 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:34:59,425 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:34:59,425 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:34:59,426 - session_2017-10-24T11_33_55_0 - INFO - running ISU module: select
2017-10-24 11:34:59,427 - session_2017-10-24T11_33_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f0591871e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f0591037210>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508837699.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("0")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:34:59,427 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:34:59,431 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^ ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^^^^^^^^^^^^ ^^^^^ ^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step("0")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:59,431 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_action
2017-10-24 11:34:59,434 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:34:59,434 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:59,436 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:34:59,436 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:59,439 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:34:59,439 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:34:59,439 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:select_move
2017-10-24 11:34:59,439 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:34:59,442 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:34:59,442 - session_2017-10-24T11_33_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:34:59,442 - session_2017-10-24T11_33_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:34:59,444 - session_2017-10-24T11_33_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 11:34:59,444 - session_2017-10-24T11_33_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:34:59,445 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:37:34,261 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:37:34,261 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 11:37:34,261 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:37:34,261 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:37:34,262 - session_2017-10-24T11_33_55_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 11:37:34,262 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:37:34,262 - session_2017-10-24T11_33_55_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 11:37:34,263 - session_2017-10-24T11_33_55_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:37:34,263 - session_2017-10-24T11_33_55_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 11:37:34,263 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:37:34,263 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 11:37:34,263 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:37:34,264 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:37:34,264 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:37:34,264 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 11:37:34,264 - session_2017-10-24T11_33_55_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 11:37:34,264 - session_2017-10-24T11_33_55_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 11:37:34,264 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:37:34,264 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:37:34,265 - session_2017-10-24T11_33_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:37:34,265 - session_2017-10-24T11_33_55_0 - DEBUG - Sent.
2017-10-24 11:37:34,265 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 11:37:34,265 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 11:37:34,266 - session_2017-10-24T11_33_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:37:34,266 - session_2017-10-24T11_33_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:34,266 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:34,267 - session_2017-10-24T11_33_55_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:34,268 - session_2017-10-24T11_33_55_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:34,269 - session_2017-10-24T11_33_55_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:37:34,269 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 11:37:34,269 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 11:37:34,270 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 11:37:34,271 - session_2017-10-24T11_33_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 11:37:34,271 - session_2017-10-24T11_33_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
