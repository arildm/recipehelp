2017-10-24 15:42:01,331 - session_2017-10-24T15_42_01_0 - DEBUG - Backend()
2017-10-24 15:42:01,332 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.initialize()
2017-10-24 15:42:01,365 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f1ae6584e50>>, False])
2017-10-24 15:42:01,365 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f1ae6584e50>>, 'eng'])
2017-10-24 15:42:01,365 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f1ae6584e50>>, True, 'disabled'])
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f1ae6584e50>>])
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f1ae6584e50>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f1ae6584e50>>, 'eng', False, True])
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend initialized
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend uses language 'eng'
2017-10-24 15:42:01,366 - session_2017-10-24T15_42_01_0 - DEBUG - running module InterpretModule
2017-10-24 15:42:01,367 - session_2017-10-24T15_42_01_0 - DEBUG - running module DmeModule
2017-10-24 15:42:01,368 - session_2017-10-24T15_42_01_0 - DEBUG - running module DeviceManager
2017-10-24 15:42:01,368 - session_2017-10-24T15_42_01_0 - DEBUG - running module GenerateModule
2017-10-24 15:42:01,368 - session_2017-10-24T15_42_01_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 15:42:01,369 - session_2017-10-24T15_42_01_0 - DEBUG - running module GuiBackend
2017-10-24 15:42:01,369 - session_2017-10-24T15_42_01_0 - DEBUG - running module CogloadModule
2017-10-24 15:42:01,369 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:01,370 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:42:01,370 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 15:42:01,370 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 15:42:01,370 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 15:42:01,371 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:01,372 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:01,399 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 15:42:01,400 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:42:01,400 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 15:42:01,401 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,401 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 15:42:01,401 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 15:42:01,401 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 15:42:01,402 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:01,402 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:01,408 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 15:42:01,408 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:42:01,408 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 15:42:01,408 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,409 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,409 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,409 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 15:42:01,409 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 15:42:01,410 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852521.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:01,411 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:01,411 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:42:01,411 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:42:01,413 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:01,413 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:42:01,413 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:42:01,415 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:01,415 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:42:01,415 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:42:01,416 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:42:01,416 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:42:01,416 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:42:01,416 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:42:01,416 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:42:01,416 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 15:42:01,416 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:42:01,417 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:01,418 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:42:01,418 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:01,418 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:01,421 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:42:01,421 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:01,423 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:42:01,423 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:01,423 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:01,424 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:01,424 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:42:01,425 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:01,425 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:01,425 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:01,425 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:01,425 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:42:01,425 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:01,425 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:42:01,426 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852521.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:01,426 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:42:01,429 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 15:42:01,429 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:01,431 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:42:01,431 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:01,434 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:42:01,434 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:01,437 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:42:01,437 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:01,437 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:01,437 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:42:01,439 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:01,439 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:42:01,439 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:42:01,442 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 15:42:01,442 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:42:01,442 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 15:42:01,442 - session_2017-10-24T15_42_01_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,443 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,443 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,444 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,444 - session_2017-10-24T15_42_01_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 15:42:01,444 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 15:42:01,444 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 15:42:01,445 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 15:42:01,445 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 15:42:01,445 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 15:42:01,445 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:01,445 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:42:01,445 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:01,446 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:42:01,446 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:01,447 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 15:42:01,447 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 15:42:01,447 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:42:01,447 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:01,447 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:01,448 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:01,448 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 15:42:01,448 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:42:01,448 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:42:01,449 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:42:01,449 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 15:42:01,449 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 15:42:01,449 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:42:01,450 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 15:42:01,450 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:42:01,451 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:01,452 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:01,452 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:42:01,452 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:42:01,452 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 15:42:01,453 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:42:01,453 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:42:01,453 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:42:01,453 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message []
2017-10-24 15:42:01,453 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 15:42:01,453 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:42:01,453 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 15:42:01,454 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:42:01,454 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:42:01,454 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:01,454 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 15:42:01,454 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 15:42:01,454 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:42:01,455 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:01,455 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:01,494 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:42:01,494 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:42:01,494 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 15:42:01,494 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 15:42:01,495 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:42:01,495 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:42:01,495 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:42:01,495 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:42:01,495 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 15:42:01,496 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852521.5
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:01,497 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:01,497 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:42:01,497 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:42:01,500 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 15:42:01,500 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:42:01,500 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:42:01,502 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:01,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:42:01,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:42:01,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:42:01,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:42:01,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:42:01,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:42:01,503 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:42:01,503 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:42:01,504 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:42:01,504 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:42:01,504 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:01,507 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:42:01,507 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:42:01,507 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:01,507 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:42:01,507 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:01,507 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:01,510 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 15:42:01,510 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:42:01,510 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:01,510 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:42:01,510 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:01,510 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:01,511 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:01,512 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:42:01,512 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:01,512 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:01,512 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:01,512 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:01,512 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:42:01,515 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:01,515 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:01,515 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:42:01,515 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:42:01,515 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:01,515 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:42:01,516 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:01,516 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:42:01,516 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:42:01,517 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:42:01,517 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:10,977 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 15:42:10,977 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:42:10,977 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 15:42:10,977 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 15:42:10,977 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 15:42:10,977 - session_2017-10-24T15_42_01_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 15:42:10,978 - session_2017-10-24T15_42_01_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 15:42:10,983 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 15:42:10,984 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 15:42:10,984 - session_2017-10-24T15_42_01_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 15:42:10,984 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:42:10,984 - session_2017-10-24T15_42_01_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 15:42:10,984 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 15:42:10,985 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 15:42:10,985 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:42:10,985 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:42:10,985 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:42:10,985 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 15:42:10,986 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:10,986 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 15:42:10,986 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:42:10,986 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:42:10,987 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:42:10,987 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:42:10,988 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852530.99
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:10,989 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:10,992 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 15:42:10,993 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:10,997 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 15:42:10,997 - session_2017-10-24T15_42_01_0 - INFO - hypotheses reranking had no effect
2017-10-24 15:42:10,997 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:42:11,002 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 15:42:11,003 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:42:11,009 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 15:42:11,009 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:42:11,009 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:42:11,012 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:11,012 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:42:11,012 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:42:11,017 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 15:42:11,017 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:42:11,017 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:42:11,017 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:42:11,017 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:42:11,017 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:42:11,018 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 15:42:11,018 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:42:11,018 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 15:42:11,018 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:11,022 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 15:42:11,022 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:42:11,023 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:11,026 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 15:42:11,026 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:42:11,026 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:11,030 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 15:42:11,030 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:42:11,030 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:42:11,031 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:11,031 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:11,031 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:11,031 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:42:11,031 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:42:11,032 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:11,032 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:42:11,032 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:11,032 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:11,032 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:42:11,035 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 15:42:11,035 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:11,035 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:11,036 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:11,036 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:11,036 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:42:11,036 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 15:42:11,036 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:11,036 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:42:11,037 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852530.99
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:11,037 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:42:11,041 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 15:42:11,041 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:11,044 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:42:11,045 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:11,048 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 15:42:11,048 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:11,048 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:11,052 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 15:42:11,052 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:11,055 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:42:11,055 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:11,055 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:11,055 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:42:11,057 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:11,057 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:42:11,057 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:42:11,060 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:11,060 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 15:42:11,060 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:42:11,061 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 15:42:11,061 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 15:42:11,061 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 15:42:11,061 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:11,062 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:42:11,062 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:11,062 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:42:11,062 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:11,063 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 15:42:11,063 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:42:11,064 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:42:11,064 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:11,064 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:11,066 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:11,066 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 15:42:11,066 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 15:42:11,066 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 15:42:11,066 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:42:11,066 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:42:11,067 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 15:42:11,067 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 15:42:11,067 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 15:42:11,067 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 15:42:11,067 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 15:42:11,068 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 15:42:11,068 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 15:42:11,068 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 15:42:11,070 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:11,072 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:11,072 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:42:11,072 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 15:42:11,072 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 15:42:11,072 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 15:42:11,072 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 15:42:11,072 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:42:11,073 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:42:11,073 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 15:42:11,073 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message []
2017-10-24 15:42:11,073 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 15:42:11,073 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:42:11,074 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 15:42:11,074 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 15:42:11,074 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:42:11,074 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:11,075 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 15:42:11,075 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 15:42:11,075 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:42:11,076 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:11,076 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:11,084 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:42:11,084 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:42:11,085 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 15:42:11,085 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 15:42:11,085 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:42:11,085 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 15:42:11,085 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 15:42:11,085 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 15:42:11,086 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 15:42:11,087 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852531.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:11,087 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:11,087 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:42:11,088 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:42:11,094 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:42:11,094 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:42:11,095 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:42:11,097 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:11,097 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:42:11,097 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:42:11,097 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:42:11,097 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:42:11,097 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:42:11,097 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:42:11,097 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:42:11,098 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:42:11,098 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:42:11,098 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:42:11,098 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:11,103 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:42:11,103 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:42:11,103 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:11,103 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:42:11,103 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:11,104 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:11,107 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:42:11,107 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:42:11,107 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:11,108 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:42:11,108 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:11,108 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:11,111 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 15:42:11,111 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:11,112 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:42:11,113 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:42:11,113 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:11,113 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:42:11,113 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:11,113 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:11,113 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:42:11,113 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:11,114 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:11,114 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:11,114 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:11,114 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:42:11,116 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:11,117 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:11,117 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:42:11,117 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:42:11,117 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:11,117 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:42:11,117 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:11,118 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:42:11,118 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:42:11,118 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:42:11,118 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:14,209 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 15:42:14,210 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:42:14,210 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-24 15:42:14,210 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 15:42:14,210 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 15:42:14,210 - session_2017-10-24T15_42_01_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 15:42:14,210 - session_2017-10-24T15_42_01_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 15:42:14,212 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 15:42:14,213 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-24 15:42:14,213 - session_2017-10-24T15_42_01_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-24 15:42:14,213 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:42:14,214 - session_2017-10-24T15_42_01_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 15:42:14,214 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 15:42:14,214 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 15:42:14,214 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:42:14,214 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:42:14,214 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:42:14,214 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 15:42:14,215 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:14,216 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 15:42:14,216 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:42:14,216 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:42:14,217 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:42:14,217 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:42:14,219 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852534.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:14,219 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:14,224 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-24 15:42:14,225 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:14,229 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-24 15:42:14,233 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-24 15:42:14,234 - session_2017-10-24T15_42_01_0 - INFO - hypotheses reranking had no effect
2017-10-24 15:42:14,234 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:42:14,237 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 15:42:14,237 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:42:14,242 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 15:42:14,242 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:42:14,242 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:42:14,245 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:14,245 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:42:14,245 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:42:14,252 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 15:42:14,253 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:42:14,253 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:42:14,253 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:42:14,253 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:42:14,253 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:42:14,253 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 15:42:14,253 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:42:14,253 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 15:42:14,254 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:14,258 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 15:42:14,258 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:42:14,258 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:14,263 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 15:42:14,263 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:42:14,267 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 15:42:14,267 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:14,267 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:42:14,267 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:42:14,267 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:14,267 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:14,267 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:14,267 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:42:14,268 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:42:14,268 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:14,268 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:42:14,268 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:14,271 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose step1")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 15:42:14,271 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:14,271 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:14,274 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 15:42:14,274 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:14,274 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:14,274 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:14,274 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:42:14,277 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 15:42:14,277 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:14,278 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:14,278 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:14,278 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:14,278 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:42:14,278 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 15:42:14,278 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 15:42:14,278 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 15:42:14,278 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:42:14,280 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852534.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:14,280 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:42:14,284 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose step1")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 15:42:14,284 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:14,288 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:42:14,288 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:14,291 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 15:42:14,291 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:14,295 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:42:14,295 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:14,295 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:14,295 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:42:14,298 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:14,298 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:42:14,299 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:42:14,301 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 15:42:14,301 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 15:42:14,302 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:42:14,302 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 15:42:14,302 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 15:42:14,302 - session_2017-10-24T15_42_01_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 15:42:14,302 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-24 15:42:14,302 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 15:42:14,302 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 15:42:14,303 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:14,303 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 15:42:14,303 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 15:42:14,304 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:42:14,305 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:14,305 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 15:42:14,305 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:42:14,305 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:42:14,306 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:14,306 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:14,307 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:14,307 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 15:42:14,307 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 15:42:14,307 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 15:42:14,308 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp') generated as u'Ok chose step1.'
2017-10-24 15:42:14,308 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 15:42:14,309 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:14,310 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:42:14,311 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:42:14,311 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:42:14,311 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 15:42:14,311 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 15:42:14,311 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 15:42:14,312 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae407a368>]
2017-10-24 15:42:14,313 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae407a368>], sender=GuiBackend, reason=None)
2017-10-24 15:42:14,313 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:42:14,313 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None))
2017-10-24 15:42:14,313 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 15:42:14,313 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose step1."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:42:14,313 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:14,314 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 15:42:14,314 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:42:14,314 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose step1."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 15:42:14,314 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:14,315 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae407a368>], sender=GuiBackend, reason=None))
2017-10-24 15:42:14,315 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae407a368>], sender=GuiBackend, reason=None)
2017-10-24 15:42:14,315 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose step1."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:42:14,316 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:14,316 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:14,332 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose step1."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:42:14,333 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:42:14,333 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None))
2017-10-24 15:42:14,333 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None)
2017-10-24 15:42:14,333 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:42:14,333 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 15:42:14,333 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 15:42:14,334 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 15:42:14,334 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None))
2017-10-24 15:42:14,335 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852534.33
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:14,335 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:14,335 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:42:14,336 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:42:14,342 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:42:14,342 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:42:14,342 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:42:14,344 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:14,344 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:42:14,345 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:42:14,345 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:42:14,345 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:42:14,345 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:42:14,345 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:42:14,345 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:42:14,345 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:42:14,345 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:42:14,346 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:42:14,346 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:14,349 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose step1")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:42:14,349 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:42:14,349 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose step1")}
+ tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
?                                           ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:42:14,353 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:42:14,354 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:14,354 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:42:14,354 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:14,354 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:14,354 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:42:14,354 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:14,354 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:14,355 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:14,355 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:14,355 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:42:14,358 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 15:42:14,358 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 15:42:14,358 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:42:14,358 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 15:42:14,358 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 15:42:14,359 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:42:14,359 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:42:14,359 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 15:42:14,360 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:42:14,360 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:42:14,360 - session_2017-10-24T15_42_01_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f1ae407a440>:1.0
2017-10-24 15:42:14,361 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:42:15,361 - session_2017-10-24T15_42_01_0 - DEBUG - Timeout fired
2017-10-24 15:42:15,361 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:42:15,361 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:42:15,361 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:42:15,362 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:42:15,363 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852535.36
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:15,363 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:42:15,363 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:42:15,366 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:42:15,366 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:42:15,370 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 15:42:15,370 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:42:15,370 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:42:15,372 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:15,372 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:42:15,372 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:42:15,372 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:15,373 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:15,374 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:15,374 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:42:15,375 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:42:15,375 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:42:15,375 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:42:15,375 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:15,378 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:42:15,379 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:15,379 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:15,383 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose step1")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 15:42:15,383 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:15,383 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:15,383 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:15,383 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:42:15,383 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:42:15,384 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:42:15,384 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:42:15,384 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:42:15,384 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:42:15,384 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:42:15,384 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:42:15,385 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852535.36
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:42:15,385 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:42:15,391 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose step1")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 15:42:15,391 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:42:15,393 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:42:15,394 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:15,396 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:42:15,396 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:15,400 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:42:15,400 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:42:15,400 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:42:15,400 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:42:15,402 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:42:15,402 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:42:15,403 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:42:15,405 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 15:42:15,406 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:42:15,406 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:43:07,340 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 15:43:07,341 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:07,341 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 15:43:07,341 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:07,341 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:07,341 - session_2017-10-24T15_42_01_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 15:43:07,341 - session_2017-10-24T15_42_01_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 15:43:07,343 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 15:43:07,343 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 15:43:07,343 - session_2017-10-24T15_42_01_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 15:43:07,344 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:43:07,344 - session_2017-10-24T15_42_01_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 15:43:07,344 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:07,344 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:43:07,344 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:07,344 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:07,345 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,345 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 15:43:07,346 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:43:07,346 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:43:07,346 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,346 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,347 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,348 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 15:43:07,348 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 15:43:07,348 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:43:07,348 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:07,348 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 15:43:07,348 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 15:43:07,349 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:07,349 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 15:43:07,349 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:43:07,350 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,351 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,352 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:43:07,352 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:43:07,352 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 15:43:07,352 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 15:43:07,352 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:43:07,352 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:07,353 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae407a3b0>]
2017-10-24 15:43:07,353 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae407a3b0>], sender=GuiBackend, reason=None)
2017-10-24 15:43:07,353 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:43:07,353 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 15:43:07,353 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:43:07,353 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 15:43:07,354 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 15:43:07,354 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 15:43:07,354 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,354 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 15:43:07,354 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:43:07,355 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:43:07,355 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,356 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae407a3b0>], sender=GuiBackend, reason=None))
2017-10-24 15:43:07,356 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae407a3b0>], sender=GuiBackend, reason=None)
2017-10-24 15:43:07,356 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:43:07,357 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,357 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:43:07,365 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:43:07,365 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:07,366 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 15:43:07,366 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 15:43:07,366 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:43:07,366 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:07,366 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:07,366 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:07,367 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 15:43:07,368 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852587.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:07,368 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:07,368 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:07,369 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:07,373 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 15:43:07,373 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:07,373 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:07,375 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:07,375 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:07,375 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:07,376 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:07,381 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:43:07,381 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:07,381 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,381 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:07,381 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,381 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:07,384 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 15:43:07,384 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:07,384 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:07,385 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:07,386 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:07,386 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,386 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,386 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:07,386 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,386 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,386 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,387 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:07,387 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:07,389 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 15:43:07,389 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:07,390 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:07,390 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:43:07,390 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:07,390 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:07,390 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,391 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:43:07,391 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:07,391 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:07,391 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,392 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,392 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,392 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:07,393 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852587.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:07,394 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:07,397 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 15:43:07,397 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:07,401 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 15:43:07,402 - session_2017-10-24T15_42_01_0 - INFO - hypotheses reranking had no effect
2017-10-24 15:43:07,402 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:07,406 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 15:43:07,407 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:07,413 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 15:43:07,413 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:07,414 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:07,416 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:07,417 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:07,417 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:07,423 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 15:43:07,423 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:07,423 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:07,423 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:07,423 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:07,423 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:07,423 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 15:43:07,423 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:07,424 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 15:43:07,424 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:07,427 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 15:43:07,427 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:07,427 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,430 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 15:43:07,430 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:07,430 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,433 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 15:43:07,433 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:07,433 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:07,433 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:07,433 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:07,433 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:07,434 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:07,434 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:07,434 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:07,434 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:07,434 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,437 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 15:43:07,437 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,438 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,438 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,438 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:07,440 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 15:43:07,440 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,441 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,441 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,441 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:07,441 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:07,441 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 15:43:07,441 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:07,441 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:43:07,442 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852587.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:07,442 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:43:07,446 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 15:43:07,446 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:07,449 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 15:43:07,449 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:07,452 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:43:07,452 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:07,452 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:07,452 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:43:07,455 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:07,455 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:43:07,455 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:43:07,457 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 15:43:07,458 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 15:43:07,458 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:07,458 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 15:43:07,458 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 15:43:07,458 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 15:43:07,459 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,459 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:43:07,459 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:07,459 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:07,460 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,460 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 15:43:07,461 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:07,461 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:43:07,461 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,461 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,462 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,462 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 15:43:07,463 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 15:43:07,463 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 15:43:07,463 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 15:43:07,463 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 15:43:07,463 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 15:43:07,463 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 15:43:07,464 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-24 15:43:07,464 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 15:43:07,465 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,466 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:43:07,467 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,467 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:43:07,467 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 15:43:07,467 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 15:43:07,467 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 15:43:07,467 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 15:43:07,467 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 15:43:07,468 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f1ae407ae18>, <tdm.tdm_gui_protocol.Popup instance at 0x7f1ae4019758>]
2017-10-24 15:43:07,468 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f1ae407ae18>, <tdm.tdm_gui_protocol.Popup instance at 0x7f1ae4019758>], sender=GuiBackend, reason=None)
2017-10-24 15:43:07,468 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:43:07,468 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-24 15:43:07,468 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 15:43:07,468 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:43:07,469 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,470 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 15:43:07,470 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:43:07,470 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 15:43:07,471 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,471 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f1ae407ae18>, <tdm.tdm_gui_protocol.Popup instance at 0x7f1ae4019758>], sender=GuiBackend, reason=None))
2017-10-24 15:43:07,471 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f1ae407ae18>, <tdm.tdm_gui_protocol.Popup instance at 0x7f1ae4019758>], sender=GuiBackend, reason=None)
2017-10-24 15:43:07,471 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:43:07,472 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,472 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:43:07,491 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:43:07,491 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:07,492 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-24 15:43:07,492 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-24 15:43:07,492 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:43:07,492 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 15:43:07,492 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 15:43:07,492 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 15:43:07,493 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 15:43:07,494 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852587.49
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:07,494 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:07,494 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:07,494 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:07,500 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:43:07,500 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:07,500 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:07,503 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:07,504 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:07,504 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:07,504 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:07,508 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:43:07,508 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:07,508 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,508 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:07,508 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,508 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:07,511 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:43:07,511 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:07,511 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^
+ tis.shared.previous_goal: perform(go_to_next)
?                           ^^^^ +++++++++  +++
-- END TIS changes --
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:07,515 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:07,516 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:07,516 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:07,516 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:07,516 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,520 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:43:07,520 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,520 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,523 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 15:43:07,523 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,523 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,524 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,524 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:07,524 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,524 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,525 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,525 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:07,525 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:07,528 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 15:43:07,528 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 15:43:07,528 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:43:07,529 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852587.49
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:07,529 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:43:07,535 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 15:43:07,535 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:07,538 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:43:07,538 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:07,542 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 15:43:07,542 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:07,545 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:43:07,545 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:07,545 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:07,546 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:43:07,548 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:07,548 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:43:07,548 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:43:07,551 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 15:43:07,552 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 15:43:07,552 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 15:43:07,552 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 15:43:07,552 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 15:43:07,552 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:07,553 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,553 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-24 15:43:07,554 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 15:43:07,554 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:43:07,554 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,555 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,557 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,557 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 15:43:07,557 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:43:07,557 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 15:43:07,557 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:07,557 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 15:43:07,557 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 15:43:07,558 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:07,558 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 15:43:07,558 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 15:43:07,560 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,563 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:07,563 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:43:07,563 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 15:43:07,564 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 15:43:07,564 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:43:07,564 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 15:43:07,564 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:07,565 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae40b1a70>]
2017-10-24 15:43:07,565 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae40b1a70>], sender=GuiBackend, reason=None)
2017-10-24 15:43:07,565 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:43:07,565 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 15:43:07,565 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 15:43:07,566 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:43:07,567 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,567 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae40b1a70>], sender=GuiBackend, reason=None))
2017-10-24 15:43:07,567 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae40b1a70>], sender=GuiBackend, reason=None)
2017-10-24 15:43:07,567 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:43:07,568 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,568 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:43:07,631 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:43:07,632 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:07,632 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 15:43:07,632 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 15:43:07,632 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:43:07,632 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 15:43:07,632 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 15:43:07,632 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 15:43:07,633 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-24 15:43:07,634 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852587.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:07,634 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:07,634 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:07,634 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:07,639 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 15:43:07,639 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:07,639 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:07,642 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:07,642 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:07,642 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:07,642 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:07,642 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:07,642 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:07,643 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:07,643 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:07,643 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:07,643 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:07,643 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:07,643 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:07,647 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:43:07,647 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:07,647 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,647 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:07,648 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,648 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:07,651 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 15:43:07,651 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:07,651 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,651 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:07,652 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:07,653 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,653 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,653 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:07,653 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:07,653 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:07,654 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:07,654 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:07,654 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:07,657 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 15:43:07,657 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 15:43:07,657 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:07,657 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 15:43:07,657 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 15:43:07,657 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:07,658 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:07,658 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:43:07,658 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:07,659 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:07,659 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:43:18,992 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "yes"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 15:43:18,992 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:18,992 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None))
2017-10-24 15:43:18,992 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:18,993 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:18,993 - session_2017-10-24T15_42_01_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "yes"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 15:43:18,993 - session_2017-10-24T15_42_01_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 15:43:18,995 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 15:43:18,995 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])} for DDD 'recipehelp'
2017-10-24 15:43:18,995 - session_2017-10-24T15_42_01_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
2017-10-24 15:43:18,995 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:43:18,996 - session_2017-10-24T15_42_01_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Yes": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "yes"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "True"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 15:43:18,996 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:18,996 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None))
2017-10-24 15:43:18,996 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:43:18,997 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:43:18,997 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:43:18,997 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 15:43:18,997 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:18,998 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 15:43:18,998 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:18,998 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:18,999 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:18,999 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:19,000 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852599.0
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:19,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:19,005 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^^                                                                                                              ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^                                                                                                              ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^^                                                                                                              -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^
-- END TIS changes --
2017-10-24 15:43:19,005 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:19,010 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
-- END TIS changes --
2017-10-24 15:43:19,014 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^^
-- END TIS changes --
2017-10-24 15:43:19,015 - session_2017-10-24T15_42_01_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-24 15:43:19,016 - session_2017-10-24T15_42_01_0 - INFO - Could not log rerank
2017-10-24 15:43:19,016 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:19,020 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 15:43:19,020 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:19,025 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:43:19,025 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:19,025 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:19,028 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:19,028 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:19,028 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:19,036 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ++++++++++++++++++++ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    ++++++++++++++
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 15:43:19,037 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:19,037 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:19,037 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:19,037 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:19,038 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:19,038 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 15:43:19,038 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:19,038 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 15:43:19,038 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:19,043 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(True)}
?                          ++++++++++
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), done(True)}
?                                                        ++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 15:43:19,043 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:19,043 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:19,048 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), done(True)}
+ tis.shared.com: {device_activity_terminated(go_to_next), done(True), resolved(?X.done(X))}
?                                                                    ++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 15:43:19,048 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:19,051 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
?                           ---------------------
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-24 15:43:19,051 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:19,051 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:19,051 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:19,052 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:19,052 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:19,052 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:19,052 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:19,052 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:19,052 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:19,052 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:19,053 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:19,056 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {device_activity_terminated(go_to_next), done(True), resolved(?X.done(X))}
?                                                        ----------------------------------
+ tis.shared.com: {device_activity_terminated(go_to_next)}
-- END TIS changes --
2017-10-24 15:43:19,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:19,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:19,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:19,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:19,059 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 15:43:19,060 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:19,060 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:19,060 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:19,060 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:19,060 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:19,060 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 15:43:19,061 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 15:43:19,061 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 15:43:19,061 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:43:19,062 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852599.0
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:19,062 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:43:19,066 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^^^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                ^^^^^ ^
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 15:43:19,066 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:19,069 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:43:19,069 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:19,072 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 15:43:19,073 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:19,075 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:43:19,075 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:19,076 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:19,076 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:43:19,078 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:19,078 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:43:19,079 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:43:19,081 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 15:43:19,082 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')])
2017-10-24 15:43:19,082 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:19,082 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None))
2017-10-24 15:43:19,082 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 15:43:19,082 - session_2017-10-24T15_42_01_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 15:43:19,082 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None))
2017-10-24 15:43:19,083 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 15:43:19,083 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": "yes", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 15:43:19,083 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:19,083 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 15:43:19,083 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 15:43:19,084 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:19,084 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:19,085 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)))
2017-10-24 15:43:19,085 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:19,085 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:43:19,086 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:19,086 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:19,087 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:19,087 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 15:43:19,087 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')
2017-10-24 15:43:19,087 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')
2017-10-24 15:43:19,088 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp') generated as u'So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..'
2017-10-24 15:43:19,088 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=GenerateModule, reason=None)
2017-10-24 15:43:19,089 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:19,090 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:43:19,091 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:19,091 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:43:19,092 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')])
2017-10-24 15:43:19,092 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 15:43:19,092 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')
2017-10-24 15:43:19,093 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae400eab8>]
2017-10-24 15:43:19,093 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae400eab8>], sender=GuiBackend, reason=None)
2017-10-24 15:43:19,093 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:43:19,093 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=GenerateModule, reason=None))
2017-10-24 15:43:19,093 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=GenerateModule, reason=None)
2017-10-24 15:43:19,093 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:43:19,094 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:19,094 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 15:43:19,094 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:43:19,094 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 15:43:19,095 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:19,095 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae400eab8>], sender=GuiBackend, reason=None))
2017-10-24 15:43:19,095 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae400eab8>], sender=GuiBackend, reason=None)
2017-10-24 15:43:19,095 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:43:19,096 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:19,096 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:43:19,114 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:43:19,115 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:19,115 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TextOutputComponent, reason=None))
2017-10-24 15:43:19,115 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TextOutputComponent, reason=None)
2017-10-24 15:43:19,115 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:43:19,115 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None)
2017-10-24 15:43:19,115 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None)
2017-10-24 15:43:19,115 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None)
2017-10-24 15:43:19,116 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None))
2017-10-24 15:43:19,117 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852599.12
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:19,117 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:19,117 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:19,117 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:19,124 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:43:19,124 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:19,124 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:19,127 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:19,128 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:19,128 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:19,128 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:19,128 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:19,128 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:19,128 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:19,128 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:19,129 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:19,129 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:19,129 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:19,129 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:19,132 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:43:19,132 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:19,132 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:19,136 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), resolved(?X.say_step(X))}
?                                                                                                                                                                                                                                                                                 ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 15:43:19,136 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:19,136 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:19,136 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:19,137 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:19,138 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:19,138 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:19,138 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:19,138 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:19,138 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:19,138 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:19,141 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 15:43:19,141 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 15:43:19,141 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:43:19,141 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 15:43:19,141 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 15:43:19,142 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:19,142 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:19,143 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 15:43:19,143 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:43:19,143 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [So, Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:43:19,144 - session_2017-10-24T15_42_01_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f1ae40321b8>:1.0
2017-10-24 15:43:19,145 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:43:20,144 - session_2017-10-24T15_42_01_0 - DEBUG - Timeout fired
2017-10-24 15:43:20,144 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:43:20,144 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:43:20,144 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:43:20,145 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:43:20,146 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852600.14
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:20,146 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:20,146 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:20,148 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:43:20,148 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:20,153 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 15:43:20,153 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:20,153 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:20,156 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:20,156 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:20,156 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:20,156 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:20,156 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:20,156 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:20,157 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:20,158 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:20,158 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:20,158 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:20,158 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:20,161 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:43:20,161 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:20,161 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:20,164 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 15:43:20,164 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:20,164 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:20,164 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:20,164 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:20,164 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:20,165 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:20,165 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:20,165 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:20,166 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:20,166 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:20,166 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:43:20,167 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852600.14
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:20,167 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:43:20,172 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 15:43:20,172 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:20,174 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:43:20,174 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:20,177 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:43:20,177 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:20,180 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:43:20,180 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:20,180 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:20,180 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:43:20,182 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:20,182 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:43:20,182 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:43:20,185 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 15:43:20,185 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:43:20,185 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:43:51,838 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "yes"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 15:43:51,839 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:51,839 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None))
2017-10-24 15:43:51,839 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:51,839 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:51,839 - session_2017-10-24T15_42_01_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "yes"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 15:43:51,839 - session_2017-10-24T15_42_01_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 15:43:51,841 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 15:43:51,841 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])} for DDD 'recipehelp'
2017-10-24 15:43:51,841 - session_2017-10-24T15_42_01_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
2017-10-24 15:43:51,841 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:43:51,842 - session_2017-10-24T15_42_01_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Yes": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "yes"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "True"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 15:43:51,842 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 15:43:51,842 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:43:51,842 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:51,842 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:51,843 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,843 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 15:43:51,843 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:43:51,844 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:43:51,844 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,844 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,845 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,846 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 15:43:51,846 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 15:43:51,846 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:43:51,846 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:51,846 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 15:43:51,847 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 15:43:51,847 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:51,847 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 15:43:51,847 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:43:51,848 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,850 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,850 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:43:51,850 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:43:51,850 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 15:43:51,850 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 15:43:51,851 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:43:51,851 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:51,851 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae4065d40>]
2017-10-24 15:43:51,851 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae4065d40>], sender=GuiBackend, reason=None)
2017-10-24 15:43:51,851 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:43:51,851 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None))
2017-10-24 15:43:51,852 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:43:51,852 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 15:43:51,852 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 15:43:51,852 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 15:43:51,852 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,853 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 15:43:51,853 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:43:51,853 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:43:51,853 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,853 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae4065d40>], sender=GuiBackend, reason=None))
2017-10-24 15:43:51,854 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae4065d40>], sender=GuiBackend, reason=None)
2017-10-24 15:43:51,854 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:43:51,855 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,855 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:43:51,884 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:43:51,885 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:51,885 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 15:43:51,885 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 15:43:51,885 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:43:51,885 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:51,885 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:51,886 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:51,886 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 15:43:51,887 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852631.89
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:51,887 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:51,887 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:51,888 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:51,892 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 15:43:51,892 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:51,892 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:51,895 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:51,896 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:51,896 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:51,896 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:51,900 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:43:51,900 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:51,900 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:51,900 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:51,900 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:51,900 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:51,903 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 15:43:51,904 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:51,904 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:51,904 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:51,905 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:51,906 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:51,906 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:51,906 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:51,906 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:51,906 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:51,906 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:51,906 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:51,907 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:51,907 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:51,909 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 15:43:51,909 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:51,909 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:51,909 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:43:51,910 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:51,910 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:51,910 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,910 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:43:51,911 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:51,911 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:51,912 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,912 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,912 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,912 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:51,914 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852631.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:51,914 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:51,919 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^^                                                                                                              ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^                                                                                                              ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^^                                                                                                              -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^
-- END TIS changes --
2017-10-24 15:43:51,919 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:51,920 - session_2017-10-24T15_42_01_0 - INFO - hypotheses reranking had no effect
2017-10-24 15:43:51,920 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:51,925 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes')])
-- END TIS changes --
2017-10-24 15:43:51,926 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:51,932 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 15:43:51,932 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:51,933 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:51,936 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:51,936 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:51,936 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:51,943 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.usr.bel: {}
+ tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ^^^^^^^^^^^^ --------------
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^
- tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    --------------
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
- tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 15:43:51,943 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:51,943 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:51,946 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 15:43:51,946 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:51,947 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:51,947 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:51,947 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-24 15:43:51,947 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:51,947 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-24 15:43:51,947 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:51,947 - session_2017-10-24T15_42_01_0 - INFO - shifted: OpenQueue([#, Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes')])
2017-10-24 15:43:51,948 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes')])
2017-10-24 15:43:51,948 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:51,948 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:51,950 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: removeYesNo
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#, Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes')])
+ tis.private.nim: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:43:51,950 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:51,950 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:51,951 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:51,951 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:51,951 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:51,951 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:51,951 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:51,951 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:51,951 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:51,951 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:51,952 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:51,952 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:51,952 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:51,952 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:51,952 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 15:43:51,952 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:51,952 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:43:51,953 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852631.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes')])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:51,953 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:43:51,956 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:43:51,956 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:51,959 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 +++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:43:51,959 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:51,959 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:51,962 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.goal(X)))])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:43:51,962 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:43:51,962 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:43:51,962 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:43:51,965 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:51,965 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:43:51,965 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:43:51,967 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:51,968 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:43:51,968 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:51,968 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None))
2017-10-24 15:43:51,968 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 15:43:51,968 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": "yes", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 15:43:51,969 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,969 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:43:51,969 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:51,969 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:51,971 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,971 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)))
2017-10-24 15:43:51,972 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:43:51,972 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:43:51,972 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,972 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,973 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,973 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:43:51,974 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:51,975 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:51,975 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 15:43:51,976 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:43:51,977 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,978 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:43:51,978 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:43:51,978 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:43:51,979 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:43:51,979 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:43:51,979 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message []
2017-10-24 15:43:51,979 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 15:43:51,979 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:43:51,980 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 15:43:51,980 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:43:51,980 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:43:51,981 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,981 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 15:43:51,981 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 15:43:51,981 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:43:51,982 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:51,982 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:43:51,985 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:43:51,986 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:43:51,986 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 15:43:51,986 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 15:43:51,986 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:43:51,986 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:51,986 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:51,986 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:43:51,987 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 15:43:51,988 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852631.99
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:43:51,988 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:43:51,988 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:43:51,988 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:43:51,992 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
- tis.sys_turns: 0
?                ^
+ tis.sys_turns: 1
?                ^
-- END TIS changes --
2017-10-24 15:43:51,992 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:43:51,993 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:43:51,995 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:51,995 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:43:51,995 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:43:51,995 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:43:51,995 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:43:51,995 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:43:51,995 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:43:51,996 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:43:51,996 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:51,996 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:43:51,996 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:43:51,996 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:43:52,000 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 15:43:52,000 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:43:52,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:52,000 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:43:52,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:52,000 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:43:52,001 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:43:52,001 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:52,001 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:43:52,001 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:52,001 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:43:52,001 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:43:52,001 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:43:52,001 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:43:52,002 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:52,002 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:52,002 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:43:52,002 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:43:52,002 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:43:52,002 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:43:52,002 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:43:52,003 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:43:52,005 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:43:52,005 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:52,005 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [What would you like to do?], latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:52,005 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:43:52,005 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:43:52,006 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:43:52,006 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:43:52,006 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [What would you like to do?], latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:43:52,007 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [What would you like to do?], latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:52,007 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [What would you like to do?], latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:43:52,007 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:44:23,888 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 15:44:23,889 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:44:23,889 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 15:44:23,889 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 15:44:23,889 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 15:44:23,889 - session_2017-10-24T15_42_01_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 15:44:23,889 - session_2017-10-24T15_42_01_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 15:44:23,890 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 15:44:23,890 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 15:44:23,890 - session_2017-10-24T15_42_01_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 15:44:23,891 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:44:23,891 - session_2017-10-24T15_42_01_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 15:44:23,891 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 15:44:23,891 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 15:44:23,891 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:44:23,892 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:44:23,892 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:44:23,892 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 15:44:23,892 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:23,892 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 15:44:23,893 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:44:23,893 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:44:23,894 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:44:23,894 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:44:23,895 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852663.89
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:23,895 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:44:23,899 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 15:44:23,899 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:44:23,903 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 15:44:23,903 - session_2017-10-24T15_42_01_0 - INFO - hypotheses reranking had no effect
2017-10-24 15:44:23,903 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:44:23,907 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                      ^ ^ ---  ^^^^^                                    ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
?                                      ^^^^^ ^   ^^^^^^^^                                   + ^                              ^                 +++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 15:44:23,907 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:44:23,912 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
- tis.sys_turns: 1
?                ^
+ tis.sys_turns: 0
?                ^
-- END TIS changes --
2017-10-24 15:44:23,912 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:44:23,912 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:44:23,914 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:23,914 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:44:23,914 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:44:23,917 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:23,917 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:44:23,917 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:44:23,918 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:44:23,918 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:44:23,918 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:44:23,918 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 15:44:23,918 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:44:23,918 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 15:44:23,918 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:44:23,921 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 15:44:23,921 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:44:23,922 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:23,924 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 15:44:23,924 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:44:23,924 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:23,927 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 15:44:23,927 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:44:23,927 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:44:23,927 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:23,927 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:23,927 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:23,927 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:44:23,928 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:44:23,928 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:23,928 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:44:23,928 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:23,931 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 15:44:23,931 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:23,931 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:23,931 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:23,931 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:44:23,933 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 15:44:23,934 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:23,934 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:23,934 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:23,935 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:23,935 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:44:23,935 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 15:44:23,935 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:44:23,936 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:44:23,937 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852663.89
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:23,937 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:44:23,941 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 15:44:23,941 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:44:23,944 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 15:44:23,944 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:44:23,947 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:44:23,947 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:44:23,948 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:44:23,948 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:44:23,950 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:23,950 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:44:23,950 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:44:23,953 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 15:44:23,953 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 15:44:23,953 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:44:23,953 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 15:44:23,954 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 15:44:23,954 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 15:44:23,954 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:23,954 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:44:23,954 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:44:23,955 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:44:23,955 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:23,956 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 15:44:23,957 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:44:23,957 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:44:23,957 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:23,957 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:23,958 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:23,958 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 15:44:23,958 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 15:44:23,959 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 15:44:23,959 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 15:44:23,959 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 15:44:23,959 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 15:44:23,959 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 15:44:23,960 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-24 15:44:23,960 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 15:44:23,961 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:23,962 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:44:23,963 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:23,963 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:44:23,963 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 15:44:23,963 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 15:44:23,963 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 15:44:23,963 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 15:44:23,963 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 15:44:23,964 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f1ae407a2d8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f1ae40b17e8>]
2017-10-24 15:44:23,964 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f1ae407a2d8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f1ae40b17e8>], sender=GuiBackend, reason=None)
2017-10-24 15:44:23,964 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:44:23,964 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-24 15:44:23,965 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 15:44:23,965 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:44:23,965 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:23,965 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 15:44:23,965 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:44:23,966 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 15:44:23,967 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:23,967 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f1ae407a2d8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f1ae40b17e8>], sender=GuiBackend, reason=None))
2017-10-24 15:44:23,967 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f1ae407a2d8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f1ae40b17e8>], sender=GuiBackend, reason=None)
2017-10-24 15:44:23,967 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:44:23,968 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:23,968 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:44:23,976 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:44:23,976 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:44:23,976 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-24 15:44:23,976 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-24 15:44:23,977 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:44:23,977 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 15:44:23,977 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 15:44:23,978 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 15:44:23,978 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 15:44:23,979 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852663.98
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:23,979 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:44:23,980 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:44:23,980 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:44:23,985 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:44:23,985 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:44:23,985 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:44:23,988 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:44:23,989 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:44:23,989 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:44:23,992 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:44:23,992 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:44:23,992 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:23,993 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:44:23,993 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:23,993 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:44:23,996 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:44:23,996 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:44:23,996 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:23,999 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 15:44:23,999 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:44:23,999 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:23,999 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:44:23,999 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:44:24,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:24,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:24,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:24,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:44:24,000 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:44:24,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:24,000 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:44:24,000 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:24,003 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:44:24,003 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:24,004 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:24,007 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 15:44:24,007 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:24,007 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:24,007 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:24,007 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:44:24,007 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:24,008 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:24,008 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:24,008 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:24,008 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:44:24,011 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 15:44:24,011 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 15:44:24,011 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:44:24,013 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852663.98
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:24,013 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:44:24,018 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 15:44:24,018 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:24,021 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:44:24,021 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:44:24,025 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 15:44:24,025 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:44:24,028 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:44:24,028 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:44:24,028 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:44:24,028 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:44:24,030 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:24,030 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:44:24,031 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:44:24,033 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 15:44:24,034 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 15:44:24,034 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 15:44:24,034 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None))
2017-10-24 15:44:24,034 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 15:44:24,034 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:44:24,035 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:24,035 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-24 15:44:24,035 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 15:44:24,036 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:44:24,036 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:24,036 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:24,038 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:24,038 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 15:44:24,038 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:44:24,038 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 15:44:24,038 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 15:44:24,039 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 15:44:24,039 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 15:44:24,039 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 15:44:24,039 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 15:44:24,040 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 15:44:24,041 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:24,043 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:24,043 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:44:24,043 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 15:44:24,043 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 15:44:24,044 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:44:24,044 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 15:44:24,044 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 15:44:24,044 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae407a3f8>]
2017-10-24 15:44:24,044 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae407a3f8>], sender=GuiBackend, reason=None)
2017-10-24 15:44:24,045 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:44:24,045 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 15:44:24,045 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 15:44:24,045 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:44:24,045 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:24,046 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae407a3f8>], sender=GuiBackend, reason=None))
2017-10-24 15:44:24,046 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae407a3f8>], sender=GuiBackend, reason=None)
2017-10-24 15:44:24,047 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:44:24,048 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:24,048 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:44:24,082 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:44:24,082 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:44:24,083 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 15:44:24,083 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 15:44:24,083 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:44:24,083 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 15:44:24,083 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 15:44:24,083 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 15:44:24,084 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-24 15:44:24,085 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852664.08
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:24,085 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:44:24,085 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:44:24,085 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:44:24,089 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 15:44:24,090 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:44:24,090 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:44:24,092 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:24,092 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:44:24,092 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:44:24,092 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:44:24,093 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:44:24,093 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:44:24,093 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:44:24,093 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:44:24,093 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:44:24,093 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:44:24,093 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:44:24,093 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:44:24,097 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:44:24,097 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:44:24,097 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:24,097 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:44:24,097 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:24,098 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:44:24,101 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 15:44:24,102 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:44:24,102 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:24,102 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:44:24,102 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:24,102 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:44:24,102 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:44:24,102 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:24,103 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:24,103 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:24,103 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:44:24,103 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:44:24,103 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:24,103 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:44:24,103 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:24,103 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:24,104 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:44:24,104 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:24,104 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:24,104 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:24,104 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:24,105 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:44:24,107 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 15:44:24,107 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 15:44:24,107 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:44:24,108 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None))
2017-10-24 15:44:24,108 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 15:44:24,108 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:44:24,108 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:24,108 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:44:24,109 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:44:24,109 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:44:24,109 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:44:26,883 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "no"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 15:44:26,883 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:44:26,883 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None))
2017-10-24 15:44:26,883 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 15:44:26,883 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 15:44:26,883 - session_2017-10-24T15_42_01_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "no"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 15:44:26,884 - session_2017-10-24T15_42_01_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 15:44:26,886 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 15:44:26,886 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])} for DDD 'recipehelp'
2017-10-24 15:44:26,886 - session_2017-10-24T15_42_01_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
2017-10-24 15:44:26,886 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:44:26,887 - session_2017-10-24T15_42_01_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.No": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "no"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "False"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 15:44:26,887 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 15:44:26,888 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None))
2017-10-24 15:44:26,888 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:44:26,888 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:44:26,888 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 15:44:26,888 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 15:44:26,888 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:26,889 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 15:44:26,889 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:44:26,889 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:44:26,890 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:44:26,890 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:44:26,891 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852666.89
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:26,891 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:44:26,896 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^                                                                                                             ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^^                                                                                                             ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^                                                                                                             -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^^
-- END TIS changes --
2017-10-24 15:44:26,896 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:44:26,903 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
-- END TIS changes --
2017-10-24 15:44:26,908 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^^
-- END TIS changes --
2017-10-24 15:44:26,910 - session_2017-10-24T15_42_01_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-24 15:44:26,910 - session_2017-10-24T15_42_01_0 - INFO - Could not log rerank
2017-10-24 15:44:26,910 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:44:26,914 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 15:44:26,915 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:44:26,920 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:44:26,920 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:44:26,920 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:44:26,923 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:26,923 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:44:26,923 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:44:26,930 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ++++++++++++++++++++ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    ++++++++++++++
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 15:44:26,930 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:44:26,930 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:44:26,930 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:44:26,930 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:44:26,930 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:44:26,930 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 15:44:26,931 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:44:26,931 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 15:44:26,931 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:44:26,935 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(False)}
?                          +++++++++++
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), done(False)}
?                                                        +++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 15:44:26,935 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:44:26,935 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:26,940 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), done(False)}
+ tis.shared.com: {device_activity_terminated(go_to_next), done(False), resolved(?X.done(X))}
?                                                                     ++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 15:44:26,940 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:44:26,945 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
?                           ---------------------
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-24 15:44:26,945 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:26,945 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:44:26,945 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:44:26,945 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:26,945 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:26,945 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:26,946 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:44:26,946 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:44:26,946 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:26,946 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:44:26,946 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:26,950 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {device_activity_terminated(go_to_next), done(False), resolved(?X.done(X))}
?                                                        -----------------------------------
+ tis.shared.com: {device_activity_terminated(go_to_next)}
-- END TIS changes --
2017-10-24 15:44:26,950 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:26,950 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:26,950 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:26,951 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:44:26,954 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 15:44:26,954 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:26,954 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:26,954 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:26,954 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:26,954 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:44:26,955 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 15:44:26,955 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 15:44:26,955 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 15:44:26,955 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:44:26,956 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852666.89
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:26,956 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:44:26,960 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^^^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                ^^^^^ ^
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 15:44:26,960 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:26,963 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:44:26,964 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:44:26,967 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 15:44:26,967 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:44:26,970 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:44:26,970 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:44:26,970 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:44:26,970 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:44:26,972 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:26,972 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:44:26,973 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:44:26,975 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 15:44:26,976 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')])
2017-10-24 15:44:26,976 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:44:26,977 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None))
2017-10-24 15:44:26,977 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 15:44:26,977 - session_2017-10-24T15_42_01_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 15:44:26,977 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None))
2017-10-24 15:44:26,977 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 15:44:26,977 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": "no", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 15:44:26,978 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:26,978 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None))
2017-10-24 15:44:26,979 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 15:44:26,979 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:44:26,980 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:26,981 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)))
2017-10-24 15:44:26,981 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:44:26,981 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:44:26,981 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:26,982 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:26,983 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:26,983 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 15:44:26,983 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')
2017-10-24 15:44:26,983 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')
2017-10-24 15:44:26,984 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp') generated as u'So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..'
2017-10-24 15:44:26,984 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=GenerateModule, reason=None)
2017-10-24 15:44:26,986 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:26,988 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:44:26,989 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:44:26,989 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:44:26,989 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')])
2017-10-24 15:44:26,989 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 15:44:26,989 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')
2017-10-24 15:44:26,990 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae405b998>]
2017-10-24 15:44:26,990 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae405b998>], sender=GuiBackend, reason=None)
2017-10-24 15:44:26,991 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:44:26,991 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=GenerateModule, reason=None))
2017-10-24 15:44:26,991 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=GenerateModule, reason=None)
2017-10-24 15:44:26,991 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:44:26,991 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:26,991 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 15:44:26,992 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 15:44:26,992 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 15:44:26,993 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:26,993 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae405b998>], sender=GuiBackend, reason=None))
2017-10-24 15:44:26,993 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f1ae405b998>], sender=GuiBackend, reason=None)
2017-10-24 15:44:26,993 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:44:26,994 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:26,994 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:44:27,017 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:44:27,017 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:44:27,017 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TextOutputComponent, reason=None))
2017-10-24 15:44:27,017 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TextOutputComponent, reason=None)
2017-10-24 15:44:27,017 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:44:27,017 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None)
2017-10-24 15:44:27,018 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None)
2017-10-24 15:44:27,018 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None)
2017-10-24 15:44:27,018 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None))
2017-10-24 15:44:27,019 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852667.02
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:27,020 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:44:27,020 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:44:27,020 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:44:27,026 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:44:27,026 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:44:27,026 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:44:27,029 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:27,029 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:44:27,029 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:44:27,030 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:44:27,033 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:44:27,033 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:44:27,033 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:27,037 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."), resolved(?X.say_step(X))}
?                                                                                                                                                                                          ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 15:44:27,037 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:44:27,037 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:27,037 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:44:27,037 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:44:27,037 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:27,037 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:27,037 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:27,038 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:27,039 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:27,039 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:27,039 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:44:27,041 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 15:44:27,042 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 15:44:27,042 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:44:27,042 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None))
2017-10-24 15:44:27,042 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 15:44:27,042 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:44:27,043 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:44:27,043 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 15:44:27,043 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:44:27,043 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [So, Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 15:44:27,044 - session_2017-10-24T15_42_01_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f1ae407a368>:1.0
2017-10-24 15:44:27,044 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:44:28,044 - session_2017-10-24T15_42_01_0 - DEBUG - Timeout fired
2017-10-24 15:44:28,044 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:44:28,045 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:44:28,045 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 15:44:28,045 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:44:28,046 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852668.05
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:28,046 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:44:28,046 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:44:28,049 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:44:28,049 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:44:28,053 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 15:44:28,053 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:44:28,053 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:44:28,056 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:28,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:44:28,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:44:28,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:44:28,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:44:28,056 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:44:28,057 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:44:28,057 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:44:28,057 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 15:44:28,057 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:44:28,058 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:44:28,059 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:44:28,059 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:28,062 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:44:28,062 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:28,062 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:28,065 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 15:44:28,065 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:28,065 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:28,065 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:28,065 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:44:28,066 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:44:28,066 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:44:28,066 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:44:28,066 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:44:28,066 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:44:28,067 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:44:28,067 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:44:28,068 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508852668.05
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:44:28,068 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:44:28,073 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 15:44:28,073 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:44:28,075 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:44:28,076 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:44:28,078 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 15:44:28,078 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:44:28,081 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:44:28,081 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:44:28,081 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:44:28,081 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:44:28,084 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:44:28,084 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:44:28,084 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:44:28,086 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 15:44:28,086 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:44:28,087 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:58:10,739 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "confirm"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 15:58:10,740 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:58:10,740 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: confirm}], sender=TextInputComponent, reason=None))
2017-10-24 15:58:10,740 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: confirm}], sender=TextInputComponent, reason=None)
2017-10-24 15:58:10,740 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: confirm}], sender=TextInputComponent, reason=None)
2017-10-24 15:58:10,740 - session_2017-10-24T15_42_01_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "confirm"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 15:58:10,741 - session_2017-10-24T15_42_01_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 15:58:10,743 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 15:58:10,744 - session_2017-10-24T15_42_01_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])} for DDD 'recipehelp'
2017-10-24 15:58:10,744 - session_2017-10-24T15_42_01_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}
2017-10-24 15:58:10,744 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:58:10,744 - session_2017-10-24T15_42_01_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "confirm"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "confirm", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "confirmation_action"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "confirm", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 15:58:10,744 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: confirm}], sender=TextInputComponent, reason=None)
2017-10-24 15:58:10,745 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:58:10,745 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:58:10,745 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:58:10,746 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,746 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 15:58:10,747 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 15:58:10,747 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:58:10,747 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,747 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,748 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,748 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 15:58:10,749 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 15:58:10,749 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:58:10,749 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:58:10,749 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 15:58:10,749 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 15:58:10,750 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:58:10,750 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 15:58:10,750 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:58:10,751 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,753 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,753 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:58:10,753 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 15:58:10,753 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 15:58:10,753 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 15:58:10,754 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:58:10,754 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 15:58:10,754 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae405b638>]
2017-10-24 15:58:10,754 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae405b638>], sender=GuiBackend, reason=None)
2017-10-24 15:58:10,754 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:58:10,754 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=InterpretModule, reason=None))
2017-10-24 15:58:10,755 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=InterpretModule, reason=None)
2017-10-24 15:58:10,755 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 15:58:10,755 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 15:58:10,755 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 15:58:10,755 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,756 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 15:58:10,756 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 15:58:10,756 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:58:10,757 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,757 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae405b638>], sender=GuiBackend, reason=None))
2017-10-24 15:58:10,757 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f1ae405b638>], sender=GuiBackend, reason=None)
2017-10-24 15:58:10,757 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:58:10,758 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,758 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:58:10,797 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:58:10,797 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:58:10,797 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 15:58:10,797 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 15:58:10,798 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:58:10,798 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:58:10,798 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:58:10,798 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 15:58:10,798 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 15:58:10,800 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508853490.8
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: confirm
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:58:10,800 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:58:10,800 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:58:10,800 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:58:10,804 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 15:58:10,804 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:58:10,804 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:58:10,807 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:58:10,807 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:58:10,807 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:58:10,807 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:58:10,807 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:58:10,807 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:58:10,807 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:58:10,808 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:58:10,808 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:58:10,808 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:58:10,808 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:58:10,808 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:58:10,812 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:58:10,812 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:58:10,812 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,812 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:58:10,812 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,812 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:58:10,816 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 15:58:10,816 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:58:10,816 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,816 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:58:10,817 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,817 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:58:10,817 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:58:10,817 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:58:10,817 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:58:10,817 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:58:10,817 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:58:10,817 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:58:10,818 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:58:10,818 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:58:10,818 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:58:10,818 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,818 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:58:10,818 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,818 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:58:10,819 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,819 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:58:10,819 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:58:10,821 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 15:58:10,821 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:58:10,821 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:58:10,822 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:58:10,822 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:58:10,822 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:58:10,822 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,822 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:58:10,823 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:58:10,823 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:58:10,823 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,823 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,824 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,824 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:58:10,825 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508853490.82
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: confirm
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:58:10,826 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:58:10,830 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("confirm"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #]), OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}
-- END TIS changes --
2017-10-24 15:58:10,830 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:58:10,835 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                        ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                        ^
- tis.latest_moves_amb: {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'confirm'), #])}
?                                                                                                                                       ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])}
?                                                                                                                                       ^
-- END TIS changes --
2017-10-24 15:58:10,836 - session_2017-10-24T15_42_01_0 - INFO - hypotheses reranking had no effect
2017-10-24 15:58:10,836 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:58:10,842 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 15:58:10,842 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:58:10,849 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 15:58:10,849 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:58:10,849 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:58:10,852 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:58:10,853 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:58:10,853 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:58:10,859 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
- tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.usr.bel: {}
+ tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ^^^^^^^^^^^^ --------------
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^
- tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    --------------
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
- tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 15:58:10,859 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:58:10,859 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:58:10,859 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:58:10,859 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:58:10,859 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:58:10,859 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])
2017-10-24 15:58:10,860 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:58:10,860 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])
2017-10-24 15:58:10,860 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:58:10,864 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(confirmation_action), findout(?X.goal(X))])
?                          +++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(confirmation_action), resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm')}
-- END TIS changes --
2017-10-24 15:58:10,864 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:58:10,864 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,867 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(confirmation_action), resolve_user(?X.goal(X)), perform(top)])
?                                                           --------------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 15:58:10,867 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:58:10,867 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,871 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 +++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([do(confirmation_action), findout(?X.goal(X))])
+ tis.private.plan: Stack([forget(confirmation), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))])
-- END TIS changes --
2017-10-24 15:58:10,871 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:58:10,871 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:58:10,871 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:58:10,871 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:58:10,871 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:58:10,871 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:58:10,872 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:58:10,872 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:58:10,872 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:58:10,872 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:58:10,876 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))])
?                          ----------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))])
-- END TIS changes --
2017-10-24 15:58:10,876 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,876 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:58:10,877 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,877 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:58:10,879 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 15:58:10,879 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,879 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:58:10,880 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,880 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:58:10,880 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:58:10,880 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, confirm, sender=DmeModule, reason=None)
2017-10-24 15:58:10,880 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:58:10,880 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: select
2017-10-24 15:58:10,881 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508853490.82
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm')])
tis.latest_moves_amb: {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: confirm
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:58:10,881 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 15:58:10,886 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^ ^^ ^^^^^^^^^  ^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ^^^^^^^^^^^ ^ ^^^^  ^^^^ +++++++++++ ^^^
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
?                                              ++++++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))])
-- END TIS changes --
2017-10-24 15:58:10,886 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:58:10,889 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.confirmation_yn(X))])
?                                                                                                  ++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:58:10,889 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:58:10,893 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.confirmation_yn(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 15:58:10,893 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:58:10,893 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:58:10,897 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.confirmation_yn(X))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 15:58:10,897 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:58:10,900 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))])
?                                                                                    ++++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 15:58:10,900 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_icm
2017-10-24 15:58:10,900 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_move
2017-10-24 15:58:10,900 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 15:58:10,903 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:58:10,903 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 15:58:10,903 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:set_timeout
2017-10-24 15:58:10,906 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:58:10,906 - session_2017-10-24T15_42_01_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 15:58:10,906 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:58:10,906 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, confirm, sender=DmeModule, reason=None))
2017-10-24 15:58:10,907 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, confirm, sender=DmeModule, reason=None)
2017-10-24 15:58:10,907 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": "confirm", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 15:58:10,907 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,907 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:58:10,907 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:58:10,908 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:58:10,909 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,909 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None)))
2017-10-24 15:58:10,910 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])}, sender=TurnManager, reason=None))
2017-10-24 15:58:10,910 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 15:58:10,910 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,911 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,912 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,912 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 15:58:10,912 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 15:58:10,913 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 15:58:10,913 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:58:10,913 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:58:10,913 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 15:58:10,913 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 15:58:10,913 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 15:58:10,913 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 15:58:10,914 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 15:58:10,914 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 15:58:10,915 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule: Move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp') generated as u'What is confirmation yn?'
2017-10-24 15:58:10,915 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , What is confirmation yn?], sender=GenerateModule, reason=None)
2017-10-24 15:58:10,916 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,918 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 15:58:10,919 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 15:58:10,919 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 15:58:10,919 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 15:58:10,919 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 15:58:10,919 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 15:58:10,919 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 15:58:10,919 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 15:58:10,919 - session_2017-10-24T15_42_01_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 15:58:10,920 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend generated message []
2017-10-24 15:58:10,920 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 15:58:10,920 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posted event
2017-10-24 15:58:10,920 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , What is confirmation yn?], sender=GenerateModule, reason=None))
2017-10-24 15:58:10,920 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , What is confirmation yn?], sender=GenerateModule, reason=None)
2017-10-24 15:58:10,920 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "What is confirmation yn?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 15:58:10,921 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,921 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 15:58:10,921 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 15:58:10,921 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 15:58:10,923 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,923 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 15:58:10,929 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "What is confirmation yn?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 15:58:10,929 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 15:58:10,929 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , What is confirmation yn?], sender=TextOutputComponent, reason=None))
2017-10-24 15:58:10,929 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , What is confirmation yn?], sender=TextOutputComponent, reason=None)
2017-10-24 15:58:10,929 - session_2017-10-24T15_42_01_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 15:58:10,929 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , What is confirmation yn?], sender=TurnManager, reason=None)
2017-10-24 15:58:10,929 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , What is confirmation yn?], sender=TurnManager, reason=None)
2017-10-24 15:58:10,929 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , What is confirmation yn?], sender=TurnManager, reason=None)
2017-10-24 15:58:10,930 - session_2017-10-24T15_42_01_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , What is confirmation yn?], sender=TurnManager, reason=None))
2017-10-24 15:58:10,931 - session_2017-10-24T15_42_01_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f1ae6584fd0>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f1ae5d4c290>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508853490.93
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , What is confirmation yn?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(resolve(?X.say_step(X))))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: confirm
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 15:58:10,932 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:filterReadings
2017-10-24 15:58:10,932 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 15:58:10,932 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 15:58:10,939 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(confirmation_action), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'confirm')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 15:58:10,939 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 15:58:10,939 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 15:58:10,942 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:58:10,942 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 15:58:10,942 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 15:58:10,942 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 15:58:10,942 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 15:58:10,942 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 15:58:10,942 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 15:58:10,943 - session_2017-10-24T15_42_01_0 - INFO - BEGIN integrate_moves
2017-10-24 15:58:10,943 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:58:10,943 - session_2017-10-24T15_42_01_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 15:58:10,943 - session_2017-10-24T15_42_01_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 15:58:10,943 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:58:10,947 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 15:58:10,947 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:58:10,947 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,947 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:58:10,947 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,948 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:58:10,951 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 15:58:10,951 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:58:10,951 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,952 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:58:10,952 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,952 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:integrate
2017-10-24 15:58:10,955 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.confirmation_yn(X)])
-- END TIS changes --
2017-10-24 15:58:10,955 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 15:58:10,955 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,955 - session_2017-10-24T15_42_01_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_action
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:accommodate
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - INFO - breaking out of accommodate
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:select_reject
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - INFO - END integrate_moves
2017-10-24 15:58:10,956 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:58:10,957 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,957 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 15:58:10,957 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 15:58:10,957 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:exec_plan
2017-10-24 15:58:10,957 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:load_plan
2017-10-24 15:58:10,958 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 15:58:10,958 - session_2017-10-24T15_42_01_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 15:58:10,960 - session_2017-10-24T15_42_01_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 15:58:10,960 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:58:10,960 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , What is confirmation yn?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:58:10,960 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 15:58:10,960 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 15:58:10,961 - session_2017-10-24T15_42_01_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 15:58:10,961 - session_2017-10-24T15_42_01_0 - DEBUG - Sent.
2017-10-24 15:58:10,962 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , What is confirmation yn?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 15:58:10,962 - session_2017-10-24T15_42_01_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , What is confirmation yn?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:58:10,962 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , What is confirmation yn?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 15:58:10,962 - session_2017-10-24T15_42_01_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:00:06,963 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:00:06,963 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 16:00:06,963 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:00:06,963 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:00:06,963 - session_2017-10-24T15_42_01_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 16:00:06,964 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:00:06,964 - session_2017-10-24T15_42_01_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 16:00:06,964 - session_2017-10-24T15_42_01_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:00:06,964 - session_2017-10-24T15_42_01_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 16:00:06,964 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:00:06,964 - session_2017-10-24T15_42_01_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 16:00:06,964 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:00:06,964 - session_2017-10-24T15_42_01_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:00:06,965 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:00:06,966 - session_2017-10-24T15_42_01_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 16:00:06,966 - session_2017-10-24T15_42_01_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:00:06,966 - session_2017-10-24T15_42_01_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 16:00:06,966 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 16:00:06,967 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 16:00:06,967 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 16:00:06,967 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 16:00:06,967 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 16:00:06,968 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 16:00:06,968 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 16:00:06,968 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 16:00:06,968 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:00:06,968 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:00:06,968 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 16:00:06,968 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 16:00:06,969 - session_2017-10-24T15_42_01_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 16:00:06,969 - session_2017-10-24T15_42_01_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
