2017-10-24 16:25:12,150 - session_2017-10-24T16_25_12_0 - DEBUG - Backend()
2017-10-24 16:25:12,151 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.initialize()
2017-10-24 16:25:12,183 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f579e91af10>>, False])
2017-10-24 16:25:12,183 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f579e91af10>>, 'eng'])
2017-10-24 16:25:12,183 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 16:25:12,183 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 16:25:12,183 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f579e91af10>>, True, 'disabled'])
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f579e91af10>>])
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f579e91af10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f579e91af10>>, 'eng', False, True])
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - Backend initialized
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - Backend uses language 'eng'
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - running module InterpretModule
2017-10-24 16:25:12,184 - session_2017-10-24T16_25_12_0 - DEBUG - running module DmeModule
2017-10-24 16:25:12,186 - session_2017-10-24T16_25_12_0 - DEBUG - running module DeviceManager
2017-10-24 16:25:12,186 - session_2017-10-24T16_25_12_0 - DEBUG - running module GenerateModule
2017-10-24 16:25:12,186 - session_2017-10-24T16_25_12_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 16:25:12,186 - session_2017-10-24T16_25_12_0 - DEBUG - running module GuiBackend
2017-10-24 16:25:12,186 - session_2017-10-24T16_25_12_0 - DEBUG - running module CogloadModule
2017-10-24 16:25:12,187 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:12,188 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:12,188 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 16:25:12,188 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 16:25:12,188 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 16:25:12,189 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:12,189 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:12,218 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 16:25:12,219 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:12,219 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 16:25:12,220 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,220 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 16:25:12,220 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 16:25:12,221 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 16:25:12,221 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:12,222 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:12,227 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 16:25:12,227 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:12,228 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:25:12,228 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,228 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,228 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,228 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:25:12,229 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:25:12,230 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855112.23
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:12,230 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:12,230 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:12,230 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:12,232 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:12,233 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:12,233 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:12,234 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:25:12,235 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:12,236 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:12,237 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:12,239 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:25:12,240 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:12,242 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:25:12,242 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:12,242 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:12,243 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:12,243 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:12,243 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:12,243 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:12,243 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:12,243 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:12,243 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:12,244 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:12,244 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:12,245 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855112.23
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:12,245 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:12,248 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:12,248 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:12,250 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:12,250 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:12,253 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:25:12,253 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:12,256 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:12,256 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:12,256 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:12,256 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:12,258 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:12,258 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:12,258 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:12,260 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 16:25:12,260 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:12,260 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:25:12,261 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 16:25:12,262 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 16:25:12,262 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:12,262 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:12,262 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:12,263 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:12,263 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:12,264 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 16:25:12,264 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 16:25:12,264 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:12,265 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:12,265 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:12,266 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:12,267 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:25:12,267 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:25:12,267 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:25:12,267 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:12,267 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:25:12,268 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:25:12,268 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:12,269 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 16:25:12,269 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:25:12,270 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:12,271 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:12,271 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:12,272 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:12,272 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:25:12,272 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:25:12,272 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:25:12,272 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:12,273 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message []
2017-10-24 16:25:12,273 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:25:12,273 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:12,273 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 16:25:12,273 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:25:12,273 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:12,274 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:12,274 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 16:25:12,274 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:25:12,274 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:12,275 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:12,275 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:12,335 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:12,336 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:12,336 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:12,336 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:12,336 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:12,336 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:25:12,336 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:25:12,337 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:25:12,337 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 16:25:12,338 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855112.34
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:12,338 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:12,338 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:12,338 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:12,341 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 16:25:12,341 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:12,341 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:12,343 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:12,343 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:12,344 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:12,347 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:25:12,348 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:12,348 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:12,348 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:12,348 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:12,348 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:12,351 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 16:25:12,351 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:12,351 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:12,351 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:12,351 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:12,351 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:12,351 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:12,352 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:12,353 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:12,353 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:12,353 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:12,353 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:12,353 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:12,353 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:12,355 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:12,355 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:12,355 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:12,356 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:12,356 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:12,356 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:12,356 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:12,357 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:25:12,357 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:12,358 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:12,358 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:21,321 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:25:21,322 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:21,322 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 16:25:21,322 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:21,322 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:21,322 - session_2017-10-24T16_25_12_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:25:21,323 - session_2017-10-24T16_25_12_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:25:21,328 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:25:21,328 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 16:25:21,328 - session_2017-10-24T16_25_12_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 16:25:21,328 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:25:21,329 - session_2017-10-24T16_25_12_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:25:21,329 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:21,329 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:25:21,329 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:25:21,329 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:25:21,330 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:25:21,330 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 16:25:21,330 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:21,330 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 16:25:21,331 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:21,331 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:21,332 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:21,332 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:21,333 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855121.33
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:21,333 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:21,337 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 16:25:21,338 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:21,343 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 16:25:21,344 - session_2017-10-24T16_25_12_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:25:21,344 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:21,349 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 16:25:21,349 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:21,355 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:25:21,355 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:21,355 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:21,357 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:21,357 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:21,357 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 16:25:21,362 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:21,366 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:21,367 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:21,367 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:21,369 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 16:25:21,369 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:21,370 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:21,373 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:25:21,373 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:21,373 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:21,373 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:21,373 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:21,373 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:21,374 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:21,374 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:21,374 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:21,374 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:21,374 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:21,374 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:21,375 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:21,377 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:25:21,377 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:21,377 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:21,378 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:21,378 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:21,378 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:21,378 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 16:25:21,378 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:21,378 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:21,380 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855121.33
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:21,380 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:21,385 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:25:21,385 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:21,388 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:21,388 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:21,391 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 16:25:21,391 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:21,391 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:21,394 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 16:25:21,395 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:21,398 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:21,398 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:21,398 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:21,398 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:21,401 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:21,401 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:21,401 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:21,403 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:21,403 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:21,404 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:21,404 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 16:25:21,404 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 16:25:21,404 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:25:21,405 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:21,405 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:21,405 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:21,405 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:21,405 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:21,406 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:25:21,406 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:21,407 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:21,407 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:21,408 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:21,409 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:21,410 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 16:25:21,410 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:25:21,410 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:25:21,410 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:25:21,410 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:25:21,410 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:21,410 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:25:21,411 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:25:21,411 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:25:21,411 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:25:21,411 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:21,412 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 16:25:21,412 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 16:25:21,413 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:21,415 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:21,415 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:21,415 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:21,415 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 16:25:21,416 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:25:21,416 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 16:25:21,416 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:25:21,416 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:25:21,416 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:21,416 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message []
2017-10-24 16:25:21,417 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:25:21,417 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:21,417 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 16:25:21,417 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 16:25:21,418 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:21,421 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:21,422 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 16:25:21,422 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 16:25:21,422 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:21,424 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:21,424 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:21,427 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:21,428 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:21,428 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:21,428 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:21,428 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:21,428 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:25:21,428 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:25:21,428 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 16:25:21,429 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 16:25:21,430 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855121.43
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:21,430 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:21,431 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:21,431 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:21,438 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:21,438 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:21,438 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:21,440 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:21,440 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:21,441 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:21,446 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:25:21,446 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:21,446 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:21,446 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:21,446 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:21,447 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:21,450 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:21,450 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:21,450 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:21,451 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:21,451 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:21,451 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:21,454 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 16:25:21,454 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:21,454 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:21,455 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:21,456 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:21,456 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:21,456 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:21,456 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:21,456 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:21,457 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:21,457 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:21,457 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:21,459 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:21,459 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:21,459 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:21,460 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:21,460 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:21,460 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:21,460 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:21,460 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:25:21,461 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:21,461 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:21,461 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:24,578 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:25:24,579 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:24,579 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-24 16:25:24,579 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:24,579 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:24,579 - session_2017-10-24T16_25_12_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:25:24,580 - session_2017-10-24T16_25_12_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:25:24,581 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:25:24,581 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-24 16:25:24,582 - session_2017-10-24T16_25_12_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-24 16:25:24,582 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:25:24,582 - session_2017-10-24T16_25_12_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:25:24,582 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:24,582 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:25:24,583 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:25:24,583 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:25:24,583 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 16:25:24,583 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 16:25:24,583 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:24,584 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 16:25:24,584 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:24,584 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:24,585 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:24,585 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:24,586 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855124.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:24,587 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:24,591 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-24 16:25:24,591 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:24,595 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-24 16:25:24,599 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-24 16:25:24,600 - session_2017-10-24T16_25_12_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:25:24,600 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:24,603 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 16:25:24,603 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:24,608 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 16:25:24,608 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:24,608 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:24,610 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:24,610 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:24,610 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:24,616 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 16:25:24,617 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:24,620 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 16:25:24,620 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:24,620 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:24,624 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 16:25:24,624 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:24,627 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:25:24,627 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:24,627 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:24,627 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:24,627 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:24,627 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:24,628 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:24,628 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:24,628 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:24,628 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:24,628 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:24,628 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:24,632 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose step1")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 16:25:24,632 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:24,632 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:24,636 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 16:25:24,636 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:24,636 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:24,637 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:24,637 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:24,640 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:25:24,640 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:24,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:24,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:24,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:24,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:24,641 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:25:24,641 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 16:25:24,642 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:25:24,642 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:24,643 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855124.59
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:24,644 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:24,647 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose step1")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 16:25:24,647 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:24,650 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:24,650 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:24,654 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 16:25:24,654 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:24,657 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:24,657 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:24,657 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:24,657 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:24,660 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:24,660 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:24,660 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:24,663 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:25:24,663 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 16:25:24,663 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:24,663 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 16:25:24,663 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:25:24,664 - session_2017-10-24T16_25_12_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 16:25:24,664 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-24 16:25:24,664 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 16:25:24,664 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:25:24,665 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:24,665 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 16:25:24,665 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:25:24,665 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:24,666 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:24,666 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:25:24,666 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:24,666 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:24,667 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:24,667 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:24,668 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:24,668 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 16:25:24,668 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:25:24,668 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:25:24,669 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp') generated as u'Ok chose step1.'
2017-10-24 16:25:24,669 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 16:25:24,670 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:24,671 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:24,672 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:24,672 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:24,672 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 16:25:24,672 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 16:25:24,672 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 16:25:24,673 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f579c1e5dd0>]
2017-10-24 16:25:24,673 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f579c1e5dd0>], sender=GuiBackend, reason=None)
2017-10-24 16:25:24,673 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:24,674 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None))
2017-10-24 16:25:24,674 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 16:25:24,674 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose step1."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:24,674 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:24,675 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:25:24,675 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:24,675 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose step1."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:25:24,675 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:24,675 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f579c1e5dd0>], sender=GuiBackend, reason=None))
2017-10-24 16:25:24,676 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f579c1e5dd0>], sender=GuiBackend, reason=None)
2017-10-24 16:25:24,676 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose step1."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:24,677 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:24,677 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:24,681 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose step1."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:24,682 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:24,682 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:24,682 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:24,682 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:24,683 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:25:24,683 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:25:24,683 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 16:25:24,683 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None))
2017-10-24 16:25:24,685 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855124.68
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:24,685 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:24,685 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:24,685 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:24,690 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:24,690 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:24,691 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:24,694 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:24,695 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:24,695 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:24,698 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose step1")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:24,698 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:24,698 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:24,701 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose step1")}
+ tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
?                                           ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 16:25:24,701 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:24,701 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:24,701 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:24,702 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:24,702 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:24,702 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:24,702 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:24,702 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:24,702 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:24,702 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:24,702 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:24,703 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:24,703 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:24,703 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:24,703 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:24,703 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:24,703 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:24,703 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:24,704 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:24,706 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:25:24,706 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:25:24,706 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:24,706 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 16:25:24,706 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 16:25:24,707 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:24,707 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:24,707 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:25:24,707 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:24,708 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:24,708 - session_2017-10-24T16_25_12_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f579c1e5950>:1.0
2017-10-24 16:25:24,708 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:25,708 - session_2017-10-24T16_25_12_0 - DEBUG - Timeout fired
2017-10-24 16:25:25,708 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:25,709 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:25,709 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:25,709 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:25:25,710 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855125.71
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:25,710 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:25,710 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:25,712 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:25,713 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:25,717 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 16:25:25,717 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:25,717 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:25,719 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:25,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:25,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:25:25,720 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:25,721 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:25,721 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:25,721 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:25,721 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:25,721 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:25,721 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:25,721 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:25,722 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:25,722 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:25,722 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:25,725 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:25:25,725 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:25,725 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:25,727 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose step1")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 16:25:25,728 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:25,728 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:25,728 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:25,728 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:25,728 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:25,728 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:25,728 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:25,729 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:25,729 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:25,729 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:25,729 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:25,730 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855125.71
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:25,730 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:25,734 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose step1")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:25,734 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:25,737 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:25,737 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:25,740 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 16:25:25,740 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:25,742 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:25,743 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:25,743 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:25,743 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:25,745 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:25,745 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:25,745 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:25,747 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:25:25,748 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:25,748 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:25:30,582 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:25:30,582 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:30,582 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 16:25:30,583 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:30,583 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:30,583 - session_2017-10-24T16_25_12_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:25:30,583 - session_2017-10-24T16_25_12_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:25:30,585 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:25:30,585 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 16:25:30,585 - session_2017-10-24T16_25_12_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 16:25:30,585 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:25:30,585 - session_2017-10-24T16_25_12_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:25:30,586 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:30,586 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:30,586 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,587 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:30,588 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,588 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:25:30,589 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:25:30,589 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:30,589 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,589 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,590 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,590 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 16:25:30,590 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 16:25:30,590 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:25:30,590 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:30,591 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 16:25:30,591 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 16:25:30,591 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:30,591 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 16:25:30,592 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:25:30,592 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,594 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,594 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:30,594 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:30,594 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 16:25:30,594 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 16:25:30,594 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 16:25:30,594 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:30,595 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c1cadd0>]
2017-10-24 16:25:30,595 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c1cadd0>], sender=GuiBackend, reason=None)
2017-10-24 16:25:30,595 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:30,595 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:25:30,595 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:25:30,595 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:25:30,596 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:25:30,596 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:25:30,597 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,597 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 16:25:30,597 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 16:25:30,598 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:30,598 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,598 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c1cadd0>], sender=GuiBackend, reason=None))
2017-10-24 16:25:30,598 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c1cadd0>], sender=GuiBackend, reason=None)
2017-10-24 16:25:30,599 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:30,600 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,600 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:30,641 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:30,641 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:30,641 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:30,641 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:30,641 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:30,641 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:25:30,642 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:25:30,642 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 16:25:30,642 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 16:25:30,643 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855130.64
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:30,644 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:30,644 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:30,644 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:30,649 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:25:30,649 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:30,649 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:30,651 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:30,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:30,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:30,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:30,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:30,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:30,652 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:30,652 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:30,652 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:30,652 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:30,652 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:30,652 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:30,657 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:25:30,657 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:30,657 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,657 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:30,657 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,657 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:30,661 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:30,662 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,663 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,663 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,663 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:30,663 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:30,666 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:25:30,666 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,666 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:30,666 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:30,666 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,666 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:30,667 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,667 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:25:30,667 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:30,668 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:30,668 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,668 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,669 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,669 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:30,670 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855130.67
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:30,670 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:30,674 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 16:25:30,674 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:30,679 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 16:25:30,679 - session_2017-10-24T16_25_12_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:25:30,679 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:30,684 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 16:25:30,684 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:30,690 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:25:30,691 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:30,692 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:30,695 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:30,695 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:30,695 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:30,700 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 16:25:30,701 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:30,705 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 16:25:30,705 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:30,705 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,708 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 16:25:30,708 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:30,708 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,711 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 16:25:30,711 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:30,711 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:30,711 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:30,711 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:30,711 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:30,711 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:30,712 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:30,712 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:30,712 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:30,712 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,715 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:25:30,715 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,715 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,716 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,716 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:30,719 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:25:30,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:30,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:30,719 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 16:25:30,720 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,720 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:30,721 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855130.67
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:30,721 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:30,725 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 16:25:30,725 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:30,728 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 16:25:30,728 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:30,731 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:30,731 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:30,731 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:30,731 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:30,734 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:30,734 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:30,734 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:30,736 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:25:30,737 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:25:30,737 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:30,737 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 16:25:30,737 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 16:25:30,737 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:25:30,738 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,738 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:30,738 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,738 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:30,739 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,739 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:25:30,740 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:30,740 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:30,740 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,741 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,741 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,742 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:25:30,742 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:25:30,742 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:25:30,742 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:25:30,742 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:25:30,742 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:25:30,742 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:25:30,743 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-24 16:25:30,743 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 16:25:30,744 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,745 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:30,746 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,746 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:30,746 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:25:30,746 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:25:30,746 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:25:30,746 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 16:25:30,746 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:25:30,747 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c1caea8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c1ca8c0>]
2017-10-24 16:25:30,747 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c1caea8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c1ca8c0>], sender=GuiBackend, reason=None)
2017-10-24 16:25:30,747 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:30,748 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-24 16:25:30,748 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 16:25:30,748 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:30,748 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,748 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:25:30,749 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:30,749 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:25:30,749 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,750 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c1caea8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c1ca8c0>], sender=GuiBackend, reason=None))
2017-10-24 16:25:30,750 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c1caea8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c1ca8c0>], sender=GuiBackend, reason=None)
2017-10-24 16:25:30,750 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:30,752 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,752 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:30,770 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:30,771 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:30,771 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:30,771 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:30,772 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:30,772 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:25:30,772 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:25:30,772 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:25:30,772 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:25:30,774 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855130.77
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:30,774 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:30,774 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:30,774 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:30,780 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:30,780 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:30,780 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:30,783 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:25:30,783 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:30,783 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:30,783 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:30,783 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:30,783 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:30,783 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:30,783 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:30,784 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:30,784 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:30,784 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:30,784 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:30,789 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:25:30,789 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:30,789 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,789 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:30,789 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,789 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:30,792 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:30,792 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:30,792 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,795 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^
+ tis.shared.previous_goal: perform(go_to_next)
?                           ^^^^ +++++++++  +++
-- END TIS changes --
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:30,796 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,800 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True}), findout(?X.done(X)), forget(done)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([perform(say_step), perform(top)])
?                                     +++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:30,800 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,800 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,803 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True}), findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 16:25:30,803 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,803 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,803 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,804 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:30,804 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,804 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,804 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,804 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:30,804 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:30,807 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:25:30,807 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,807 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:30,808 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855130.77
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:30,808 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:30,817 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                                                 ^^^ ^^                                          ^^  --- ^^      ^^^   ^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                ++ ^ ^^^                                          ^^^ +  ^      ^^^^   ^ ++++++++++++++
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              ^^  --- ^^
+ tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
?                                              ^^^ +  ^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 16:25:30,817 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:30,821 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:25:30,821 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:30,823 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:30,823 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:30,823 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:30,824 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:30,826 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:30,826 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:30,826 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:30,828 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:30,829 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:25:30,829 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:25:30,829 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:30,829 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,829 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:30,831 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,831 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-24 16:25:30,832 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:25:30,832 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:30,832 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,833 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,834 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,834 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:30,834 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:25:30,834 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:30,834 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:25:30,834 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:25:30,835 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:25:30,835 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:25:30,835 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp') generated as u"I'm sorry, something went wrong."
2017-10-24 16:25:30,835 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:25:30,836 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,837 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:30,839 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:30,839 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:30,839 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:25:30,839 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:30,839 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:25:30,839 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:30,839 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:25:30,840 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c1cad88>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c19c200>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c19c758>]
2017-10-24 16:25:30,840 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c1cad88>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c19c200>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c19c758>], sender=GuiBackend, reason=None)
2017-10-24 16:25:30,840 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:30,840 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None))
2017-10-24 16:25:30,840 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:25:30,841 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "I'm sorry, something went wrong."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:30,841 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,842 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:25:30,842 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:30,842 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "I'm sorry, something went wrong."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:25:30,843 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,843 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c1cad88>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c19c200>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c19c758>], sender=GuiBackend, reason=None))
2017-10-24 16:25:30,843 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c1cad88>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c19c200>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c19c758>], sender=GuiBackend, reason=None)
2017-10-24 16:25:30,843 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": false, "arguments": {}, "failure_reason": "undefined_failure"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "I'm sorry, something went wrong."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:30,844 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,844 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:30,886 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["", "I'm sorry, something went wrong."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:30,886 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:30,886 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:30,887 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:30,887 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:30,887 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:25:30,887 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:25:30,887 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:25:30,887 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None))
2017-10-24 16:25:30,889 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855130.89
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:30,889 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:30,889 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:30,889 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:30,894 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 16:25:30,894 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:30,894 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:30,897 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:25:30,897 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:30,897 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:30,897 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:30,897 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:30,897 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:30,898 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:30,898 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:30,898 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:30,898 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:30,898 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:30,898 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:30,902 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:25:30,902 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:30,902 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,903 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:30,903 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,903 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:30,905 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:30,905 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:30,906 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:30,907 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:30,907 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:30,907 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,907 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,907 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:30,907 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:30,907 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:30,908 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:30,908 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:30,908 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:30,911 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:30,911 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,911 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:30,911 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:30,911 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:30,911 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:30,912 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:30,912 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:25:30,912 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:30,913 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:30,913 - session_2017-10-24T16_25_12_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f579c177d88>:1.0
2017-10-24 16:25:30,913 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:31,913 - session_2017-10-24T16_25_12_0 - DEBUG - Timeout fired
2017-10-24 16:25:31,913 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:31,914 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:31,914 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:31,914 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:25:31,915 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855131.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:31,915 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:31,915 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:31,917 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:31,917 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:31,922 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:31,922 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:31,922 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:31,925 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:31,925 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:31,926 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:31,927 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:31,928 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:31,928 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:31,928 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:31,928 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:31,928 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:31,929 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:31,929 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:31,929 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:31,929 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:31,929 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:31,930 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855131.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:31,930 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:31,934 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:31,934 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:31,936 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:31,937 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:31,937 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:31,940 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.done(X)))])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:31,940 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:31,940 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:31,940 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:31,942 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:31,943 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:31,943 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:31,945 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:25:31,946 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:31,946 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:25:36,366 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:25:36,367 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:36,367 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 16:25:36,367 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:36,367 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:36,367 - session_2017-10-24T16_25_12_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:25:36,368 - session_2017-10-24T16_25_12_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:25:36,368 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:25:36,368 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 16:25:36,369 - session_2017-10-24T16_25_12_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 16:25:36,369 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:25:36,369 - session_2017-10-24T16_25_12_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:25:36,369 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 16:25:36,369 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:36,369 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,370 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:36,370 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,371 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:25:36,371 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:25:36,371 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:36,371 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,371 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,373 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,373 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,373 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:36,373 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:36,373 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 16:25:36,374 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:25:36,375 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,376 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,376 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:36,377 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:36,377 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,377 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 16:25:36,377 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c180200>]
2017-10-24 16:25:36,377 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c180200>], sender=GuiBackend, reason=None)
2017-10-24 16:25:36,377 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:36,378 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:25:36,378 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:25:36,378 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:25:36,378 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:25:36,378 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:25:36,378 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,379 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None))
2017-10-24 16:25:36,379 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:25:36,379 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:36,380 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,380 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c180200>], sender=GuiBackend, reason=None))
2017-10-24 16:25:36,380 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c180200>], sender=GuiBackend, reason=None)
2017-10-24 16:25:36,381 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:36,381 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,381 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:36,392 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:36,392 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:36,393 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:36,393 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:36,393 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:36,393 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:25:36,393 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:25:36,393 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:25:36,394 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None))
2017-10-24 16:25:36,395 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855136.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:36,395 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:36,395 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:36,395 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:36,399 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:25:36,399 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:36,399 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:36,402 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:36,403 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:36,403 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:36,403 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:36,406 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(say_step), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 16:25:36,406 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:36,406 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:36,407 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,408 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,408 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:36,408 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,408 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,409 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,409 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:36,409 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:36,412 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:25:36,412 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,412 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:36,412 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:36,412 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,412 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:36,413 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,413 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:25:36,413 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:36,413 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:25:36,415 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,415 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,416 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,416 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:36,417 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855136.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:36,417 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:36,421 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 16:25:36,421 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:36,422 - session_2017-10-24T16_25_12_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:25:36,422 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:36,425 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                      ^ ^ ^^^^   ^^^                                    ^^
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')])
?                                      ^^^^^ ^ ^ ++++  ^^                                   + ^                                                +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:36,426 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:36,431 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:25:36,431 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:36,432 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:36,435 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:36,435 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:36,435 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:36,443 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
?                                                      ^ ^^   +++++++++++++++++++
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    ++++++++++++++
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 16:25:36,443 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:36,443 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:36,446 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(say_step), perform(top)])
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:25:36,446 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:36,446 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:36,446 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:36,446 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
2017-10-24 16:25:36,446 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:36,447 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
2017-10-24 16:25:36,447 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:36,450 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.done(X)), forget(done)])
?                          ++++++++++++++++
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {}
- tis.shared.goals: stackset([perform(say_step), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), perform(say_step), perform(top)])
?                                     +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 16:25:36,451 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:36,451 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,451 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:36,451 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:36,454 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:36,455 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:36,455 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,458 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 16:25:36,458 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,458 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,458 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,459 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:36,461 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855136.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.pm: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:36,461 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:36,465 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(say_step), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 16:25:36,465 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:36,468 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 16:25:36,468 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:36,471 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:36,471 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:36,471 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:36,471 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:36,473 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:36,474 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:36,474 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:36,477 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:25:36,477 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:25:36,477 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:36,477 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 16:25:36,478 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 16:25:36,478 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:25:36,478 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,478 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:36,478 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,479 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:36,479 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,480 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:25:36,480 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:25:36,480 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:36,481 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,481 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,482 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,482 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,482 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:25:36,483 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,483 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:25:36,483 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 16:25:36,483 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 16:25:36,483 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:25:36,484 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-24 16:25:36,484 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 16:25:36,485 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,486 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:36,487 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,487 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:36,487 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 16:25:36,487 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,488 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 16:25:36,488 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,488 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 16:25:36,488 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c21d170>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c21d290>]
2017-10-24 16:25:36,489 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c21d170>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c21d290>], sender=GuiBackend, reason=None)
2017-10-24 16:25:36,489 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:36,489 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-24 16:25:36,489 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 16:25:36,489 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:36,490 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,490 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:25:36,490 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:36,490 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:25:36,491 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,491 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c21d170>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c21d290>], sender=GuiBackend, reason=None))
2017-10-24 16:25:36,491 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c21d170>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c21d290>], sender=GuiBackend, reason=None)
2017-10-24 16:25:36,492 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:36,492 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,492 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:36,512 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:36,513 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:36,513 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:36,513 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:36,513 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:36,514 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:25:36,514 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:25:36,514 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 16:25:36,514 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:25:36,515 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855136.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.pm: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:36,516 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:36,516 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:36,516 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:36,522 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:36,522 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:36,522 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:36,525 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:25:36,525 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:36,525 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:36,525 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:36,525 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:36,525 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:36,525 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:36,526 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:36,526 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:36,526 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:36,526 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:36,526 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:36,531 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:25:36,531 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:36,532 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,532 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:36,532 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,532 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:36,535 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:36,535 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:36,535 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,538 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
- tis.shared.goals: stackset([perform(go_to_next), perform(say_step), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(say_step), perform(top)])
-- END TIS changes --
2017-10-24 16:25:36,538 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:36,538 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,538 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:36,538 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:36,539 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:36,539 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:36,539 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:36,539 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:36,539 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:36,539 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:36,539 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:36,539 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,543 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True}), findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 16:25:36,543 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,543 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,546 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True}), findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 16:25:36,546 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,546 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,547 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,547 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:36,547 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,547 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,548 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,548 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:36,548 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:36,550 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:25:36,550 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,551 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:36,552 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855136.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:36,552 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:36,557 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                                                 ^^^ ^^                                          ^^  --- ^^      ^^^   ^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                                                ++ ^ ^^^                                          ^^^ +  ^      ^^^^   ^ ++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(say_step), perform(top)])
?                                              ---------------------
+ tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 16:25:36,557 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:36,561 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:25:36,561 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:36,564 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:36,564 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:36,564 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:36,564 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:36,567 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:36,567 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:36,567 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:36,569 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:36,570 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:25:36,570 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:25:36,570 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:36,570 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,570 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:36,571 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,571 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-24 16:25:36,572 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 16:25:36,572 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:25:36,572 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,572 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,574 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,574 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,574 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:25:36,574 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,574 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:25:36,574 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:25:36,575 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:25:36,575 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:25:36,575 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp') generated as u"I'm sorry, something went wrong."
2017-10-24 16:25:36,575 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:25:36,577 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,578 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:36,579 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:25:36,579 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:25:36,579 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:25:36,580 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,580 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:25:36,580 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:25:36,580 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:25:36,581 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c19c8c0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c19c320>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c19c248>]
2017-10-24 16:25:36,581 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c19c8c0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c19c320>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c19c248>], sender=GuiBackend, reason=None)
2017-10-24 16:25:36,581 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:25:36,581 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None))
2017-10-24 16:25:36,581 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:25:36,581 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "I'm sorry, something went wrong."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:25:36,582 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,582 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:25:36,582 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:25:36,583 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "I'm sorry, something went wrong."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:25:36,583 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,584 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c19c8c0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c19c320>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c19c248>], sender=GuiBackend, reason=None))
2017-10-24 16:25:36,584 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579c19c8c0>, <tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c19c320>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c19c248>], sender=GuiBackend, reason=None)
2017-10-24 16:25:36,584 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": false, "arguments": {}, "failure_reason": "undefined_failure"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "I'm sorry, something went wrong."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:25:36,584 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,585 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:36,630 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["", "I'm sorry, something went wrong."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:25:36,630 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:25:36,631 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None))
2017-10-24 16:25:36,631 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None)
2017-10-24 16:25:36,631 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:25:36,631 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:25:36,631 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:25:36,632 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:25:36,632 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None))
2017-10-24 16:25:36,633 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855136.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:36,633 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:36,633 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:36,633 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:36,638 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 16:25:36,638 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:36,638 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:36,640 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:25:36,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:36,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:36,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:36,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:36,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:36,641 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:36,641 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:36,641 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:36,642 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:36,642 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:25:36,642 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:36,646 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:25:36,646 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:36,646 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,646 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:36,646 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,646 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:36,649 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:36,649 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:25:36,649 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:36,650 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:36,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:36,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:36,651 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:36,652 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:36,652 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:36,652 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:36,654 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:36,655 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,655 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:36,655 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:25:36,655 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:36,655 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:25:36,655 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:25:36,656 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:25:36,656 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:36,656 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:25:36,657 - session_2017-10-24T16_25_12_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f579c1becb0>:1.0
2017-10-24 16:25:36,657 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:25:37,657 - session_2017-10-24T16_25_12_0 - DEBUG - Timeout fired
2017-10-24 16:25:37,657 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:37,657 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:37,657 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:25:37,657 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:25:37,658 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855137.66
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:37,658 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:25:37,659 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:25:37,661 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:37,661 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:25:37,665 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:25:37,665 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:25:37,665 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:25:37,667 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:37,668 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:25:37,668 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:25:37,668 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:25:37,668 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:25:37,668 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:25:37,668 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:25:37,669 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:25:37,669 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:25:37,669 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:25:37,669 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:25:37,669 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:25:37,669 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:25:37,669 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:25:37,670 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:37,670 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:37,670 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:37,670 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:25:37,670 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:25:37,670 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:25:37,670 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:25:37,670 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:37,671 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:37,671 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:25:37,671 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:25:37,671 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:25:37,672 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:25:37,672 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:25:37,672 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:25:37,672 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:25:37,672 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:25:37,673 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855137.66
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:25:37,673 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:25:37,676 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:37,676 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:25:37,679 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:25:37,679 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:37,679 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:37,682 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.done(X)))])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:25:37,682 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:25:37,682 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:25:37,682 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:25:37,685 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:25:37,685 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:25:37,686 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:25:37,688 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:25:37,688 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 16:25:37,688 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:27:04,672 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 16:27:04,672 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:27:04,672 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 16:27:04,672 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 16:27:04,672 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 16:27:04,673 - session_2017-10-24T16_25_12_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 16:27:04,673 - session_2017-10-24T16_25_12_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 16:27:04,674 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 16:27:04,674 - session_2017-10-24T16_25_12_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 16:27:04,675 - session_2017-10-24T16_25_12_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 16:27:04,675 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:27:04,675 - session_2017-10-24T16_25_12_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "say_step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 16:27:04,675 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 16:27:04,675 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:27:04,676 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:27:04,676 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:27:04,677 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,677 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:27:04,677 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:27:04,678 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:27:04,678 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,678 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,680 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,680 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:27:04,680 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 16:27:04,680 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 16:27:04,681 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 16:27:04,681 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:27:04,682 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,684 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,684 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:27:04,684 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 16:27:04,684 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:27:04,684 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 16:27:04,685 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579e9181b8>]
2017-10-24 16:27:04,685 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579e9181b8>], sender=GuiBackend, reason=None)
2017-10-24 16:27:04,685 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:27:04,685 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 16:27:04,685 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 16:27:04,686 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:27:04,686 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 16:27:04,686 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 16:27:04,686 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,686 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None))
2017-10-24 16:27:04,687 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 16:27:04,687 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:27:04,687 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,687 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579e9181b8>], sender=GuiBackend, reason=None))
2017-10-24 16:27:04,688 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f579e9181b8>], sender=GuiBackend, reason=None)
2017-10-24 16:27:04,688 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:27:04,689 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,689 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:27:04,703 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:27:04,703 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:27:04,703 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 16:27:04,703 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 16:27:04,703 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:27:04,703 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:27:04,704 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:27:04,704 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 16:27:04,704 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None))
2017-10-24 16:27:04,705 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855224.7
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:27:04,705 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:27:04,706 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:27:04,706 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:27:04,709 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:27:04,709 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:27:04,709 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:27:04,712 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:27:04,712 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:27:04,712 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:27:04,712 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:27:04,712 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:27:04,713 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:27:04,713 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:27:04,713 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:27:04,713 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:27:04,713 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:27:04,713 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:27:04,713 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:27:04,717 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(say_step), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 16:27:04,717 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:27:04,717 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:27:04,718 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:27:04,718 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,718 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:27:04,718 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:27:04,718 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:27:04,718 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:27:04,718 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:27:04,718 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:27:04,719 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:27:04,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:27:04,719 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:27:04,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:04,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:27:04,719 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:27:04,720 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:04,720 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,720 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:27:04,721 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:27:04,723 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 16:27:04,723 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:27:04,723 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:27:04,723 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:27:04,723 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:27:04,724 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:27:04,724 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,724 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 16:27:04,725 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:27:04,725 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 16:27:04,725 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,725 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,726 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,726 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:27:04,727 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855224.73
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:27:04,727 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:27:04,730 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 16:27:04,731 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:27:04,731 - session_2017-10-24T16_25_12_0 - INFO - hypotheses reranking had no effect
2017-10-24 16:27:04,731 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:27:04,735 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                        ^^^^^^^^ ^^^                                    ^^
+ tis.latest_moves: OpenQueue([#, Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')])
?                                      +++++++++ ++ ^ ^                                   + ^                                                +++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:27:04,735 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:27:04,740 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 16:27:04,741 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:27:04,741 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:27:04,743 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:27:04,744 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:27:04,744 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:27:04,748 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:27:04,748 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:27:04,748 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:27:04,753 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(say_step), perform(top)])
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 16:27:04,753 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:27:04,753 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:27:04,753 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:27:04,753 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 16:27:04,753 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:27:04,753 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 16:27:04,753 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:27:04,757 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([do(say_step), findout(?X.done(X)), forget(done)])
?                          ++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 16:27:04,757 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:27:04,757 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:27:04,758 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:27:04,758 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,761 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 +++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([do(say_step), findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True}), findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 16:27:04,761 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:27:04,762 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:04,765 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True}), findout(?X.done(X)), forget(done)])
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 16:27:04,766 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,766 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:04,766 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,767 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:27:04,767 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:27:04,767 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:04,767 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,767 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:27:04,768 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:27:04,768 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 16:27:04,768 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:27:04,768 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:27:04,769 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855224.73
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:27:04,769 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:27:04,773 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:27:04,773 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:27:04,777 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:27:04,777 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:27:04,777 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:27:04,781 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 16:27:04,781 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:27:04,784 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:27:04,784 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:27:04,785 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:27:04,785 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:27:04,787 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:27:04,787 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:27:04,787 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:27:04,790 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 16:27:04,790 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:27:04,791 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:27:04,791 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 16:27:04,791 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 16:27:04,791 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 16:27:04,792 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,792 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:27:04,792 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:27:04,792 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:27:04,793 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,793 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 16:27:04,794 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 16:27:04,794 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:27:04,794 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,794 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,796 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,796 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:27:04,796 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:27:04,796 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:27:04,796 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:27:04,796 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 16:27:04,797 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 16:27:04,797 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:27:04,797 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp') generated as u"I'm sorry, something went wrong."
2017-10-24 16:27:04,797 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:27:04,799 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,800 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:27:04,801 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:27:04,801 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 16:27:04,801 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 16:27:04,801 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:27:04,801 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 16:27:04,802 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)})
2017-10-24 16:27:04,802 - session_2017-10-24T16_25_12_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 16:27:04,803 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c213128>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c213e18>]
2017-10-24 16:27:04,803 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c213128>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c213e18>], sender=GuiBackend, reason=None)
2017-10-24 16:27:04,803 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posted event
2017-10-24 16:27:04,803 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None))
2017-10-24 16:27:04,803 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 16:27:04,803 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "I'm sorry, something went wrong."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 16:27:04,804 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,804 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:27:04,805 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:27:04,805 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "I'm sorry, something went wrong."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 16:27:04,805 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,806 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c213128>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c213e18>], sender=GuiBackend, reason=None))
2017-10-24 16:27:04,806 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f579c213128>, <tdm.tdm_gui_protocol.Popup instance at 0x7f579c213e18>], sender=GuiBackend, reason=None)
2017-10-24 16:27:04,806 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": false, "arguments": {}, "failure_reason": "undefined_failure"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "I'm sorry, something went wrong."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 16:27:04,807 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,807 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:27:04,827 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend received event {"content": ["", "I'm sorry, something went wrong."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 16:27:04,828 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:27:04,828 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None))
2017-10-24 16:27:04,828 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None)
2017-10-24 16:27:04,828 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 16:27:04,828 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:27:04,828 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:27:04,828 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 16:27:04,829 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None))
2017-10-24 16:27:04,830 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855224.83
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, I'm sorry, something went wrong.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:27:04,830 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:27:04,830 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:27:04,831 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:27:04,837 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:27:04,837 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:27:04,838 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:27:04,840 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], False, undefined_failure)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 16:27:04,840 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:27:04,841 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:27:04,841 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:27:04,841 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:27:04,841 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:27:04,841 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:27:04,841 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:27:04,841 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:27:04,841 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:27:04,842 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 16:27:04,842 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:27:04,845 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 16:27:04,846 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:27:04,846 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:27:04,846 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:27:04,846 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,846 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:27:04,849 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 16:27:04,849 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 16:27:04,849 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:27:04,849 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 16:27:04,849 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,849 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:27:04,849 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:27:04,850 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:27:04,850 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:27:04,850 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:27:04,850 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:27:04,850 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:27:04,850 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:27:04,850 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:27:04,850 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:04,851 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,851 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:27:04,851 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:27:04,851 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:04,852 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:04,852 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:27:04,852 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:27:04,854 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 16:27:04,854 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:27:04,855 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:27:04,855 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:27:04,855 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:27:04,855 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:27:04,855 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:27:04,856 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 16:27:04,856 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:27:04,856 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, I'm sorry, something went wrong.], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 16:27:04,857 - session_2017-10-24T16_25_12_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f579c21d050>:1.0
2017-10-24 16:27:04,857 - session_2017-10-24T16_25_12_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 16:27:05,857 - session_2017-10-24T16_25_12_0 - DEBUG - Timeout fired
2017-10-24 16:27:05,857 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:27:05,857 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:27:05,857 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 16:27:05,857 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:27:05,859 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855225.86
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:27:05,859 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:filterReadings
2017-10-24 16:27:05,859 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 16:27:05,861 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:27:05,862 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 16:27:05,865 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 16:27:05,866 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 16:27:05,866 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 16:27:05,868 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:27:05,868 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 16:27:05,869 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 16:27:05,869 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 16:27:05,869 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 16:27:05,869 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 16:27:05,869 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 16:27:05,869 - session_2017-10-24T16_25_12_0 - INFO - BEGIN integrate_moves
2017-10-24 16:27:05,869 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:27:05,870 - session_2017-10-24T16_25_12_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 16:27:05,870 - session_2017-10-24T16_25_12_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 16:27:05,870 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:integrate
2017-10-24 16:27:05,870 - session_2017-10-24T16_25_12_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 16:27:05,870 - session_2017-10-24T16_25_12_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 16:27:05,870 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:27:05,870 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:27:05,871 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:27:05,871 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:accommodate
2017-10-24 16:27:05,871 - session_2017-10-24T16_25_12_0 - INFO - breaking out of accommodate
2017-10-24 16:27:05,871 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_reject
2017-10-24 16:27:05,871 - session_2017-10-24T16_25_12_0 - INFO - END integrate_moves
2017-10-24 16:27:05,871 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:05,872 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:05,872 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 16:27:05,872 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 16:27:05,872 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:exec_plan
2017-10-24 16:27:05,873 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:load_plan
2017-10-24 16:27:05,873 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 16:27:05,873 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 16:27:05,873 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:27:05,873 - session_2017-10-24T16_25_12_0 - INFO - running ISU module: select
2017-10-24 16:27:05,874 - session_2017-10-24T16_25_12_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f579e0e3090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f579c1aee50>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508855225.86
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(say_step), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 16:27:05,874 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 16:27:05,877 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], False, undefined_failure))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:27:05,877 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_action
2017-10-24 16:27:05,880 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 +++++++++++++++++++++
-- END TIS changes --
2017-10-24 16:27:05,880 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:27:05,880 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:27:05,883 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.done(X)))])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 16:27:05,883 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_icm
2017-10-24 16:27:05,883 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:select_move
2017-10-24 16:27:05,884 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 16:27:05,886 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 16:27:05,886 - session_2017-10-24T16_25_12_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 16:27:05,886 - session_2017-10-24T16_25_12_0 - DEBUG - rulegroup:set_timeout
2017-10-24 16:27:05,889 - session_2017-10-24T16_25_12_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 16:27:05,889 - session_2017-10-24T16_25_12_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 16:27:05,889 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:29:57,068 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 16:29:57,069 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 16:29:57,069 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:29:57,069 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:29:57,070 - session_2017-10-24T16_25_12_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 16:29:57,070 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:29:57,070 - session_2017-10-24T16_25_12_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 16:29:57,070 - session_2017-10-24T16_25_12_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:29:57,070 - session_2017-10-24T16_25_12_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 16:29:57,070 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 16:29:57,071 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 16:29:57,072 - session_2017-10-24T16_25_12_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 16:29:57,072 - session_2017-10-24T16_25_12_0 - DEBUG - Sent.
2017-10-24 16:29:57,072 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 16:29:57,073 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 16:29:57,073 - session_2017-10-24T16_25_12_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 16:29:57,073 - session_2017-10-24T16_25_12_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:29:57,073 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([]), top_perform_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:29:57,075 - session_2017-10-24T16_25_12_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:29:57,076 - session_2017-10-24T16_25_12_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:29:57,077 - session_2017-10-24T16_25_12_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), device_activity_terminated(say_step), DeviceResultProposition(say_step, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(say_step), moves: OpenQueue([#, Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 16:29:57,077 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 16:29:57,077 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 16:29:57,077 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 16:29:57,077 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 16:29:57,078 - session_2017-10-24T16_25_12_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 16:29:57,079 - session_2017-10-24T16_25_12_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
