2017-10-24 12:35:00,961 - session_2017-10-24T12_35_00_0 - DEBUG - Backend()
2017-10-24 12:35:00,961 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.initialize()
2017-10-24 12:35:00,993 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7f83a06f10>>, False])
2017-10-24 12:35:00,993 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7f83a06f10>>, 'eng'])
2017-10-24 12:35:00,993 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 12:35:00,993 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 12:35:00,993 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 12:35:00,993 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7f83a06f10>>, True, 'disabled'])
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7f83a06f10>>])
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f7f83a06f10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7f83a06f10>>, 'eng', False, True])
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - Backend initialized
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - Backend uses language 'eng'
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - running module InterpretModule
2017-10-24 12:35:00,994 - session_2017-10-24T12_35_00_0 - DEBUG - running module DmeModule
2017-10-24 12:35:00,996 - session_2017-10-24T12_35_00_0 - DEBUG - running module DeviceManager
2017-10-24 12:35:00,996 - session_2017-10-24T12_35_00_0 - DEBUG - running module GenerateModule
2017-10-24 12:35:00,996 - session_2017-10-24T12_35_00_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 12:35:00,996 - session_2017-10-24T12_35_00_0 - DEBUG - running module GuiBackend
2017-10-24 12:35:00,996 - session_2017-10-24T12_35_00_0 - DEBUG - running module CogloadModule
2017-10-24 12:35:00,997 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:00,997 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:00,998 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 12:35:00,999 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 12:35:00,999 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 12:35:01,000 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:01,001 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:01,030 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 12:35:01,030 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:01,031 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 12:35:01,032 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,032 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 12:35:01,032 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 12:35:01,032 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 12:35:01,033 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:01,033 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:01,036 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 12:35:01,036 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:01,037 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:35:01,037 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,037 - session_2017-10-24T12_35_00_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,037 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,038 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:35:01,038 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:35:01,039 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841301.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:01,039 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:01,039 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:01,039 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:01,042 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:01,042 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:01,042 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:01,044 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:01,044 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:01,044 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:01,044 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:01,044 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:01,044 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:01,045 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:01,046 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:01,046 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:01,046 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:01,046 - session_2017-10-24T12_35_00_0 - INFO - breaking out of accommodate
2017-10-24 12:35:01,046 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:01,046 - session_2017-10-24T12_35_00_0 - INFO - END integrate_moves
2017-10-24 12:35:01,046 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:01,047 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:01,050 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:35:01,050 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:01,052 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:35:01,052 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:01,052 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:01,053 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:01,053 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:01,053 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:01,053 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:01,053 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:01,053 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:01,053 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:01,054 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:01,054 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: select
2017-10-24 12:35:01,054 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841301.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:01,055 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:35:01,058 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:01,058 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:01,060 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:01,060 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:01,063 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:35:01,063 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:01,066 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:35:01,066 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:01,066 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:01,066 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:35:01,068 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:01,068 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:35:01,068 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:35:01,070 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 12:35:01,070 - session_2017-10-24T12_35_00_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:35:01,071 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:35:01,071 - session_2017-10-24T12_35_00_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,071 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,071 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,072 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,072 - session_2017-10-24T12_35_00_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:01,072 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 12:35:01,072 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:35:01,072 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:35:01,072 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:35:01,072 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 12:35:01,073 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:01,073 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:35:01,073 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:01,073 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:01,075 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:01,075 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 12:35:01,075 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:35:01,075 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:35:01,075 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:01,076 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:01,076 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:01,077 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 12:35:01,077 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:35:01,077 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:35:01,077 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:01,077 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 12:35:01,078 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 12:35:01,078 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:01,078 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:35:01,078 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:35:01,079 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:01,080 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:01,080 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:35:01,081 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:35:01,081 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 12:35:01,081 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:35:01,081 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:35:01,081 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:01,081 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend generated message []
2017-10-24 12:35:01,081 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:35:01,082 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posted event
2017-10-24 12:35:01,082 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:35:01,082 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:35:01,082 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:35:01,082 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:01,083 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 12:35:01,083 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:35:01,083 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:35:01,084 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:01,084 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:01,124 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:35:01,124 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:01,124 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:35:01,124 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:35:01,125 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:35:01,125 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:01,125 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:01,125 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:01,125 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:35:01,126 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841301.13
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:01,126 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:01,127 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:01,127 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:01,129 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 12:35:01,129 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:01,130 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:01,132 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:01,132 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:01,133 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:01,136 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:35:01,136 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:01,136 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:01,137 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:01,137 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:01,137 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:01,140 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:35:01,140 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:01,140 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:01,140 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:01,140 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:01,140 - session_2017-10-24T12_35_00_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:01,140 - session_2017-10-24T12_35_00_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - INFO - breaking out of accommodate
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - INFO - END integrate_moves
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:01,141 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:01,142 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:01,142 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:01,142 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:01,142 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:01,142 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:01,144 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:01,144 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:01,144 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:01,145 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:35:01,145 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:01,145 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:01,145 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:01,145 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:35:01,146 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:01,146 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:01,146 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:06,801 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:35:06,801 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:06,801 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 12:35:06,801 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:35:06,801 - session_2017-10-24T12_35_00_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:35:06,802 - session_2017-10-24T12_35_00_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:35:06,802 - session_2017-10-24T12_35_00_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:35:06,807 - session_2017-10-24T12_35_00_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:35:06,807 - session_2017-10-24T12_35_00_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 12:35:06,807 - session_2017-10-24T12_35_00_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 12:35:06,808 - session_2017-10-24T12_35_00_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:35:06,808 - session_2017-10-24T12_35_00_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:35:06,808 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:35:06,808 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:35:06,809 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:35:06,809 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:35:06,809 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:35:06,809 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 12:35:06,809 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:06,810 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 12:35:06,810 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:35:06,810 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:35:06,811 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:35:06,811 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:35:06,812 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841306.81
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:06,812 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:06,815 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 12:35:06,815 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:06,819 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 12:35:06,819 - session_2017-10-24T12_35_00_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:35:06,819 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:06,823 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 12:35:06,823 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:06,830 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:35:06,830 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:06,830 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:06,833 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:06,833 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:06,833 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:06,838 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 12:35:06,838 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:06,838 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:06,838 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:06,838 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:06,839 - session_2017-10-24T12_35_00_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:06,839 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 12:35:06,839 - session_2017-10-24T12_35_00_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:06,839 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 12:35:06,839 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:06,843 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:06,843 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:06,843 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:06,845 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 12:35:06,846 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:06,846 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:06,849 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 -------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.plan: Stack([findout(?X.goal(X))])
?                          ^ ^^^ ^    ^^ ^
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^ ^^^^ ^^^    ^ ^^^^^^
-- END TIS changes --
2017-10-24 12:35:06,849 - session_2017-10-24T12_35_00_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:06,849 - session_2017-10-24T12_35_00_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:06,850 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:06,850 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:06,850 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:06,850 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:06,850 - session_2017-10-24T12_35_00_0 - INFO - breaking out of accommodate
2017-10-24 12:35:06,850 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:06,850 - session_2017-10-24T12_35_00_0 - INFO - END integrate_moves
2017-10-24 12:35:06,850 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:06,853 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:35:06,854 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:06,854 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:06,854 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:06,854 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:06,856 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:35:06,856 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:06,857 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:06,857 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:06,857 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:06,857 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:06,857 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 12:35:06,857 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:35:06,857 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: select
2017-10-24 12:35:06,858 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841306.81
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:06,859 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:35:06,863 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^^^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                ^^^^^ ^
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 12:35:06,863 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:06,865 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:06,866 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:06,868 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 12:35:06,868 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:06,872 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:35:06,872 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:06,872 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:06,873 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:35:06,875 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:06,875 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:35:06,875 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:35:06,877 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 12:35:06,878 - session_2017-10-24T12_35_00_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 12:35:06,878 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:35:06,878 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 12:35:06,878 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 12:35:06,878 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:35:06,879 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:06,879 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:35:06,880 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:35:06,880 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:06,881 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:06,882 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:35:06,882 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:35:06,882 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:35:06,882 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:06,883 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:06,884 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:06,884 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:35:06,884 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:35:06,884 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:35:06,885 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok  Step one: Chop onions and garlic..'
2017-10-24 12:35:06,885 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 12:35:06,886 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:06,887 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:35:06,888 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:06,888 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:35:06,888 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 12:35:06,888 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:35:06,888 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:35:06,889 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f7f80ad1dd0>]
2017-10-24 12:35:06,889 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f7f80ad1dd0>], sender=GuiBackend, reason=None)
2017-10-24 12:35:06,889 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posted event
2017-10-24 12:35:06,889 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None))
2017-10-24 12:35:06,890 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 12:35:06,890 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:35:06,891 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:06,891 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:35:06,891 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:35:06,891 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok  Step one: Chop onions and garlic.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:35:06,892 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:06,892 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f7f80ad1dd0>], sender=GuiBackend, reason=None))
2017-10-24 12:35:06,893 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f7f80ad1dd0>], sender=GuiBackend, reason=None)
2017-10-24 12:35:06,893 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok  Step one: Chop onions and garlic.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:35:06,893 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:06,894 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:06,908 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:35:06,909 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:06,910 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None))
2017-10-24 12:35:06,910 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None)
2017-10-24 12:35:06,910 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:35:06,910 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:35:06,910 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:35:06,910 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:35:06,911 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None))
2017-10-24 12:35:06,912 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841306.91
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:06,912 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:06,913 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:06,913 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:06,919 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:35:06,919 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:06,919 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:06,922 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:06,922 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:06,923 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:06,926 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {say_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:35:06,926 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:06,926 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:06,929 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 12:35:06,929 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - INFO - breaking out of accommodate
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - INFO - END integrate_moves
2017-10-24 12:35:06,930 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:06,931 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:06,931 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:06,931 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:06,931 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:06,931 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:06,931 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:06,931 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:06,934 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 12:35:06,934 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:35:06,934 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:35:06,934 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:35:06,934 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:35:06,935 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:06,935 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:06,936 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 12:35:06,936 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:35:06,936 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:35:06,937 - session_2017-10-24T12_35_00_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f7f80aaa758>:1.0
2017-10-24 12:35:06,937 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:07,937 - session_2017-10-24T12_35_00_0 - DEBUG - Timeout fired
2017-10-24 12:35:07,937 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:35:07,937 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:35:07,938 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:35:07,938 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:35:07,939 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841307.94
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:07,939 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:07,939 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:07,942 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:35:07,942 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:07,947 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 12:35:07,947 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:07,947 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:07,949 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:07,950 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:35:07,951 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:07,951 - session_2017-10-24T12_35_00_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:07,951 - session_2017-10-24T12_35_00_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:07,951 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:07,951 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:07,951 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:07,952 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:07,952 - session_2017-10-24T12_35_00_0 - INFO - breaking out of accommodate
2017-10-24 12:35:07,952 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:07,952 - session_2017-10-24T12_35_00_0 - INFO - END integrate_moves
2017-10-24 12:35:07,952 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:07,955 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:35:07,955 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:07,956 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:07,958 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 12:35:07,958 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:07,958 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:07,959 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:07,959 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:07,959 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:07,959 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:07,959 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:07,960 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:07,960 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:07,960 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:07,960 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: select
2017-10-24 12:35:07,961 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841307.94
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:07,961 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:35:07,965 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:07,965 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:07,968 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:07,968 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:07,970 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:35:07,971 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:07,973 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:35:07,973 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:07,973 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:07,974 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:35:07,976 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:07,976 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:35:07,976 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:35:07,978 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 12:35:07,979 - session_2017-10-24T12_35_00_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:35:07,979 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:35:17,456 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": ""}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:35:17,457 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:17,457 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None))
2017-10-24 12:35:17,457 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 12:35:17,457 - session_2017-10-24T12_35_00_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 12:35:17,457 - session_2017-10-24T12_35_00_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": ""}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:35:17,457 - session_2017-10-24T12_35_00_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:35:17,459 - session_2017-10-24T12_35_00_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-24 12:35:17,459 - session_2017-10-24T12_35_00_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-24 12:35:17,459 - session_2017-10-24T12_35_00_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-24 12:35:17,459 - session_2017-10-24T12_35_00_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99850416183
2017-10-24 12:35:17,461 - session_2017-10-24T12_35_00_0 - DEBUG - robust grammatical interpretations: []
2017-10-24 12:35:17,462 - session_2017-10-24T12_35_00_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-24 12:35:17,462 - session_2017-10-24T12_35_00_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-24 12:35:17,462 - session_2017-10-24T12_35_00_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-24 12:35:17,462 - session_2017-10-24T12_35_00_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-24 12:35:17,462 - session_2017-10-24T12_35_00_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-24 12:35:17,462 - session_2017-10-24T12_35_00_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 12:35:17,462 - session_2017-10-24T12_35_00_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:35:17,463 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 12:35:17,463 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:35:17,463 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:17,463 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:17,464 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,464 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 12:35:17,465 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:35:17,466 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:35:17,466 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,466 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,467 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,467 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:35:17,468 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:35:17,468 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:35:17,468 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:17,468 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 12:35:17,468 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 12:35:17,468 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:17,469 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:35:17,469 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:35:17,471 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,473 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,474 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:35:17,474 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:35:17,475 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:35:17,475 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:35:17,475 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:35:17,475 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:17,476 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7f80ab5a28>]
2017-10-24 12:35:17,476 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7f80ab5a28>], sender=GuiBackend, reason=None)
2017-10-24 12:35:17,476 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posted event
2017-10-24 12:35:17,476 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-24 12:35:17,476 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 12:35:17,476 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:35:17,476 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:35:17,476 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 12:35:17,477 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,478 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:35:17,478 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:35:17,479 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:35:17,480 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,480 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7f80ab5a28>], sender=GuiBackend, reason=None))
2017-10-24 12:35:17,481 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f7f80ab5a28>], sender=GuiBackend, reason=None)
2017-10-24 12:35:17,481 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:35:17,482 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,482 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:17,486 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:35:17,486 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:17,486 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:35:17,487 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:35:17,487 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:35:17,487 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:17,488 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:17,488 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:17,488 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:35:17,489 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841317.49
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:17,489 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:17,490 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:17,490 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:17,493 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:35:17,493 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:17,493 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:17,496 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:17,496 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:17,496 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:17,496 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:17,496 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:17,496 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:17,496 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:17,496 - session_2017-10-24T12_35_00_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:17,497 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:17,497 - session_2017-10-24T12_35_00_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:17,497 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:17,497 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:17,501 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:35:17,501 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:17,501 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:17,501 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:17,501 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,501 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:17,505 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:35:17,505 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:17,505 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:17,505 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:17,505 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,505 - session_2017-10-24T12_35_00_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - INFO - breaking out of accommodate
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - INFO - END integrate_moves
2017-10-24 12:35:17,506 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:17,507 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,507 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:17,507 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:17,507 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:17,507 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,507 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:17,507 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:17,510 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 12:35:17,510 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:17,510 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:17,510 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:35:17,510 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:17,510 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:17,511 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,511 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:35:17,511 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:17,512 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:17,512 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,512 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,512 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,513 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 12:35:17,514 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841317.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:17,514 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:17,514 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:17,516 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:35:17,516 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:17,521 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:35:17,521 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:17,522 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:17,524 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:17,524 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:17,524 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:35:17,525 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:17,526 - session_2017-10-24T12_35_00_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:17,526 - session_2017-10-24T12_35_00_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:17,526 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:17,526 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:17,526 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:17,526 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:17,527 - session_2017-10-24T12_35_00_0 - INFO - breaking out of accommodate
2017-10-24 12:35:17,527 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:17,527 - session_2017-10-24T12_35_00_0 - INFO - END integrate_moves
2017-10-24 12:35:17,527 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:17,527 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,527 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:17,529 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:35:17,530 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:17,530 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:17,530 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,530 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:17,530 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:17,530 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:17,530 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: select
2017-10-24 12:35:17,532 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841317.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:17,532 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:35:17,535 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                      ++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:17,536 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:17,538 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-24 12:35:17,538 - session_2017-10-24T12_35_00_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
2017-10-24 12:35:17,538 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 12:35:17,538 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:35:17,538 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:17,538 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:17,539 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,539 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-24 12:35:17,540 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 12:35:17,540 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:35:17,540 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,540 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,542 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,542 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:""), facts={})
2017-10-24 12:35:17,542 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"")
2017-10-24 12:35:17,542 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 12:35:17,542 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 12:35:17,542 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"")
2017-10-24 12:35:17,542 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"") generated as u'I heard you say.'
2017-10-24 12:35:17,543 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-24 12:35:17,543 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-24 12:35:17,543 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand.], sender=GenerateModule, reason=None)
2017-10-24 12:35:17,544 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,546 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:17,546 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:35:17,546 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
2017-10-24 12:35:17,546 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:""), facts={})
2017-10-24 12:35:17,546 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"")
2017-10-24 12:35:17,546 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 12:35:17,546 - session_2017-10-24T12_35_00_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 12:35:17,547 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend generated message []
2017-10-24 12:35:17,547 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:35:17,547 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posted event
2017-10-24 12:35:17,547 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand.], sender=GenerateModule, reason=None))
2017-10-24 12:35:17,547 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand.], sender=GenerateModule, reason=None)
2017-10-24 12:35:17,547 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say.", "I don't understand."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:35:17,547 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,548 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 12:35:17,548 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:35:17,548 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:35:17,548 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,549 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:17,564 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say.", "I don't understand."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:35:17,564 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:17,565 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say., I don't understand.], sender=TextOutputComponent, reason=None))
2017-10-24 12:35:17,565 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say., I don't understand.], sender=TextOutputComponent, reason=None)
2017-10-24 12:35:17,565 - session_2017-10-24T12_35_00_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:35:17,565 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 12:35:17,565 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 12:35:17,565 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 12:35:17,565 - session_2017-10-24T12_35_00_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None))
2017-10-24 12:35:17,566 - session_2017-10-24T12_35_00_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7f831cf090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7f83a06c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841317.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:17,566 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:17,566 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:17,567 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:17,570 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:35:17,570 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:17,570 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:17,572 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:17,572 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:17,572 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:17,572 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:17,572 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:17,572 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:17,573 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:17,573 - session_2017-10-24T12_35_00_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:17,573 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-24 12:35:17,573 - session_2017-10-24T12_35_00_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:17,573 - session_2017-10-24T12_35_00_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-24 12:35:17,573 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:17,577 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
?                             -------------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:35:17,577 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:17,577 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:17,578 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:17,578 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,578 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:17,580 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                          ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:17,580 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:17,580 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - INFO - breaking out of accommodate
2017-10-24 12:35:17,581 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:17,582 - session_2017-10-24T12_35_00_0 - INFO - END integrate_moves
2017-10-24 12:35:17,582 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:17,582 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,582 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:17,582 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:17,582 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:17,582 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:17,583 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:17,583 - session_2017-10-24T12_35_00_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:17,585 - session_2017-10-24T12_35_00_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:17,585 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:17,585 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:17,585 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:35:17,585 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:17,585 - session_2017-10-24T12_35_00_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:17,586 - session_2017-10-24T12_35_00_0 - DEBUG - Sent.
2017-10-24 12:35:17,587 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:35:17,587 - session_2017-10-24T12_35_00_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:17,587 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:17,587 - session_2017-10-24T12_35_00_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:51,032 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:51,032 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 12:35:51,033 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:35:51,033 - session_2017-10-24T12_35_00_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:35:51,033 - session_2017-10-24T12_35_00_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 12:35:51,033 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:35:51,033 - session_2017-10-24T12_35_00_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 12:35:51,033 - session_2017-10-24T12_35_00_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:35:51,033 - session_2017-10-24T12_35_00_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 12:35:51,034 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:35:51,034 - session_2017-10-24T12_35_00_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 12:35:51,034 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:35:51,034 - session_2017-10-24T12_35_00_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:35:51,034 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:35:51,034 - session_2017-10-24T12_35_00_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 12:35:51,035 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 12:35:51,036 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:35:51,036 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:35:51,036 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 12:35:51,036 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 12:35:51,036 - session_2017-10-24T12_35_00_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 12:35:51,036 - session_2017-10-24T12_35_00_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
