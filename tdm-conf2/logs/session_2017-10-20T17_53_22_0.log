2017-10-20 17:53:22,898 - session_2017-10-20T17_53_22_0 - DEBUG - Backend()
2017-10-20 17:53:22,898 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.initialize()
2017-10-20 17:53:22,929 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fa16f716f10>>, False])
2017-10-20 17:53:22,929 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fa16f716f10>>, 'eng'])
2017-10-20 17:53:22,929 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 17:53:22,929 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fa16f716f10>>, True, 'disabled'])
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fa16f716f10>>])
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7fa16f716f10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fa16f716f10>>, 'eng', False, True])
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - Backend initialized
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - Backend uses language 'eng'
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - running module InterpretModule
2017-10-20 17:53:22,930 - session_2017-10-20T17_53_22_0 - DEBUG - running module DmeModule
2017-10-20 17:53:22,933 - session_2017-10-20T17_53_22_0 - DEBUG - running module DeviceManager
2017-10-20 17:53:22,933 - session_2017-10-20T17_53_22_0 - DEBUG - running module GenerateModule
2017-10-20 17:53:22,933 - session_2017-10-20T17_53_22_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 17:53:22,933 - session_2017-10-20T17_53_22_0 - DEBUG - running module GuiBackend
2017-10-20 17:53:22,933 - session_2017-10-20T17_53_22_0 - DEBUG - running module CogloadModule
2017-10-20 17:53:22,933 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:22,934 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:22,934 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 17:53:22,934 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 17:53:22,935 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 17:53:22,935 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:22,936 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:22,970 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 17:53:22,970 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:22,970 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 17:53:22,971 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 17:53:22,971 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 17:53:22,971 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 17:53:22,972 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 17:53:22,972 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:22,972 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:22,975 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 17:53:22,975 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:22,975 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:53:22,976 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:53:22,976 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:53:22,976 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:53:22,977 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:53:22,977 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:53:22,978 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514802.98
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:22,978 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:22,978 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:22,979 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:22,981 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:22,981 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:22,981 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:22,983 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:22,983 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:22,983 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:22,984 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:22,984 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:22,984 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:22,984 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:22,984 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:22,984 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:53:22,984 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:22,985 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:22,986 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:22,986 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:22,986 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:22,986 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:22,989 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:53:22,989 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:22,991 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:53:22,991 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:22,992 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:22,992 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:22,992 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:22,992 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:22,992 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:22,993 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:22,993 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:22,993 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:22,993 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:22,993 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:53:22,994 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514802.98
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:22,994 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:53:22,998 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:22,998 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:23,000 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:23,000 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:23,003 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:53:23,003 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:23,005 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:53:23,006 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:23,006 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:23,006 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:53:23,008 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:23,008 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:53:23,008 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:53:23,010 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 17:53:23,011 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:53:23,011 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:53:23,011 - session_2017-10-20T17_53_22_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:53:23,012 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:53:23,012 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:53:23,012 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:53:23,012 - session_2017-10-20T17_53_22_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:53:23,012 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 17:53:23,012 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:53:23,013 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:53:23,013 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:53:23,013 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 17:53:23,013 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:23,013 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:53:23,014 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:23,014 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:23,014 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:23,014 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 17:53:23,015 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:53:23,015 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:53:23,016 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:23,016 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:23,017 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:23,017 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:53:23,017 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:53:23,017 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:53:23,017 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:23,017 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:53:23,018 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:53:23,018 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:23,019 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:53:23,019 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:53:23,019 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:23,021 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:23,021 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:53:23,021 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:53:23,021 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:53:23,022 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:53:23,022 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:53:23,022 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:23,022 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:53:23,022 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:53:23,022 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:53:23,023 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:53:23,023 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:53:23,023 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:53:23,023 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:23,023 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:53:23,023 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:53:23,024 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:53:23,024 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:23,024 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:23,063 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:53:23,063 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:23,063 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:53:23,064 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:53:23,064 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:53:23,064 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:53:23,064 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:53:23,064 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:53:23,065 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:53:23,066 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514803.07
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:23,066 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:23,067 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:23,067 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:23,070 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 17:53:23,070 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:23,070 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:53:23,073 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:23,074 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:53:23,074 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:23,077 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:53:23,077 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:23,077 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:23,077 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:23,077 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:23,077 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:23,080 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:53:23,081 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:23,081 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:23,081 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:23,081 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:23,082 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:23,082 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:23,082 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:23,082 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:23,082 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:23,082 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:23,082 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:23,082 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:23,083 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:23,083 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:23,083 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:23,083 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:23,083 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:23,083 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:23,084 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:23,084 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:23,084 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:23,086 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:23,086 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:23,086 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:23,086 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:53:23,086 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:23,087 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:23,087 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:23,087 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:53:23,088 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:23,088 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:23,088 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:28,107 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to hell"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:53:28,108 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:28,108 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None))
2017-10-20 17:53:28,108 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:28,108 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:28,109 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to hell"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:53:28,109 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:53:28,114 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:53:28,114 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])} for DDD 'recipehelp'
2017-10-20 17:53:28,114 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
2017-10-20 17:53:28,115 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:53:28,115 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to hell", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to hell"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to hell", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:53:28,115 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:28,115 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:53:28,116 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:53:28,116 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:53:28,116 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:53:28,116 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:53:28,116 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:28,116 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:53:28,117 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:53:28,118 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:53:28,118 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:53:28,119 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:53:28,120 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514808.12
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:28,120 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:28,124 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
-- END TIS changes --
2017-10-20 17:53:28,124 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:28,128 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-20 17:53:28,128 - session_2017-10-20T17_53_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:53:28,128 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:28,132 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:53:28,132 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:28,138 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:53:28,139 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:28,139 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:28,142 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:28,142 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:28,143 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:28,148 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 17:53:28,148 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:28,148 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:28,148 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:28,148 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:28,148 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:28,149 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
2017-10-20 17:53:28,149 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:28,149 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
2017-10-20 17:53:28,149 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:28,153 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:28,153 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:28,153 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:28,156 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:53:28,156 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:28,156 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:28,159 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:28,160 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:28,161 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:28,161 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:28,161 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:28,164 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:53:28,164 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:28,164 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:28,164 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:28,165 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:28,165 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:28,165 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None)
2017-10-20 17:53:28,165 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:28,165 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:53:28,166 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514808.12
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:28,166 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:53:28,170 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:53:28,170 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:28,173 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:28,173 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:28,176 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:53:28,176 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:28,177 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:28,180 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:53:28,181 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:28,184 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:53:28,184 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:28,184 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:28,184 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:53:28,187 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:28,187 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:53:28,187 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:53:28,189 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:28,190 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:53:28,190 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:53:28,190 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None))
2017-10-20 17:53:28,190 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None)
2017-10-20 17:53:28,190 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to hell", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:53:28,191 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:28,191 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:53:28,191 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:28,191 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:28,192 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:28,193 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:53:28,193 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:53:28,194 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:53:28,194 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:28,194 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:28,196 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:28,196 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 17:53:28,196 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:53:28,196 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:53:28,196 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:53:28,196 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:53:28,196 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:28,196 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:53:28,197 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:53:28,197 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:53:28,197 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:53:28,197 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:28,198 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 17:53:28,198 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:53:28,199 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:28,201 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:28,201 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:53:28,201 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:53:28,202 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 17:53:28,202 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:53:28,202 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:53:28,202 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:53:28,202 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:53:28,202 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:28,203 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:53:28,203 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:53:28,203 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:53:28,203 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-20 17:53:28,203 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:53:28,203 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:53:28,204 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:28,204 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:53:28,204 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:53:28,204 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:53:28,206 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:28,206 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:28,216 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:53:28,217 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:28,217 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 17:53:28,218 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 17:53:28,218 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:53:28,218 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:53:28,218 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:53:28,218 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:53:28,219 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-20 17:53:28,220 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514808.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:28,220 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:28,220 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:28,220 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:28,226 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:53:28,226 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:28,227 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:28,229 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:28,229 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:53:28,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:28,234 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:53:28,234 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:28,234 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:28,235 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:28,235 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:28,236 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:28,239 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:28,240 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:28,240 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:28,240 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:28,240 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:28,240 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:28,243 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 17:53:28,243 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:28,243 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:28,244 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:28,245 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:28,245 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:28,245 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:28,245 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:28,245 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:28,245 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:28,246 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:28,246 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:28,246 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:28,248 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:28,248 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:28,248 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:28,249 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:53:28,249 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:28,249 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:28,249 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:28,249 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:53:28,250 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:28,250 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:28,250 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:38,025 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 0.0, "utterance": "step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:53:38,025 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:38,025 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 0.0, utterance: step}], sender=TextInputComponent, reason=None))
2017-10-20 17:53:38,025 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 0.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:38,026 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 0.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:38,026 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 0.0, "utterance": "step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:53:38,026 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:53:38,027 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-20 17:53:38,027 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-20 17:53:38,027 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-20 17:53:38,027 - session_2017-10-20T17_53_22_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.9986000061
2017-10-20 17:53:38,029 - session_2017-10-20T17_53_22_0 - DEBUG - robust grammatical interpretations: []
2017-10-20 17:53:38,031 - session_2017-10-20T17_53_22_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-20 17:53:38,031 - session_2017-10-20T17_53_22_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-20 17:53:38,031 - session_2017-10-20T17_53_22_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-20 17:53:38,031 - session_2017-10-20T17_53_22_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-20 17:53:38,031 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-20 17:53:38,031 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-20 17:53:38,031 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:53:38,032 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 0.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:38,032 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-20 17:53:38,032 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-20 17:53:38,032 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:53:38,032 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:53:38,032 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:53:38,033 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:38,033 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:53:38,033 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 17:53:38,033 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 17:53:38,033 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 17:53:38,034 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 17:53:38,035 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514818.03
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:38,035 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:38,036 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:38,038 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:53:38,038 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:38,042 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
-- END TIS changes --
2017-10-20 17:53:38,042 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:38,042 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:38,045 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:38,045 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:38,045 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:38,045 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:38,045 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:38,045 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:38,045 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:38,045 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:38,046 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:38,047 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:38,047 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:38,047 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:38,047 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:38,047 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:38,048 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:38,050 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:53:38,050 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:38,050 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:38,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:38,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:38,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:38,051 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:38,051 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:53:38,052 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514818.03
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:38,052 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:53:38,056 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                             ++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:38,056 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:38,059 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: reraiseIssue
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:53:38,059 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:38,061 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmPerNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*neg)])
?                                       ++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:38,061 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:38,061 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:38,064 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*neg)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise)])
?                                                             ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.step_to_choose(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, raise(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:53:38,064 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:38,067 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
?                                                                                   +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, raise(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:53:38,068 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:38,068 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:38,068 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:53:38,070 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:38,070 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:53:38,070 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:53:38,073 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:38,074 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:53:38,074 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 17:53:38,074 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(NEGATIVE_PERCEPTION, None, sender=DmeModule, reason=None)
2017-10-20 17:53:38,075 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:53:38,075 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:38,075 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:38,076 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:38,076 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-20 17:53:38,077 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 17:53:38,078 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:53:38,078 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:38,078 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:38,080 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:38,080 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*neg), facts={})
2017-10-20 17:53:38,081 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*neg)
2017-10-20 17:53:38,081 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={})
2017-10-20 17:53:38,081 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-20 17:53:38,081 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:53:38,081 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:38,082 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*neg)
2017-10-20 17:53:38,082 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*neg) generated as u"I didn't hear."
2017-10-20 17:53:38,082 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise)
2017-10-20 17:53:38,082 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise) generated as u'So,'
2017-10-20 17:53:38,082 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:38,083 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 17:53:38,083 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I didn't hear., So,, Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:53:38,085 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:38,087 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:38,088 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:53:38,088 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:53:38,088 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*neg), facts={})
2017-10-20 17:53:38,088 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*neg)
2017-10-20 17:53:38,088 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={})
2017-10-20 17:53:38,088 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-20 17:53:38,088 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:53:38,088 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:53:38,089 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:53:38,089 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:53:38,089 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:53:38,090 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(NEGATIVE_PERCEPTION, None, sender=DmeModule, reason=None))
2017-10-20 17:53:38,090 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(NEGATIVE_PERCEPTION, None, sender=DmeModule, reason=None)
2017-10-20 17:53:38,090 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "DmeModule", "_reason": null, "event_type": "NEGATIVE_PERCEPTION"}
2017-10-20 17:53:38,090 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:38,090 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I didn't hear., So,, Which step?], sender=GenerateModule, reason=None))
2017-10-20 17:53:38,092 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I didn't hear., So,, Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:53:38,092 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I didn't hear.", "So,", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:53:38,092 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:38,092 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:53:38,093 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:53:38,093 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:53:38,093 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:38,094 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:38,101 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["I didn't hear.", "So,", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:53:38,101 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:38,101 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I didn't hear., So,, Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 17:53:38,102 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I didn't hear., So,, Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 17:53:38,102 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:53:38,102 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I didn't hear., So,, Which step?], sender=TurnManager, reason=None)
2017-10-20 17:53:38,102 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I didn't hear., So,, Which step?], sender=TurnManager, reason=None)
2017-10-20 17:53:38,102 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I didn't hear., So,, Which step?], sender=TurnManager, reason=None)
2017-10-20 17:53:38,103 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I didn't hear., So,, Which step?], sender=TurnManager, reason=None))
2017-10-20 17:53:38,104 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514818.1
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I didn't hear., So,, Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:38,104 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:38,104 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:38,104 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:38,109 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
- tis.sys_turns: 0
?                ^
+ tis.sys_turns: 1
?                ^
-- END TIS changes --
2017-10-20 17:53:38,109 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:38,109 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:38,111 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:38,112 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:53:38,113 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:38,117 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*neg, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:53:38,117 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:38,117 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:38,118 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:38,118 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:38,118 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:38,121 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*neg, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
?                                                                       ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:38,122 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:38,122 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:38,122 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:38,122 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:38,122 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:38,125 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 17:53:38,125 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:38,125 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:38,125 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:38,125 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:38,125 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:38,126 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:38,127 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:38,127 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:38,127 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:38,127 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:38,127 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:38,127 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:38,128 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:38,130 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:38,130 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:38,130 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I didn't hear., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:38,130 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:53:38,130 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:38,130 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:38,131 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:38,131 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I didn't hear., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:53:38,132 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I didn't hear., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:38,132 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I didn't hear., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:38,132 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:42,351 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:53:42,352 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:42,352 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step}], sender=TextInputComponent, reason=None))
2017-10-20 17:53:42,352 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:42,352 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:42,352 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:53:42,352 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:53:42,353 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-20 17:53:42,353 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-20 17:53:42,353 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-20 17:53:42,353 - session_2017-10-20T17_53_22_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99914693832
2017-10-20 17:53:42,355 - session_2017-10-20T17_53_22_0 - DEBUG - robust grammatical interpretations: []
2017-10-20 17:53:42,356 - session_2017-10-20T17_53_22_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-20 17:53:42,356 - session_2017-10-20T17_53_22_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-20 17:53:42,356 - session_2017-10-20T17_53_22_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-20 17:53:42,356 - session_2017-10-20T17_53_22_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-20 17:53:42,356 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-20 17:53:42,357 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-20 17:53:42,357 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:53:42,357 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:42,357 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-20 17:53:42,357 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-20 17:53:42,357 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:53:42,357 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:53:42,357 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:53:42,358 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:42,358 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:53:42,358 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 17:53:42,358 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 17:53:42,359 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 17:53:42,359 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 17:53:42,360 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514822.36
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:42,360 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:42,360 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:42,363 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:53:42,363 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:42,367 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:53:42,367 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:42,367 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:42,369 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:42,369 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:42,369 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:42,370 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:42,371 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:42,371 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:42,371 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:42,371 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:42,371 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:42,371 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:42,371 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:42,372 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:42,372 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:42,374 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:53:42,375 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:42,375 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:42,375 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:42,375 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:42,375 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:42,376 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:42,376 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:53:42,377 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514822.36
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:42,377 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:53:42,380 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:42,380 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:42,382 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-20 17:53:42,383 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)])
2017-10-20 17:53:42,383 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 17:53:42,383 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:53:42,383 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:42,384 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:42,384 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:42,384 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-20 17:53:42,385 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 17:53:42,385 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:53:42,385 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:42,386 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:42,387 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:42,387 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"step"), facts={})
2017-10-20 17:53:42,387 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"step")
2017-10-20 17:53:42,387 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-20 17:53:42,387 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-20 17:53:42,387 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"step")
2017-10-20 17:53:42,388 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"step") generated as u'I heard you say step.'
2017-10-20 17:53:42,388 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-20 17:53:42,388 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-20 17:53:42,388 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step., I don't understand.], sender=GenerateModule, reason=None)
2017-10-20 17:53:42,390 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:42,391 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:42,392 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:53:42,392 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)])
2017-10-20 17:53:42,392 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"step"), facts={})
2017-10-20 17:53:42,392 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"step")
2017-10-20 17:53:42,392 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-20 17:53:42,392 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-20 17:53:42,393 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:53:42,393 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:53:42,393 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:53:42,393 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step., I don't understand.], sender=GenerateModule, reason=None))
2017-10-20 17:53:42,393 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step., I don't understand.], sender=GenerateModule, reason=None)
2017-10-20 17:53:42,393 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say step.", "I don't understand."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:53:42,394 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:42,394 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:53:42,394 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:53:42,394 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:53:42,395 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:42,395 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:42,405 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say step.", "I don't understand."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:53:42,405 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:42,405 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say step., I don't understand.], sender=TextOutputComponent, reason=None))
2017-10-20 17:53:42,405 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say step., I don't understand.], sender=TextOutputComponent, reason=None)
2017-10-20 17:53:42,405 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:53:42,405 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say step., I don't understand.], sender=TurnManager, reason=None)
2017-10-20 17:53:42,406 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say step., I don't understand.], sender=TurnManager, reason=None)
2017-10-20 17:53:42,406 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say step., I don't understand.], sender=TurnManager, reason=None)
2017-10-20 17:53:42,406 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say step., I don't understand.], sender=TurnManager, reason=None))
2017-10-20 17:53:42,407 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514822.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say step., I don't understand.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:42,408 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:42,408 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:42,408 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:42,411 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:per*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:53:42,411 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:42,411 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:42,414 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:42,414 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:42,414 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:42,414 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:42,414 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:42,414 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:42,415 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:42,415 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:42,415 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-20 17:53:42,415 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:42,415 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-20 17:53:42,415 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:42,418 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:53:42,418 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:42,419 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:42,419 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:42,419 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:42,419 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:42,422 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                              ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:42,422 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:42,422 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:42,422 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:42,422 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:42,422 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:42,423 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:42,424 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:42,424 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:42,424 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:42,424 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:42,424 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:42,424 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:42,424 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:42,427 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:42,427 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:42,427 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say step., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:42,427 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:53:42,427 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:42,427 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:42,428 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:42,428 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say step., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:53:42,429 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say step., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:42,429 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say step., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:53:42,429 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:46,433 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:53:46,433 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:46,433 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 17:53:46,434 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:46,434 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:46,434 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:53:46,434 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:53:46,436 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:53:46,436 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-20 17:53:46,436 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-20 17:53:46,437 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:53:46,437 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:53:46,437 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:53:46,437 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:53:46,437 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:53:46,437 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:53:46,438 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:53:46,438 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:53:46,438 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:46,439 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:53:46,439 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:53:46,439 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:53:46,439 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:53:46,440 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:53:46,441 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514826.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:46,441 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:46,446 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-20 17:53:46,447 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:46,447 - session_2017-10-20T17_53_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:53:46,447 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:46,452 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
-- END TIS changes --
2017-10-20 17:53:46,453 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:46,459 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {}
- tis.sys_turns: 1
?                ^
+ tis.sys_turns: 0
?                ^
-- END TIS changes --
2017-10-20 17:53:46,459 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:46,459 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:46,461 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:46,461 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:46,461 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:46,467 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ----------
+ tis.private.tmp.usr.qud: stackset([])
-- END TIS changes --
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:53:46,468 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:46,469 - session_2017-10-20T17_53_22_0 - INFO - shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:53:46,469 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
2017-10-20 17:53:46,469 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:46,469 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:46,469 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:46,469 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:46,469 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:46,472 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: accommodateIssues2QUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 17:53:46,472 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:retract
2017-10-20 17:53:46,472 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:46,472 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
2017-10-20 17:53:46,472 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:46,476 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:53:46,476 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:46,476 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:46,480 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:53:46,480 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:46,483 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:53:46,483 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:46,484 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:46,487 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:53:46,488 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:46,488 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:46,491 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:53:46,491 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:46,491 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:46,491 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:46,491 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:46,494 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:53:46,494 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:46,495 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:46,495 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:46,495 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:46,495 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:46,495 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:53:46,495 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:53:46,495 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:53:46,496 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:53:46,497 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514826.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:46,497 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:53:46,501 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.tmp.sys.bel: {go_to_step("chose a step")}
- tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                             ------------------------------------
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:53:46,501 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:46,503 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:46,503 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:46,506 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 17:53:46,506 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:46,509 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:53:46,509 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:46,509 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:46,509 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:53:46,511 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:46,512 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:53:46,512 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:53:46,514 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:53:46,515 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:53:46,515 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:53:46,515 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-20 17:53:46,515 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:53:46,516 - session_2017-10-20T17_53_22_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:53:46,516 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-20 17:53:46,516 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:53:46,516 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:53:46,516 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:46,517 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:53:46,517 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:53:46,517 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:46,518 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:46,518 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:53:46,519 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:53:46,519 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:53:46,519 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:46,519 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:46,521 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:46,521 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:53:46,521 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:53:46,521 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:53:46,522 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-20 17:53:46,522 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:53:46,523 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:46,524 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:53:46,525 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:53:46,525 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:53:46,525 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:53:46,526 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:53:46,526 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:53:46,527 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16d01f488>]
2017-10-20 17:53:46,527 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16d01f488>], sender=GuiBackend, reason=None)
2017-10-20 17:53:46,527 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:53:46,528 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-20 17:53:46,528 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:53:46,529 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:53:46,529 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:46,530 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:53:46,530 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:53:46,530 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:53:46,531 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:46,532 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16d01f488>], sender=GuiBackend, reason=None))
2017-10-20 17:53:46,532 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16d01f488>], sender=GuiBackend, reason=None)
2017-10-20 17:53:46,532 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:53:46,533 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:46,533 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:46,536 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:53:46,536 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:53:46,536 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-20 17:53:46,537 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-20 17:53:46,537 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:53:46,537 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:53:46,538 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:53:46,538 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:53:46,538 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-20 17:53:46,539 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514826.54
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:46,540 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:46,540 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:46,540 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:46,545 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:53:46,546 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:46,546 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:46,548 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:46,548 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:46,548 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:46,548 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:46,549 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:46,549 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:46,549 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:46,549 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:46,549 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:53:46,549 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:46,549 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:53:46,549 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:46,552 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose a step")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:53:46,552 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:53:46,553 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:46,557 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                            ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:53:46,557 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:53:46,557 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:46,557 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:46,557 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:46,557 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:46,557 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:46,558 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:46,559 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:46,559 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:46,559 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:46,559 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:46,561 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:53:46,561 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:53:46,562 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:53:46,562 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:53:46,562 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:53:46,562 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:53:46,563 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:53:46,563 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 17:53:46,563 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:53:46,563 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:53:46,564 - session_2017-10-20T17_53_22_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7fa16d009638>:1.0
2017-10-20 17:53:46,564 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:53:47,564 - session_2017-10-20T17_53_22_0 - DEBUG - Timeout fired
2017-10-20 17:53:47,564 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:53:47,565 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:53:47,565 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:53:47,565 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:53:47,566 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514827.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:47,566 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:53:47,566 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:53:47,568 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:53:47,569 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:53:47,573 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:53:47,573 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:53:47,573 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:53:47,576 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:53:47,577 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:53:47,578 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:53:47,578 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:47,581 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:53:47,581 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:47,581 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:47,583 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose a step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:53:47,584 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:47,584 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:47,584 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:47,584 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:53:47,584 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:53:47,584 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:53:47,585 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:53:47,585 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:53:47,585 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:53:47,585 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:53:47,585 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:53:47,586 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514827.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:53:47,586 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:53:47,590 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose a step")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:47,590 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:53:47,593 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:53:47,593 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:47,596 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:53:47,596 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:47,599 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:53:47,599 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:53:47,599 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:53:47,599 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:53:47,601 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:53:47,601 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:53:47,601 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:53:47,603 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:53:47,604 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:53:47,604 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:54:02,209 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:54:02,209 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:02,209 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-20 17:54:02,209 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:02,209 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:02,209 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:54:02,209 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:54:02,211 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:54:02,211 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-20 17:54:02,211 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-20 17:54:02,211 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:02,212 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:54:02,212 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:02,212 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:54:02,212 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:02,212 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:02,213 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,214 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 17:54:02,214 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:54:02,214 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:54:02,214 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,215 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,216 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,216 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:54:02,216 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:02,216 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:54:02,216 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:02,216 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:02,217 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 17:54:02,217 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:02,217 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:54:02,217 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:54:02,218 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,220 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,220 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:54:02,220 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:02,220 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:54:02,220 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:02,220 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:54:02,220 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:02,221 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16d01f908>]
2017-10-20 17:54:02,221 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16d01f908>], sender=GuiBackend, reason=None)
2017-10-20 17:54:02,221 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:54:02,221 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:54:02,222 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:02,222 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:02,222 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:02,222 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 17:54:02,222 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,223 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:54:02,223 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:54:02,223 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:54:02,224 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,224 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16d01f908>], sender=GuiBackend, reason=None))
2017-10-20 17:54:02,224 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16d01f908>], sender=GuiBackend, reason=None)
2017-10-20 17:54:02,224 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:54:02,225 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,225 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:02,249 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:54:02,249 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:02,250 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:54:02,250 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:54:02,250 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:54:02,250 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:02,250 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:02,250 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:02,251 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:54:02,252 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514842.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:02,252 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:02,252 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:02,252 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:02,256 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:54:02,256 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:02,256 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:02,259 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:02,260 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:02,260 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:02,264 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:54:02,264 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:02,264 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,264 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:02,264 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,265 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:02,268 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:54:02,268 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:02,268 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,268 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:02,268 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,268 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:02,268 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:02,269 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:02,269 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:02,269 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:02,269 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:02,269 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:02,269 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:02,269 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:02,269 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:02,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:02,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:02,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:02,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:02,273 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:54:02,273 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:02,273 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:02,273 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:54:02,274 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:02,274 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:02,274 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,275 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:54:02,275 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:02,275 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:02,275 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,276 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,276 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,276 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:02,277 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514842.28
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:02,278 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:02,281 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-20 17:54:02,281 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:02,287 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 17:54:02,287 - session_2017-10-20T17_53_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:54:02,288 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:02,293 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:54:02,293 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:02,300 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:54:02,300 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:02,300 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:02,303 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:02,303 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:02,303 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:02,308 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 17:54:02,308 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:02,308 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:02,308 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:02,308 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:02,308 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:02,309 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:54:02,309 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:02,309 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:54:02,309 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:02,312 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:02,312 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:02,312 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,315 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:54:02,315 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:02,315 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,320 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:54:02,320 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:02,320 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:02,320 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:02,320 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:02,320 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:02,320 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:02,321 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:02,321 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:02,321 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:02,321 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:02,324 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_findoutFromDevice
-- BEGIN TIS changes --
- tis.shared.com: {}
+ tis.shared.com: {say_step("unknown step")}
-- END TIS changes --
2017-10-20 17:54:02,324 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,324 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:02,324 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,325 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:02,327 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:54:02,327 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,331 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("unknown step")}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
?                                          ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:54:02,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:02,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:02,332 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:02,332 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 17:54:02,332 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:02,332 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:54:02,333 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514842.28
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:02,333 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:54:02,338 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^ ^^ ^^^^^^^^^  ^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ^^^^^^^^^^^ ^ ^^^^  ^^^^ +++++++++++ ^^^
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:54:02,338 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:02,341 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:02,341 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:02,345 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:54:02,345 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:02,345 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:02,348 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:54:02,348 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:02,351 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                                                    +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:02,351 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:02,352 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:02,352 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:54:02,354 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:02,354 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:54:02,354 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:54:02,357 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:02,357 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:02,357 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:02,358 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-20 17:54:02,358 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 17:54:02,358 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:54:02,358 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,358 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:54:02,359 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:02,359 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:02,360 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,360 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:54:02,361 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:02,361 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:54:02,361 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,361 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,363 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,363 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:02,363 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:54:02,363 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:02,363 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:54:02,363 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:02,363 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:02,363 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:54:02,364 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:54:02,364 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:54:02,364 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:54:02,365 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:02,365 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-20 17:54:02,365 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:54:02,367 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,368 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:54:02,369 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:02,369 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:54:02,370 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:02,370 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:02,370 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:54:02,370 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:02,370 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:54:02,370 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:02,370 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:02,371 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16d0066c8>]
2017-10-20 17:54:02,371 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16d0066c8>], sender=GuiBackend, reason=None)
2017-10-20 17:54:02,372 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:54:02,372 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None))
2017-10-20 17:54:02,372 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:54:02,373 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:54:02,374 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,375 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:54:02,376 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:54:02,376 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Are you done?"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:54:02,377 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,378 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16d0066c8>], sender=GuiBackend, reason=None))
2017-10-20 17:54:02,378 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16d0066c8>], sender=GuiBackend, reason=None)
2017-10-20 17:54:02,378 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Are you done?"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:54:02,380 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:54:02,380 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,381 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:02,381 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:02,381 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None))
2017-10-20 17:54:02,381 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None)
2017-10-20 17:54:02,381 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:54:02,381 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:54:02,381 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:54:02,382 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:54:02,382 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None))
2017-10-20 17:54:02,383 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514842.38
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:02,383 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:02,384 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:02,384 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:02,391 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:54:02,391 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:02,391 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:02,394 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:02,394 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:02,394 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:02,394 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:02,394 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:02,395 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:02,395 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:02,395 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:02,395 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:02,395 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:02,395 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:02,395 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:02,399 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:54:02,399 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:02,400 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,400 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:02,400 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,400 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:02,404 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:02,405 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:02,405 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,405 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:02,405 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,405 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:02,408 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:02,409 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:02,410 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:02,410 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:02,410 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:02,410 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:02,410 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:02,410 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,410 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:02,410 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:02,411 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:02,411 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:02,411 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:02,411 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:02,414 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:02,414 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:02,414 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:02,414 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:54:02,414 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:02,414 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:02,415 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:02,415 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:54:02,415 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:02,415 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:02,416 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:21,834 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "yes"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:54:21,834 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:21,834 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None))
2017-10-20 17:54:21,835 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:21,835 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:21,835 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "yes"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:54:21,835 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:54:21,837 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:54:21,837 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])} for DDD 'recipehelp'
2017-10-20 17:54:21,838 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
2017-10-20 17:54:21,838 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:21,838 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Yes": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "yes"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "True"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:54:21,838 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:21,839 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:54:21,839 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:21,839 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:21,839 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:21,839 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:54:21,840 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:21,840 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:54:21,840 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,840 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,841 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,841 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:21,842 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514861.84
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:21,842 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:21,850 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^^                                                                                                              ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^                                                                                                              ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^^                                                                                                              -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^
-- END TIS changes --
2017-10-20 17:54:21,851 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:21,856 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
-- END TIS changes --
2017-10-20 17:54:21,862 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^^
-- END TIS changes --
2017-10-20 17:54:21,863 - session_2017-10-20T17_53_22_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-20 17:54:21,863 - session_2017-10-20T17_53_22_0 - INFO - Could not log rerank
2017-10-20 17:54:21,863 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:21,867 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 17:54:21,867 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:21,872 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-20 17:54:21,872 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:21,872 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:21,875 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:21,875 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:21,875 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                                                      ^ ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-20 17:54:21,881 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:21,885 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(True)}
?                          ++++++++++
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(True)}
?                                                                    ++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-20 17:54:21,885 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:21,885 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:21,889 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(True)}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(True), resolved(?X.done(X))}
?                                                                                ++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:54:21,889 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:21,892 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
?                          ---------------------
+ tis.private.plan: Stack([device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:54:21,892 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,892 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:21,893 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:21,896 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step("unknown step")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), forget(done)])
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-20 17:54:21,896 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,896 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:21,899 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(True), resolved(?X.done(X))}
?                                                                    ----------------------------------
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
-- END TIS changes --
2017-10-20 17:54:21,900 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,900 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:21,900 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,900 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:21,903 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:54:21,903 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:21,903 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:21,903 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,903 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:21,903 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:21,903 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-20 17:54:21,904 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-20 17:54:21,904 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:21,904 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:54:21,905 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514861.84
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:21,905 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:54:21,909 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step("unknown step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:54:21,909 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:21,909 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:21,912 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:21,912 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:21,912 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:21,912 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:21,912 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:54:21,915 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:21,915 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:54:21,915 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:54:21,917 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:54:21,918 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-20 17:54:21,918 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:21,918 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None))
2017-10-20 17:54:21,918 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-20 17:54:21,918 - session_2017-10-20T17_53_22_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-20 17:54:21,918 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None))
2017-10-20 17:54:21,919 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-20 17:54:21,919 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "yes", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:54:21,919 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:21,919 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:54:21,920 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:21,920 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:21,921 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:21,921 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:54:21,922 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:21,922 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:54:21,922 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,923 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,924 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,924 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:21,924 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:54:21,924 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:54:21,925 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:54:21,925 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-20 17:54:21,926 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,928 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,928 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:54:21,929 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-20 17:54:21,929 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:21,929 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:54:21,930 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16cff5dd0>]
2017-10-20 17:54:21,930 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16cff5dd0>], sender=GuiBackend, reason=None)
2017-10-20 17:54:21,930 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:54:21,931 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None))
2017-10-20 17:54:21,931 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-20 17:54:21,931 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [""], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:54:21,931 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:21,931 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16cff5dd0>], sender=GuiBackend, reason=None))
2017-10-20 17:54:21,932 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16cff5dd0>], sender=GuiBackend, reason=None)
2017-10-20 17:54:21,932 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:54:21,933 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:21,933 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:21,936 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [""], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:54:21,937 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:21,937 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None))
2017-10-20 17:54:21,937 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None)
2017-10-20 17:54:21,937 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:54:21,938 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:54:21,938 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:54:21,938 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:54:21,938 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:54:21,939 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514861.94
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("unknown step")}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:21,939 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:21,940 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:21,940 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:21,945 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:54:21,945 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:21,945 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:21,948 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:21,948 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:21,948 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:21,948 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:21,948 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:21,948 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:21,949 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:21,949 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:21,949 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-20 17:54:21,949 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:21,949 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-20 17:54:21,949 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:21,952 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:54:21,952 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:21,952 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:21,952 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:21,952 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,952 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:21,952 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:21,953 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:21,953 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:21,953 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:21,953 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:21,953 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:21,953 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:21,953 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:21,953 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:21,957 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:54:21,957 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,957 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:21,960 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step("unknown step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:54:21,960 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,960 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:21,960 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,960 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:21,961 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:21,961 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:21,961 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:21,961 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:21,961 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:21,963 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:54:21,964 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:21,964 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:54:21,965 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514861.94
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("unknown step")}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:21,965 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:54:21,968 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step("unknown step")}
- tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:21,968 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:21,971 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:21,971 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:21,974 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:54:21,974 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:21,977 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:21,977 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:21,977 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:21,977 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:54:21,979 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:21,980 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:54:21,980 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:54:21,982 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:54:21,982 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:21,983 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:54:21,983 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:54:21,983 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:21,983 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:21,983 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:21,984 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)))
2017-10-20 17:54:21,984 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:54:21,984 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:54:21,985 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,985 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,986 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,986 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:54:21,986 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:21,986 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:54:21,986 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:21,987 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:21,987 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 17:54:21,987 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:21,988 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:54:21,988 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:54:21,989 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,990 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:21,990 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:54:21,990 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:21,990 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:54:21,991 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:21,991 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:54:21,991 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:21,991 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:54:21,991 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:54:21,991 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:54:21,992 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:54:21,992 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:54:21,992 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:54:21,992 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:21,992 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:54:21,993 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:54:21,993 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:54:21,993 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:21,993 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:22,041 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:54:22,042 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:22,042 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:54:22,042 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:54:22,042 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:54:22,042 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:22,042 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:22,042 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:22,043 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:54:22,044 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514862.04
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:22,044 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:22,044 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:22,044 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:22,048 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-20 17:54:22,048 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:22,048 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:22,051 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:22,052 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:22,052 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:22,055 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:54:22,055 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:22,055 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:22,056 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:22,056 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:22,056 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:22,059 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:22,060 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:22,061 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:22,061 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:22,061 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:22,061 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:22,061 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:22,061 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:22,061 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:22,061 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:22,062 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:22,062 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:22,062 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:22,064 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:54:22,064 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:22,065 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:22,065 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:54:22,065 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:22,065 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:22,065 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:22,065 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:54:22,066 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:22,066 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:22,066 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:29,185 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "no"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:54:29,185 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:29,185 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None))
2017-10-20 17:54:29,185 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:29,185 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:29,186 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "no"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:54:29,186 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:54:29,188 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:54:29,188 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])} for DDD 'recipehelp'
2017-10-20 17:54:29,188 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
2017-10-20 17:54:29,188 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:29,189 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.No": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "no"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "False"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:54:29,189 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:29,189 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:54:29,189 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:29,189 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:29,189 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:29,190 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:54:29,190 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:29,190 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:54:29,191 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:29,191 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:29,191 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:29,192 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:29,193 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514869.19
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:29,194 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:29,201 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^                                                                                                             ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^^                                                                                                             ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^                                                                                                             -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^^
-- END TIS changes --
2017-10-20 17:54:29,202 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:29,202 - session_2017-10-20T17_53_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:54:29,203 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:29,207 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no')])
-- END TIS changes --
2017-10-20 17:54:29,208 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:29,214 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:54:29,214 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:29,214 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:29,217 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:29,217 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:29,217 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:29,221 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                                                      ^ ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:54:29,221 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:29,222 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:29,226 - session_2017-10-20T17_53_22_0 - INFO - shifted: OpenQueue([#, Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no')])
2017-10-20 17:54:29,227 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#, Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no')])
2017-10-20 17:54:29,227 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:29,227 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:29,229 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: removeYesNo
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#, Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no')])
+ tis.private.nim: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:29,229 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:29,229 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:29,229 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:29,229 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:29,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:29,230 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:29,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:29,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:29,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:29,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:29,230 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:29,231 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:29,231 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:29,231 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:29,231 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-20 17:54:29,231 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:29,231 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:54:29,232 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514869.19
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no')])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:29,232 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:54:29,235 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:29,235 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:29,237 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:29,237 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:29,237 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:29,240 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.goal(X)))])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:29,240 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:29,240 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:29,240 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:54:29,243 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:29,243 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:54:29,243 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:54:29,245 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:29,246 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:29,246 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:29,246 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None))
2017-10-20 17:54:29,246 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-20 17:54:29,246 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "no", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:54:29,247 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:29,247 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:54:29,247 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:29,247 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:29,248 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:29,249 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:54:29,249 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:29,249 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:54:29,249 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:29,249 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:29,250 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:29,250 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:54:29,250 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:29,250 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:29,251 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:54:29,251 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:54:29,251 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:29,253 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:29,253 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:54:29,253 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:29,253 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:54:29,253 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:29,253 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:54:29,253 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:54:29,254 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:54:29,254 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:54:29,254 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:54:29,254 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:54:29,254 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:29,254 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:54:29,255 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:54:29,255 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:54:29,256 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:29,256 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:29,279 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:54:29,279 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:29,279 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:54:29,279 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:54:29,279 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:54:29,280 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:29,280 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:29,280 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:29,280 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:54:29,281 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514869.28
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:29,281 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:29,281 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:29,281 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:29,285 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
- tis.sys_turns: 0
?                ^
+ tis.sys_turns: 1
?                ^
-- END TIS changes --
2017-10-20 17:54:29,285 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:29,285 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:29,287 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:29,287 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:29,288 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:29,292 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:54:29,292 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:29,292 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:29,292 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:29,292 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:29,293 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:29,294 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:29,294 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:29,294 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:29,294 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:29,294 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:29,294 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:29,294 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:29,296 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:29,297 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:29,297 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [What would you like to do?], latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:29,297 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:54:29,297 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:29,297 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:29,298 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:29,298 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [What would you like to do?], latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:54:29,298 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [What would you like to do?], latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:29,299 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [What would you like to do?], latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:29,299 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:39,629 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:54:39,629 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:39,629 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-20 17:54:39,629 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:39,629 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:39,630 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:54:39,630 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:54:39,630 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:54:39,631 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-20 17:54:39,631 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-20 17:54:39,631 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:39,631 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:54:39,632 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:39,632 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:54:39,632 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:39,632 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:39,632 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:39,632 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:54:39,633 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:39,633 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:54:39,633 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:39,633 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:39,634 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:39,634 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:39,635 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514879.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:39,635 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:39,638 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-20 17:54:39,638 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:39,642 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 17:54:39,642 - session_2017-10-20T17_53_22_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:54:39,642 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:39,646 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                             ^^ ^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
?                                             ^ ^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:54:39,646 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:39,650 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
- tis.sys_turns: 1
?                ^
+ tis.sys_turns: 0
?                ^
-- END TIS changes --
2017-10-20 17:54:39,650 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:39,651 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:39,653 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:39,653 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:39,653 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:39,655 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:39,655 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:39,656 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:39,656 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:39,656 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:39,656 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:39,656 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:54:39,656 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:39,656 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:54:39,656 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:39,659 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:39,660 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:39,660 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:39,662 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:54:39,662 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:39,662 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,666 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:54:39,666 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:39,666 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:39,666 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:39,666 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:39,666 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:39,666 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:39,667 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:39,667 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:39,667 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:39,667 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:39,670 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_findoutFromDevice
-- BEGIN TIS changes --
- tis.shared.com: {}
+ tis.shared.com: {say_step("unknown step")}
-- END TIS changes --
2017-10-20 17:54:39,670 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,670 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:39,671 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,672 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:39,675 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:54:39,675 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:39,679 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("unknown step")}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
?                                          ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:54:39,679 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:39,679 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:39,680 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,680 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:39,680 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:39,680 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 17:54:39,680 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:39,681 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:54:39,682 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514879.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:39,682 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:54:39,685 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:54:39,685 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:39,688 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:39,688 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:39,692 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:54:39,692 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:39,692 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:39,696 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:54:39,696 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:39,699 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                                                    +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:39,699 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:39,699 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:39,699 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:54:39,701 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:39,702 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:54:39,702 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:54:39,704 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:39,704 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:39,705 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:39,705 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-20 17:54:39,705 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 17:54:39,705 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:54:39,706 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:39,706 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:54:39,706 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:39,706 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:39,707 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:39,707 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:54:39,708 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:39,708 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:54:39,708 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:39,708 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:39,710 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:39,710 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:39,710 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:54:39,710 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:39,710 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:54:39,710 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:39,710 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:39,710 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:54:39,711 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:54:39,711 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:54:39,711 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:54:39,711 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:39,712 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-20 17:54:39,712 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:54:39,714 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:39,716 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:54:39,718 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:39,718 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:54:39,721 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:39,726 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:39,727 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:54:39,727 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:39,728 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:54:39,728 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:39,729 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:39,733 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16c7be320>]
2017-10-20 17:54:39,734 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16c7be320>], sender=GuiBackend, reason=None)
2017-10-20 17:54:39,734 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:54:39,734 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None))
2017-10-20 17:54:39,734 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:54:39,735 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:54:39,738 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:39,738 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:54:39,739 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:54:39,739 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Are you done?"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:54:39,740 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:39,740 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16c7be320>], sender=GuiBackend, reason=None))
2017-10-20 17:54:39,740 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fa16c7be320>], sender=GuiBackend, reason=None)
2017-10-20 17:54:39,741 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Are you done?"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:54:39,742 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:39,743 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:39,747 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:54:39,748 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:39,748 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None))
2017-10-20 17:54:39,748 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None)
2017-10-20 17:54:39,749 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:54:39,749 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:54:39,749 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:54:39,750 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:54:39,751 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None))
2017-10-20 17:54:39,753 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514879.75
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:39,753 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:39,754 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:39,754 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:39,760 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:54:39,760 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:39,760 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:39,763 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:39,763 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:39,763 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:39,763 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:39,763 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:39,763 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:39,763 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:39,763 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:39,764 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:39,764 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:39,764 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:39,764 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:39,768 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:54:39,768 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:39,768 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:39,768 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:39,769 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,769 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:39,772 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:39,772 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:39,772 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:39,773 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:39,773 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,773 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:39,776 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:54:39,776 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:39,776 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:39,777 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:39,778 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:39,778 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:39,778 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,778 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:39,778 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:39,779 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:39,779 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:39,779 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:39,779 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:39,782 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:39,782 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:39,782 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:39,782 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:54:39,782 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:39,782 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:39,783 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:39,783 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:54:39,783 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:39,784 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:39,784 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:43,212 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "no"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:54:43,212 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:43,212 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None))
2017-10-20 17:54:43,212 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:43,213 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:43,213 - session_2017-10-20T17_53_22_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "no"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:54:43,213 - session_2017-10-20T17_53_22_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:54:43,215 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:54:43,215 - session_2017-10-20T17_53_22_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])} for DDD 'recipehelp'
2017-10-20 17:54:43,215 - session_2017-10-20T17_53_22_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
2017-10-20 17:54:43,215 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:43,216 - session_2017-10-20T17_53_22_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.No": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "no"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "False"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:54:43,216 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:54:43,216 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:54:43,216 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:54:43,217 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:43,217 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:54:43,217 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:54:43,217 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,218 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:54:43,218 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,218 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,219 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,219 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:43,220 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514883.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:43,220 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:43,225 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^                                                                                                             ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^^                                                                                                             ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^                                                                                                             -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^^
-- END TIS changes --
2017-10-20 17:54:43,226 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:43,230 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
-- END TIS changes --
2017-10-20 17:54:43,235 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^^
-- END TIS changes --
2017-10-20 17:54:43,236 - session_2017-10-20T17_53_22_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-20 17:54:43,237 - session_2017-10-20T17_53_22_0 - INFO - Could not log rerank
2017-10-20 17:54:43,237 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:43,241 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 17:54:43,241 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:43,247 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-20 17:54:43,247 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:43,248 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:43,251 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:43,251 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:43,251 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:43,258 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                                                      ^ ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:54:43,258 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:43,258 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:43,258 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:43,258 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:43,258 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:43,258 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-20 17:54:43,258 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:43,259 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-20 17:54:43,259 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:43,262 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(False)}
?                          +++++++++++
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(False)}
?                                                                    +++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-20 17:54:43,262 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:43,263 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:43,267 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(False)}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(False), resolved(?X.done(X))}
?                                                                                 ++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:54:43,267 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:43,270 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
?                          ---------------------
+ tis.private.plan: Stack([device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:54:43,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,270 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:43,270 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:43,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:43,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:43,270 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:43,271 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:43,271 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:43,271 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:43,271 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:43,271 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,274 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step("unknown step")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), forget(done)])
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-20 17:54:43,274 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,274 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,277 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(False), resolved(?X.done(X))}
?                                                                    -----------------------------------
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
-- END TIS changes --
2017-10-20 17:54:43,277 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,278 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,278 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,278 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:43,281 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:54:43,281 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:43,281 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,281 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,281 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:43,281 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:43,281 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-20 17:54:43,281 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-20 17:54:43,282 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:43,282 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:54:43,283 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514883.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:43,283 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:54:43,287 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step("unknown step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:54:43,287 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:43,287 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:43,290 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:43,290 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:43,290 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:43,290 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:43,291 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:54:43,293 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:43,293 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:54:43,293 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:54:43,296 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:54:43,296 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-20 17:54:43,296 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:43,296 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None))
2017-10-20 17:54:43,296 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-20 17:54:43,297 - session_2017-10-20T17_53_22_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-20 17:54:43,297 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None))
2017-10-20 17:54:43,297 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-20 17:54:43,297 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": "no", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:54:43,298 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,298 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:54:43,298 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:54:43,298 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:43,299 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,299 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:54:43,300 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:54:43,300 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:54:43,300 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,300 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,301 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,301 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:43,301 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:54:43,301 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:54:43,302 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:54:43,302 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-20 17:54:43,303 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,304 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,305 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:54:43,305 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-20 17:54:43,305 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:54:43,305 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:54:43,305 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16d009cb0>]
2017-10-20 17:54:43,305 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16d009cb0>], sender=GuiBackend, reason=None)
2017-10-20 17:54:43,305 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:54:43,306 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None))
2017-10-20 17:54:43,306 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-20 17:54:43,306 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [""], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:54:43,306 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,306 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16d009cb0>], sender=GuiBackend, reason=None))
2017-10-20 17:54:43,307 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7fa16d009cb0>], sender=GuiBackend, reason=None)
2017-10-20 17:54:43,307 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:54:43,308 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,308 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:43,319 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": [""], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:54:43,319 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:43,319 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None))
2017-10-20 17:54:43,320 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None)
2017-10-20 17:54:43,320 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:54:43,320 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:54:43,320 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:54:43,320 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:54:43,320 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:54:43,322 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514883.32
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("unknown step")}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:43,322 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:43,322 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:43,322 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:43,327 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:54:43,328 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:43,328 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:43,330 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:43,330 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-20 17:54:43,331 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:43,334 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:54:43,334 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:43,334 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:43,334 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:43,334 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,334 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:43,334 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:43,335 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:43,335 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:43,335 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:43,335 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:43,335 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:43,335 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:43,335 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:43,335 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,338 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:54:43,338 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,338 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,342 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step("unknown step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:54:43,342 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,342 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,342 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,342 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:43,342 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:43,342 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,343 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,343 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:43,343 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:43,345 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:54:43,345 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:43,345 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: select
2017-10-20 17:54:43,346 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514883.32
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("unknown step")}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:43,346 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:54:43,350 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step("unknown step")}
- tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:43,350 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:43,353 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:54:43,353 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:43,355 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:54:43,355 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:43,358 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:54:43,358 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:54:43,358 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_move
2017-10-20 17:54:43,359 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:54:43,361 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:43,361 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:54:43,361 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:54:43,363 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:54:43,364 - session_2017-10-20T17_53_22_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:43,364 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:54:43,364 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:54:43,364 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:43,364 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:43,365 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,365 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)))
2017-10-20 17:54:43,366 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:54:43,366 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:54:43,366 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,367 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,368 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,368 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:54:43,368 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:43,368 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:54:43,368 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:43,368 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:43,369 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 17:54:43,369 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:43,369 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:54:43,369 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:54:43,370 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,372 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:54:43,372 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:54:43,372 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:54:43,372 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:54:43,372 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:54:43,372 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:54:43,373 - session_2017-10-20T17_53_22_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:54:43,373 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:54:43,373 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:54:43,373 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posted event
2017-10-20 17:54:43,373 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:54:43,373 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:54:43,374 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:54:43,374 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,374 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:54:43,374 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:54:43,375 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:54:43,375 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,375 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:54:43,423 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:54:43,423 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:54:43,423 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:54:43,423 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:54:43,423 - session_2017-10-20T17_53_22_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:54:43,424 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:43,424 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:43,424 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:54:43,424 - session_2017-10-20T17_53_22_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:54:43,425 - session_2017-10-20T17_53_22_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fa16eee0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fa16f716090>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514883.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:54:43,425 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:54:43,425 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:54:43,426 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:54:43,429 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-20 17:54:43,429 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:54:43,429 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:54:43,432 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:54:43,432 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:54:43,432 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:54:43,432 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:54:43,432 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:54:43,432 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:54:43,432 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:54:43,432 - session_2017-10-20T17_53_22_0 - INFO - BEGIN integrate_moves
2017-10-20 17:54:43,433 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:43,433 - session_2017-10-20T17_53_22_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:54:43,433 - session_2017-10-20T17_53_22_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:54:43,433 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:43,436 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:54:43,436 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:43,436 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:43,437 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:43,437 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,437 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:integrate
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:43,441 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_action
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - INFO - breaking out of accommodate
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - INFO - END integrate_moves
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:54:43,442 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:54:43,443 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:54:43,443 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:54:43,443 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:54:43,443 - session_2017-10-20T17_53_22_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:54:43,446 - session_2017-10-20T17_53_22_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:54:43,446 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:43,446 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:43,446 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:54:43,446 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:54:43,446 - session_2017-10-20T17_53_22_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:54:43,447 - session_2017-10-20T17_53_22_0 - DEBUG - Sent.
2017-10-20 17:54:43,447 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:54:43,447 - session_2017-10-20T17_53_22_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:43,448 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:54:43,448 - session_2017-10-20T17_53_22_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:56:37,153 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:56:37,154 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-20 17:56:37,154 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:56:37,154 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:56:37,154 - session_2017-10-20T17_53_22_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 17:56:37,154 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:56:37,154 - session_2017-10-20T17_53_22_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 17:56:37,155 - session_2017-10-20T17_53_22_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:56:37,155 - session_2017-10-20T17_53_22_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 17:56:37,155 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:56:37,155 - session_2017-10-20T17_53_22_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 17:56:37,155 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:56:37,155 - session_2017-10-20T17_53_22_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:56:37,155 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:56:37,155 - session_2017-10-20T17_53_22_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-20 17:56:37,156 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 17:56:37,157 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:56:37,157 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:56:37,157 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-20 17:56:37,157 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 17:56:37,157 - session_2017-10-20T17_53_22_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-20 17:56:37,157 - session_2017-10-20T17_53_22_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
