2017-10-20 14:09:31,477 - session_2017-10-20T14_09_31_0 - DEBUG - Backend()
2017-10-20 14:09:31,478 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.initialize()
2017-10-20 14:09:31,505 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fcaa0d59dd0>>, False])
2017-10-20 14:09:31,505 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fcaa0d59dd0>>, 'eng'])
2017-10-20 14:09:31,505 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fcaa0d59dd0>>, True, 'disabled'])
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fcaa0d59dd0>>])
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7fcaa0d59dd0>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fcaa0d59dd0>>, 'eng', False, True])
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend initialized
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - Backend uses language 'eng'
2017-10-20 14:09:31,506 - session_2017-10-20T14_09_31_0 - DEBUG - running module InterpretModule
2017-10-20 14:09:31,507 - session_2017-10-20T14_09_31_0 - DEBUG - running module DmeModule
2017-10-20 14:09:31,508 - session_2017-10-20T14_09_31_0 - DEBUG - running module DeviceManager
2017-10-20 14:09:31,508 - session_2017-10-20T14_09_31_0 - DEBUG - running module GenerateModule
2017-10-20 14:09:31,508 - session_2017-10-20T14_09_31_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 14:09:31,508 - session_2017-10-20T14_09_31_0 - DEBUG - running module GuiBackend
2017-10-20 14:09:31,509 - session_2017-10-20T14_09_31_0 - DEBUG - running module CogloadModule
2017-10-20 14:09:31,509 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:09:31,509 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:09:31,510 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 14:09:31,510 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 14:09:31,510 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 14:09:31,511 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:31,511 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:09:31,544 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 14:09:31,545 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:09:31,545 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 14:09:31,546 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,546 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 14:09:31,546 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 14:09:31,546 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 14:09:31,547 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:31,547 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:09:31,549 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 14:09:31,549 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:09:31,549 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 14:09:31,550 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,550 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,550 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,550 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 14:09:31,550 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 14:09:31,551 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501371.55
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:31,551 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:09:31,552 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 14:09:31,552 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 14:09:31,554 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:31,554 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 14:09:31,554 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 14:09:31,556 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - INFO - BEGIN integrate_moves
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 14:09:31,557 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:31,558 - session_2017-10-20T14_09_31_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 14:09:31,558 - session_2017-10-20T14_09_31_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 14:09:31,558 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:31,559 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:31,559 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:31,559 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:accommodate
2017-10-20 14:09:31,559 - session_2017-10-20T14_09_31_0 - INFO - breaking out of accommodate
2017-10-20 14:09:31,559 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:31,559 - session_2017-10-20T14_09_31_0 - INFO - END integrate_moves
2017-10-20 14:09:31,559 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:31,559 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:31,562 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
-- END TIS changes --
2017-10-20 14:09:31,562 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:31,562 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:31,562 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 14:09:31,563 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:31,563 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:31,563 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:31,563 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:31,563 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 14:09:31,563 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:31,563 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: select
2017-10-20 14:09:31,564 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501371.55
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:31,564 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 14:09:31,568 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
-- END TIS changes --
2017-10-20 14:09:31,568 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:31,570 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?set([goal(resolve(?X.go_to_step(X)))]))])
-- END TIS changes --
2017-10-20 14:09:31,570 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:09:31,570 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_move
2017-10-20 14:09:31,573 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.alts: []
+ tis.next_utterance.alts: [{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}]
- tis.next_utterance.moves: OpenQueue([#])
- tis.next_utterance.plan_item: None
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))])
+ tis.next_utterance.plan_item: findout(?set([goal(resolve(?X.go_to_step(X)))]))
- tis.private.agenda: OpenQueue([#, findout(?set([goal(resolve(?X.go_to_step(X)))]))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 14:09:31,573 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:09:31,573 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_move
2017-10-20 14:09:31,573 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 14:09:31,575 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:31,575 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 14:09:31,576 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:set_timeout
2017-10-20 14:09:31,578 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 14:09:31,579 - session_2017-10-20T14_09_31_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')])
2017-10-20 14:09:31,579 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))]), context={}, alts=[{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}], plan_item=findout(?set([goal(resolve(?X.go_to_step(X)))])), default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 14:09:31,579 - session_2017-10-20T14_09_31_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,579 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,579 - session_2017-10-20T14_09_31_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,580 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,580 - session_2017-10-20T14_09_31_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 14:09:31,580 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 14:09:31,580 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 14:09:31,580 - session_2017-10-20T14_09_31_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 14:09:31,580 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 14:09:31,580 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 14:09:31,581 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:31,581 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 14:09:31,581 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:31,581 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 14:09:31,582 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:31,583 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))]), context={}, alts=[{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}], plan_item=findout(?set([goal(resolve(?X.go_to_step(X)))])), default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 14:09:31,583 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))]), context={}, alts=[{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}], plan_item=findout(?set([goal(resolve(?X.go_to_step(X)))])), default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 14:09:31,583 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 14:09:31,583 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))]), context={}, alts=[{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}], plan_item=findout(?set([goal(resolve(?X.go_to_step(X)))])), default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:31,584 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))]), context={}, alts=[{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}], plan_item=findout(?set([goal(resolve(?X.go_to_step(X)))])), default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:31,585 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))]), context={}, alts=[{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}], plan_item=findout(?set([goal(resolve(?X.go_to_step(X)))])), default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:31,586 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp'), facts={})
2017-10-20 14:09:31,586 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')
2017-10-20 14:09:31,586 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')
2017-10-20 14:09:31,588 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp') generated as u'Do you want to know go to step?'
2017-10-20 14:09:31,589 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Do you want to know go to step?], sender=GenerateModule, reason=None)
2017-10-20 14:09:31,591 - session_2017-10-20T14_09_31_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))]), context={}, alts=[{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}], plan_item=findout(?set([goal(resolve(?X.go_to_step(X)))])), default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:31,594 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))]), context={}, alts=[{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}], plan_item=findout(?set([goal(resolve(?X.go_to_step(X)))])), default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:31,594 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 14:09:31,594 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')])
2017-10-20 14:09:31,594 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp'), facts={})
2017-10-20 14:09:31,594 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp')
2017-10-20 14:09:31,595 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Screen instance at 0x7fcaa001fdd0>]
2017-10-20 14:09:31,595 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Screen instance at 0x7fcaa001fdd0>], sender=GuiBackend, reason=None)
2017-10-20 14:09:31,595 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posted event
2017-10-20 14:09:31,595 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Do you want to know go to step?], sender=GenerateModule, reason=None))
2017-10-20 14:09:31,596 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Do you want to know go to step?], sender=GenerateModule, reason=None)
2017-10-20 14:09:31,596 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Do you want to know go to step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 14:09:31,596 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:31,596 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Screen instance at 0x7fcaa001fdd0>], sender=GuiBackend, reason=None))
2017-10-20 14:09:31,596 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Screen instance at 0x7fcaa001fdd0>], sender=GuiBackend, reason=None)
2017-10-20 14:09:31,597 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Screen": {"elements": [{"29687f5934314b7ff2716cd9f6c1a5c9.Element": {"name": "move", "title": "", "items": [{"29687f5934314b7ff2716cd9f6c1a5c9.Item": {"attributes": null, "selected": false, "predicted": false, "value": "ask(?X.go_to_step(X))", "title": "Go to step?"}}], "format": "", "voice_browsed": false, "value": "", "template": "menu", "type": "list"}}], "name": "top", "title": "The start view"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 14:09:31,597 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:31,598 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:09:31,658 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": ["Do you want to know go to step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 14:09:31,658 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:09:31,658 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Do you want to know go to step?], sender=TextOutputComponent, reason=None))
2017-10-20 14:09:31,659 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Do you want to know go to step?], sender=TextOutputComponent, reason=None)
2017-10-20 14:09:31,659 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 14:09:31,659 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Do you want to know go to step?], sender=TurnManager, reason=None)
2017-10-20 14:09:31,659 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Do you want to know go to step?], sender=TurnManager, reason=None)
2017-10-20 14:09:31,659 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Do you want to know go to step?], sender=TurnManager, reason=None)
2017-10-20 14:09:31,660 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Do you want to know go to step?], sender=TurnManager, reason=None))
2017-10-20 14:09:31,661 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501371.66
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Do you want to know go to step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: [{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}]
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))])
tis.next_utterance.plan_item: findout(?set([goal(resolve(?X.go_to_step(X)))]))
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:31,661 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:09:31,661 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 14:09:31,661 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 14:09:31,664 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 14:09:31,664 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 14:09:31,665 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 14:09:31,668 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:31,668 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 14:09:31,668 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 14:09:31,668 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 14:09:31,668 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 14:09:31,668 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 14:09:31,668 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 14:09:31,668 - session_2017-10-20T14_09_31_0 - INFO - BEGIN integrate_moves
2017-10-20 14:09:31,669 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 14:09:31,669 - session_2017-10-20T14_09_31_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 14:09:31,669 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 14:09:31,669 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:31,672 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
-- END TIS changes --
2017-10-20 14:09:31,672 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:31,672 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:31,673 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:31,673 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:31,673 - session_2017-10-20T14_09_31_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 14:09:31,673 - session_2017-10-20T14_09_31_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 14:09:31,673 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:31,673 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:31,673 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:31,673 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:accommodate
2017-10-20 14:09:31,674 - session_2017-10-20T14_09_31_0 - INFO - breaking out of accommodate
2017-10-20 14:09:31,674 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:31,674 - session_2017-10-20T14_09_31_0 - INFO - END integrate_moves
2017-10-20 14:09:31,674 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:31,674 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:31,674 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 14:09:31,674 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:31,675 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:31,675 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:31,675 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:31,675 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 14:09:31,679 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:31,679 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:31,679 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Do you want to know go to step?], latest_moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:31,679 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 14:09:31,680 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:31,680 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 14:09:31,680 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:31,681 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Do you want to know go to step?], latest_moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 14:09:31,681 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Do you want to know go to step?], latest_moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:31,681 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Do you want to know go to step?], latest_moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:31,681 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:09:37,355 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 14:09:37,355 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:09:37,355 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-20 14:09:37,356 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 14:09:37,356 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 14:09:37,356 - session_2017-10-20T14_09_31_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 14:09:37,356 - session_2017-10-20T14_09_31_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 14:09:37,362 - session_2017-10-20T14_09_31_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 14:09:37,362 - session_2017-10-20T14_09_31_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-20 14:09:37,362 - session_2017-10-20T14_09_31_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-20 14:09:37,362 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-20 14:09:37,363 - session_2017-10-20T14_09_31_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 14:09:37,363 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 14:09:37,363 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-20 14:09:37,363 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-20 14:09:37,364 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 14:09:37,364 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 14:09:37,364 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 14:09:37,365 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:37,365 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 14:09:37,365 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 14:09:37,365 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 14:09:37,366 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 14:09:37,366 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 14:09:37,368 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501377.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: [{'io_status': 'default', 'alt': PropositionWithSemanticContent('GOAL', GoalWithSemanticContent(RecipehelpOntology, RESOLVE_GOAL, SYS, ?X.go_to_step(X)), u'POS'), 'labels': [], 'predicted': False}]
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])))])
tis.next_utterance.plan_item: findout(?set([goal(resolve(?X.go_to_step(X)))]))
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:37,368 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:09:37,372 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-20 14:09:37,372 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:09:37,376 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-20 14:09:37,376 - session_2017-10-20T14_09_31_0 - INFO - hypotheses reranking had no effect
2017-10-20 14:09:37,377 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 14:09:37,381 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                           -------------------              ----                                     ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                                                                             + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 14:09:37,381 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 14:09:37,386 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 14:09:37,386 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 14:09:37,386 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 14:09:37,389 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:37,389 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 14:09:37,389 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 14:09:37,393 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
- tis.private.tmp.usr.plan: Stack([])
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
+ tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
+ tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
-- END TIS changes --
2017-10-20 14:09:37,393 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 14:09:37,393 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 14:09:37,393 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 14:09:37,394 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 14:09:37,394 - session_2017-10-20T14_09_31_0 - INFO - BEGIN integrate_moves
2017-10-20 14:09:37,394 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-20 14:09:37,394 - session_2017-10-20T14_09_31_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 14:09:37,394 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-20 14:09:37,394 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:37,398 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?set([goal(resolve(?X.go_to_step(X)))])])
?                           ++++++++++++++++++
-- END TIS changes --
2017-10-20 14:09:37,398 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:37,398 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:37,401 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 14:09:37,401 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:37,401 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:37,406 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 14:09:37,406 - session_2017-10-20T14_09_31_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 14:09:37,406 - session_2017-10-20T14_09_31_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 14:09:37,406 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:37,406 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:37,406 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:37,406 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:accommodate
2017-10-20 14:09:37,407 - session_2017-10-20T14_09_31_0 - INFO - breaking out of accommodate
2017-10-20 14:09:37,407 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:37,407 - session_2017-10-20T14_09_31_0 - INFO - END integrate_moves
2017-10-20 14:09:37,407 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:37,407 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:37,407 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 14:09:37,410 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?set([goal(resolve(?X.go_to_step(X)))])])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 14:09:37,410 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:37,410 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:37,411 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:37,411 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:37,411 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 14:09:37,411 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-20 14:09:37,411 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:37,411 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: select
2017-10-20 14:09:37,412 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501377.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:37,413 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 14:09:37,419 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 14:09:37,420 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:37,424 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 14:09:37,425 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:09:37,429 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 14:09:37,429 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_move
2017-10-20 14:09:37,430 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:09:37,434 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 14:09:37,434 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_move
2017-10-20 14:09:37,439 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 14:09:37,439 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:09:37,439 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_move
2017-10-20 14:09:37,439 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 14:09:37,441 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:37,441 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 14:09:37,442 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:set_timeout
2017-10-20 14:09:37,444 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:37,445 - session_2017-10-20T14_09_31_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 14:09:37,445 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 14:09:37,445 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-20 14:09:37,445 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-20 14:09:37,446 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 14:09:37,446 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:37,446 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 14:09:37,446 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:37,446 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 14:09:37,447 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:37,448 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-20 14:09:37,448 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 14:09:37,448 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 14:09:37,448 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:37,449 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:37,450 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:37,450 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 14:09:37,450 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 14:09:37,451 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 14:09:37,451 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 14:09:37,451 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 14:09:37,451 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 14:09:37,451 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 14:09:37,451 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 14:09:37,451 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 14:09:37,452 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 14:09:37,452 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 14:09:37,453 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 14:09:37,454 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 14:09:37,455 - session_2017-10-20T14_09_31_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:37,458 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:37,459 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 14:09:37,459 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 14:09:37,459 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 14:09:37,459 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 14:09:37,460 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 14:09:37,460 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 14:09:37,460 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 14:09:37,460 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 14:09:37,461 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend generated message []
2017-10-20 14:09:37,461 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 14:09:37,461 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posted event
2017-10-20 14:09:37,461 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-20 14:09:37,462 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 14:09:37,462 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 14:09:37,462 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:37,462 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 14:09:37,462 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 14:09:37,464 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 14:09:37,465 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:37,465 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:09:37,470 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 14:09:37,471 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:09:37,471 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 14:09:37,471 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 14:09:37,471 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 14:09:37,471 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 14:09:37,471 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 14:09:37,471 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 14:09:37,472 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-20 14:09:37,473 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501377.47
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:37,473 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:09:37,473 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 14:09:37,473 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 14:09:37,481 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {Move(ask(?set([goal(resolve(?X.go_to_step(X)))])), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 14:09:37,481 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 14:09:37,481 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - INFO - BEGIN integrate_moves
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 14:09:37,484 - session_2017-10-20T14_09_31_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 14:09:37,485 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 14:09:37,485 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:37,490 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 14:09:37,490 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:37,490 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:37,490 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:37,490 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:37,490 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:37,494 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 14:09:37,494 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:37,494 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:37,495 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:37,495 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:37,495 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:37,498 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 14:09:37,498 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:37,498 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:accommodate
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - INFO - breaking out of accommodate
2017-10-20 14:09:37,499 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:37,500 - session_2017-10-20T14_09_31_0 - INFO - END integrate_moves
2017-10-20 14:09:37,500 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:37,500 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:37,500 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 14:09:37,500 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:37,500 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:37,501 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:37,501 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:37,501 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 14:09:37,503 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:37,503 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:37,504 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:37,504 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 14:09:37,504 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:37,504 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 14:09:37,504 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:37,505 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 14:09:37,505 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:37,505 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:37,505 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:09:42,111 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 14:09:42,111 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:09:42,111 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 14:09:42,111 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 14:09:42,112 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 14:09:42,112 - session_2017-10-20T14_09_31_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 14:09:42,112 - session_2017-10-20T14_09_31_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 14:09:42,113 - session_2017-10-20T14_09_31_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-20 14:09:42,113 - session_2017-10-20T14_09_31_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-20 14:09:42,113 - session_2017-10-20T14_09_31_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-20 14:09:42,113 - session_2017-10-20T14_09_31_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99881315231
2017-10-20 14:09:42,117 - session_2017-10-20T14_09_31_0 - DEBUG - robust grammatical interpretations: []
2017-10-20 14:09:42,118 - session_2017-10-20T14_09_31_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-20 14:09:42,118 - session_2017-10-20T14_09_31_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-20 14:09:42,118 - session_2017-10-20T14_09_31_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-20 14:09:42,118 - session_2017-10-20T14_09_31_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-20 14:09:42,118 - session_2017-10-20T14_09_31_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-20 14:09:42,119 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-20 14:09:42,119 - session_2017-10-20T14_09_31_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 14:09:42,119 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 14:09:42,119 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-20 14:09:42,119 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-20 14:09:42,119 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 14:09:42,119 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 14:09:42,119 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 14:09:42,120 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:42,120 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 14:09:42,120 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 14:09:42,120 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 14:09:42,120 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 14:09:42,121 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 14:09:42,122 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501382.12
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:42,122 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:09:42,122 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 14:09:42,126 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 14:09:42,126 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 14:09:42,132 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-20 14:09:42,132 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 14:09:42,133 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 14:09:42,136 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:42,136 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 14:09:42,136 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 14:09:42,136 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 14:09:42,136 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 14:09:42,136 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 14:09:42,137 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 14:09:42,137 - session_2017-10-20T14_09_31_0 - INFO - BEGIN integrate_moves
2017-10-20 14:09:42,137 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 14:09:42,137 - session_2017-10-20T14_09_31_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 14:09:42,137 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 14:09:42,137 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:42,137 - session_2017-10-20T14_09_31_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 14:09:42,138 - session_2017-10-20T14_09_31_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 14:09:42,138 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:42,138 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:42,138 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:42,138 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:accommodate
2017-10-20 14:09:42,139 - session_2017-10-20T14_09_31_0 - INFO - breaking out of accommodate
2017-10-20 14:09:42,139 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:42,139 - session_2017-10-20T14_09_31_0 - INFO - END integrate_moves
2017-10-20 14:09:42,139 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:42,139 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:42,139 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 14:09:42,142 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 14:09:42,142 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:42,142 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:42,143 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:42,143 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:42,143 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 14:09:42,143 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:42,143 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: select
2017-10-20 14:09:42,144 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501382.12
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:42,144 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 14:09:42,148 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                             ++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 14:09:42,148 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:42,152 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: reraiseIssue
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 14:09:42,152 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:09:42,154 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-20 14:09:42,154 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_move
2017-10-20 14:09:42,154 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:09:42,158 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise)])
?                                                                                              ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.step_to_choose(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, raise(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 14:09:42,158 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_move
2017-10-20 14:09:42,161 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
?                                                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, raise(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 14:09:42,161 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:09:42,161 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_move
2017-10-20 14:09:42,161 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 14:09:42,164 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:42,164 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 14:09:42,164 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:set_timeout
2017-10-20 14:09:42,166 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:42,167 - session_2017-10-20T14_09_31_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 14:09:42,167 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 14:09:42,167 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 14:09:42,167 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:42,167 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 14:09:42,168 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:42,169 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-20 14:09:42,169 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 14:09:42,170 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 14:09:42,170 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:42,170 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:42,172 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:42,172 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"step one"), facts={})
2017-10-20 14:09:42,172 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"step one")
2017-10-20 14:09:42,172 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-20 14:09:42,172 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-20 14:09:42,173 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={})
2017-10-20 14:09:42,173 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-20 14:09:42,173 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 14:09:42,173 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 14:09:42,173 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"step one")
2017-10-20 14:09:42,173 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"step one") generated as u'I heard you say step one.'
2017-10-20 14:09:42,173 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-20 14:09:42,174 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-20 14:09:42,174 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise)
2017-10-20 14:09:42,174 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise) generated as u'So,'
2017-10-20 14:09:42,174 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 14:09:42,175 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 14:09:42,175 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step one., I don't understand., So,, Which step?], sender=GenerateModule, reason=None)
2017-10-20 14:09:42,176 - session_2017-10-20T14_09_31_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:42,178 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"step one"), facts={})
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"step one")
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={})
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 14:09:42,179 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 14:09:42,180 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend generated message []
2017-10-20 14:09:42,180 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 14:09:42,180 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posted event
2017-10-20 14:09:42,180 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step one., I don't understand., So,, Which step?], sender=GenerateModule, reason=None))
2017-10-20 14:09:42,180 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step one., I don't understand., So,, Which step?], sender=GenerateModule, reason=None)
2017-10-20 14:09:42,180 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say step one.", "I don't understand.", "So,", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 14:09:42,181 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:42,181 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 14:09:42,182 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 14:09:42,182 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 14:09:42,183 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:42,183 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:09:42,203 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say step one.", "I don't understand.", "So,", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 14:09:42,204 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:09:42,204 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say step one., I don't understand., So,, Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 14:09:42,204 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say step one., I don't understand., So,, Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 14:09:42,204 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 14:09:42,204 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say step one., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-20 14:09:42,204 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say step one., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-20 14:09:42,204 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say step one., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-20 14:09:42,206 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say step one., I don't understand., So,, Which step?], sender=TurnManager, reason=None))
2017-10-20 14:09:42,207 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501382.21
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say step one., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:09:42,207 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:09:42,207 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 14:09:42,207 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 14:09:42,212 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
- tis.sys_turns: 0
?                ^
+ tis.sys_turns: 1
?                ^
-- END TIS changes --
2017-10-20 14:09:42,212 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 14:09:42,212 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - INFO - BEGIN integrate_moves
2017-10-20 14:09:42,215 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 14:09:42,216 - session_2017-10-20T14_09_31_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 14:09:42,216 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 14:09:42,216 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:42,219 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                                         ^^^ ^^^^^^^^^^^^^^                                       ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                                         ^^^ ^^^
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 14:09:42,219 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:42,219 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:42,220 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:42,220 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:42,220 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:42,225 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                                  ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 14:09:42,225 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:42,225 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:42,225 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:42,225 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:42,225 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:42,229 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
?                                                                                                                                ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 14:09:42,230 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:42,230 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:42,230 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:42,230 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:42,230 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:09:42,233 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 14:09:42,233 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:42,234 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:accommodate
2017-10-20 14:09:42,235 - session_2017-10-20T14_09_31_0 - INFO - breaking out of accommodate
2017-10-20 14:09:42,235 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:09:42,235 - session_2017-10-20T14_09_31_0 - INFO - END integrate_moves
2017-10-20 14:09:42,235 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:42,235 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:42,235 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 14:09:42,235 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:09:42,236 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:09:42,236 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:09:42,236 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:09:42,236 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 14:09:42,238 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:09:42,239 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:42,239 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say step one., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:42,239 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 14:09:42,239 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:09:42,239 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 14:09:42,240 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:09:42,240 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say step one., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 14:09:42,240 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say step one., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:42,241 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say step one., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:09:42,241 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:10:58,259 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "1"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 14:10:58,260 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:10:58,260 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: 1}], sender=TextInputComponent, reason=None))
2017-10-20 14:10:58,260 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: 1}], sender=TextInputComponent, reason=None)
2017-10-20 14:10:58,260 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: 1}], sender=TextInputComponent, reason=None)
2017-10-20 14:10:58,261 - session_2017-10-20T14_09_31_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "1"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 14:10:58,261 - session_2017-10-20T14_09_31_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 14:10:58,262 - session_2017-10-20T14_09_31_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-20 14:10:58,262 - session_2017-10-20T14_09_31_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-20 14:10:58,262 - session_2017-10-20T14_09_31_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-20 14:10:58,262 - session_2017-10-20T14_09_31_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99840784073
2017-10-20 14:10:58,264 - session_2017-10-20T14_09_31_0 - DEBUG - robust grammatical interpretations: []
2017-10-20 14:10:58,265 - session_2017-10-20T14_09_31_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-20 14:10:58,265 - session_2017-10-20T14_09_31_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-20 14:10:58,265 - session_2017-10-20T14_09_31_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-20 14:10:58,265 - session_2017-10-20T14_09_31_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-20 14:10:58,265 - session_2017-10-20T14_09_31_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-20 14:10:58,266 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-20 14:10:58,266 - session_2017-10-20T14_09_31_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 14:10:58,266 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: 1}], sender=TextInputComponent, reason=None)
2017-10-20 14:10:58,266 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-20 14:10:58,266 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-20 14:10:58,266 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 14:10:58,266 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 14:10:58,266 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 14:10:58,267 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:10:58,267 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 14:10:58,268 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 14:10:58,268 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 14:10:58,268 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-20 14:10:58,268 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 14:10:58,270 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501458.27
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step one"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: 1
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:10:58,270 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:10:58,270 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 14:10:58,272 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 14:10:58,272 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 14:10:58,277 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 14:10:58,277 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 14:10:58,277 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 14:10:58,280 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:10:58,280 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 14:10:58,280 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 14:10:58,280 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 14:10:58,280 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 14:10:58,280 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 14:10:58,280 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 14:10:58,280 - session_2017-10-20T14_09_31_0 - INFO - BEGIN integrate_moves
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:10:58,281 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:accommodate
2017-10-20 14:10:58,282 - session_2017-10-20T14_09_31_0 - INFO - breaking out of accommodate
2017-10-20 14:10:58,282 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:10:58,282 - session_2017-10-20T14_09_31_0 - INFO - END integrate_moves
2017-10-20 14:10:58,282 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:10:58,282 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:10:58,283 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 14:10:58,285 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 14:10:58,285 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:10:58,285 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:10:58,286 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:10:58,286 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:10:58,286 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 14:10:58,286 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:10:58,286 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: select
2017-10-20 14:10:58,287 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501458.27
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: 1
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:10:58,287 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 14:10:58,290 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:10:58,290 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_icm
2017-10-20 14:10:58,293 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-20 14:10:58,293 - session_2017-10-20T14_09_31_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)])
2017-10-20 14:10:58,293 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 14:10:58,293 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 14:10:58,294 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:10:58,294 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 14:10:58,294 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:10:58,295 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-20 14:10:58,295 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-20 14:10:58,295 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 14:10:58,296 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:10:58,296 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:10:58,297 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:10:58,297 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"1"), facts={})
2017-10-20 14:10:58,298 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"1")
2017-10-20 14:10:58,298 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-20 14:10:58,298 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-20 14:10:58,299 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"1")
2017-10-20 14:10:58,299 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"1") generated as u'I heard you say 1.'
2017-10-20 14:10:58,300 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-20 14:10:58,301 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-20 14:10:58,301 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say 1., I don't understand.], sender=GenerateModule, reason=None)
2017-10-20 14:10:58,303 - session_2017-10-20T14_09_31_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:10:58,305 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 14:10:58,305 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 14:10:58,305 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)])
2017-10-20 14:10:58,305 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"1"), facts={})
2017-10-20 14:10:58,305 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"1")
2017-10-20 14:10:58,305 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-20 14:10:58,305 - session_2017-10-20T14_09_31_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-20 14:10:58,306 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend generated message []
2017-10-20 14:10:58,306 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 14:10:58,306 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posted event
2017-10-20 14:10:58,306 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say 1., I don't understand.], sender=GenerateModule, reason=None))
2017-10-20 14:10:58,306 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say 1., I don't understand.], sender=GenerateModule, reason=None)
2017-10-20 14:10:58,306 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say 1.", "I don't understand."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 14:10:58,307 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:10:58,307 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 14:10:58,307 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 14:10:58,307 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 14:10:58,308 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:10:58,308 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:10:58,314 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say 1.", "I don't understand."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 14:10:58,314 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:10:58,315 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say 1., I don't understand.], sender=TextOutputComponent, reason=None))
2017-10-20 14:10:58,315 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say 1., I don't understand.], sender=TextOutputComponent, reason=None)
2017-10-20 14:10:58,315 - session_2017-10-20T14_09_31_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 14:10:58,315 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say 1., I don't understand.], sender=TurnManager, reason=None)
2017-10-20 14:10:58,315 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say 1., I don't understand.], sender=TurnManager, reason=None)
2017-10-20 14:10:58,315 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say 1., I don't understand.], sender=TurnManager, reason=None)
2017-10-20 14:10:58,315 - session_2017-10-20T14_09_31_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say 1., I don't understand.], sender=TurnManager, reason=None))
2017-10-20 14:10:58,317 - session_2017-10-20T14_09_31_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fcaa0d59e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fcaa005ecd0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508501458.32
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say 1., I don't understand.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"1"), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?set([goal(resolve(?X.go_to_step(X)))])), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?set([goal(resolve(?X.go_to_step(X)))]))])
tis.private.tmp.usr.qud: stackset([?set([goal(resolve(?X.go_to_step(X)))])])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: 1
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 14:10:58,317 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:filterReadings
2017-10-20 14:10:58,317 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 14:10:58,317 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 14:10:58,321 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:per*pos:"step one", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 14:10:58,322 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 14:10:58,322 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 14:10:58,324 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:10:58,324 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 14:10:58,324 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 14:10:58,324 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 14:10:58,324 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 14:10:58,324 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 14:10:58,324 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 14:10:58,324 - session_2017-10-20T14_09_31_0 - INFO - BEGIN integrate_moves
2017-10-20 14:10:58,325 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-20 14:10:58,325 - session_2017-10-20T14_09_31_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 14:10:58,325 - session_2017-10-20T14_09_31_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-20 14:10:58,325 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:10:58,328 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
?                             --------------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 14:10:58,328 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:10:58,328 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:10:58,329 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:10:58,329 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:10:58,329 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:integrate
2017-10-20 14:10:58,332 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                           ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 14:10:58,332 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 14:10:58,333 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:10:58,333 - session_2017-10-20T14_09_31_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 14:10:58,333 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:10:58,333 - session_2017-10-20T14_09_31_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 14:10:58,333 - session_2017-10-20T14_09_31_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 14:10:58,333 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:10:58,333 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_action
2017-10-20 14:10:58,333 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:10:58,334 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:accommodate
2017-10-20 14:10:58,334 - session_2017-10-20T14_09_31_0 - INFO - breaking out of accommodate
2017-10-20 14:10:58,334 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:select_reject
2017-10-20 14:10:58,334 - session_2017-10-20T14_09_31_0 - INFO - END integrate_moves
2017-10-20 14:10:58,334 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:10:58,334 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:10:58,334 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 14:10:58,334 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 14:10:58,335 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:exec_plan
2017-10-20 14:10:58,335 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:load_plan
2017-10-20 14:10:58,335 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 14:10:58,335 - session_2017-10-20T14_09_31_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 14:10:58,338 - session_2017-10-20T14_09_31_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 14:10:58,338 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:10:58,338 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say 1., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:10:58,338 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 14:10:58,338 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 14:10:58,338 - session_2017-10-20T14_09_31_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 14:10:58,339 - session_2017-10-20T14_09_31_0 - DEBUG - Sent.
2017-10-20 14:10:58,339 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say 1., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None))
2017-10-20 14:10:58,339 - session_2017-10-20T14_09_31_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say 1., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:10:58,340 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say 1., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"1", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-20 14:10:58,340 - session_2017-10-20T14_09_31_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 14:14:00,804 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 14:14:00,804 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-20 14:14:00,805 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-20 14:14:00,805 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 14:14:00,806 - session_2017-10-20T14_09_31_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 14:14:00,806 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 14:14:00,806 - session_2017-10-20T14_09_31_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 14:14:00,806 - session_2017-10-20T14_09_31_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 14:14:00,806 - session_2017-10-20T14_09_31_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-20 14:14:00,807 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 14:14:00,808 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-20 14:14:00,809 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 14:14:00,809 - session_2017-10-20T14_09_31_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-20 14:14:00,809 - session_2017-10-20T14_09_31_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
