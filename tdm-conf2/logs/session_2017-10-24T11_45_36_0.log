2017-10-24 11:45:36,276 - session_2017-10-24T11_45_36_0 - DEBUG - Backend()
2017-10-24 11:45:36,276 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.initialize()
2017-10-24 11:45:36,306 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9449f39f10>>, False])
2017-10-24 11:45:36,306 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9449f39f10>>, 'eng'])
2017-10-24 11:45:36,306 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 11:45:36,306 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 11:45:36,306 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 11:45:36,306 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9449f39f10>>, True, 'disabled'])
2017-10-24 11:45:36,306 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9449f39f10>>])
2017-10-24 11:45:36,307 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f9449f39f10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9449f39f10>>, 'eng', False, True])
2017-10-24 11:45:36,307 - session_2017-10-24T11_45_36_0 - DEBUG - Backend initialized
2017-10-24 11:45:36,307 - session_2017-10-24T11_45_36_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 11:45:36,307 - session_2017-10-24T11_45_36_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 11:45:36,307 - session_2017-10-24T11_45_36_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 11:45:36,307 - session_2017-10-24T11_45_36_0 - DEBUG - Backend uses language 'eng'
2017-10-24 11:45:36,307 - session_2017-10-24T11_45_36_0 - DEBUG - running module InterpretModule
2017-10-24 11:45:36,307 - session_2017-10-24T11_45_36_0 - DEBUG - running module DmeModule
2017-10-24 11:45:36,309 - session_2017-10-24T11_45_36_0 - DEBUG - running module DeviceManager
2017-10-24 11:45:36,309 - session_2017-10-24T11_45_36_0 - DEBUG - running module GenerateModule
2017-10-24 11:45:36,309 - session_2017-10-24T11_45_36_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 11:45:36,309 - session_2017-10-24T11_45_36_0 - DEBUG - running module GuiBackend
2017-10-24 11:45:36,309 - session_2017-10-24T11_45_36_0 - DEBUG - running module CogloadModule
2017-10-24 11:45:36,310 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:36,310 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:36,311 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 11:45:36,311 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 11:45:36,311 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 11:45:36,312 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:36,312 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:36,343 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 11:45:36,343 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:36,344 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 11:45:36,345 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,345 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 11:45:36,345 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 11:45:36,345 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 11:45:36,346 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:36,346 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:36,349 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 11:45:36,349 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:36,349 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:45:36,349 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,350 - session_2017-10-24T11_45_36_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,350 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,350 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:45:36,350 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:45:36,351 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838336.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:36,351 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:36,351 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:45:36,352 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:45:36,354 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:36,354 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:45:36,354 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - INFO - BEGIN integrate_moves
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:45:36,357 - session_2017-10-24T11_45_36_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:45:36,358 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 11:45:36,358 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - INFO - breaking out of accommodate
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - INFO - END integrate_moves
2017-10-24 11:45:36,359 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:36,360 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:36,362 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:45:36,362 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:36,364 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:45:36,364 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:36,364 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:36,365 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:36,365 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:45:36,365 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:36,365 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:36,365 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:36,365 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:36,365 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:45:36,365 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:36,366 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: select
2017-10-24 11:45:36,367 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838336.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:36,367 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:45:36,370 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:45:36,370 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:36,373 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:45:36,373 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:36,375 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:45:36,375 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:36,378 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:45:36,378 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:36,378 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:36,378 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:45:36,380 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:36,380 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:45:36,380 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:45:36,382 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 11:45:36,382 - session_2017-10-24T11_45_36_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:45:36,383 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:45:36,383 - session_2017-10-24T11_45_36_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,383 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,383 - session_2017-10-24T11_45_36_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,383 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,384 - session_2017-10-24T11_45_36_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 11:45:36,384 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 11:45:36,384 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:45:36,384 - session_2017-10-24T11_45_36_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:45:36,384 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 11:45:36,384 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 11:45:36,385 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:36,385 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:45:36,385 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:36,385 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:45:36,386 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:36,387 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 11:45:36,387 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 11:45:36,387 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:45:36,387 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:36,388 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:36,388 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:36,389 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:45:36,389 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:45:36,389 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:45:36,389 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:36,389 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 11:45:36,390 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 11:45:36,390 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:36,390 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 11:45:36,390 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:45:36,391 - session_2017-10-24T11_45_36_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:36,393 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:36,393 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:45:36,393 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:45:36,393 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:45:36,393 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:45:36,393 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:45:36,393 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:36,394 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend generated message []
2017-10-24 11:45:36,394 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:45:36,394 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posted event
2017-10-24 11:45:36,394 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 11:45:36,394 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:45:36,394 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:45:36,395 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:36,395 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 11:45:36,396 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:45:36,396 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:45:36,396 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:36,396 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:36,435 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:45:36,435 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:36,435 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 11:45:36,436 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 11:45:36,436 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:45:36,436 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:45:36,436 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:45:36,436 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:45:36,436 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 11:45:36,437 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838336.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:36,437 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:36,438 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:45:36,438 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:45:36,441 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 11:45:36,441 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:45:36,441 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:45:36,443 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:36,443 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:45:36,443 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:45:36,443 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:45:36,443 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:45:36,443 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:45:36,443 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:45:36,443 - session_2017-10-24T11_45_36_0 - INFO - BEGIN integrate_moves
2017-10-24 11:45:36,444 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:45:36,444 - session_2017-10-24T11_45_36_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:45:36,444 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:45:36,444 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:36,448 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:45:36,448 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:36,448 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:36,449 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:36,449 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:36,449 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:36,451 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 11:45:36,451 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:45:36,452 - session_2017-10-24T11_45_36_0 - INFO - breaking out of accommodate
2017-10-24 11:45:36,453 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:36,453 - session_2017-10-24T11_45_36_0 - INFO - END integrate_moves
2017-10-24 11:45:36,453 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:36,453 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:36,453 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:45:36,453 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:36,453 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:36,454 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:36,454 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:36,454 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:45:36,456 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:36,456 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:36,456 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:36,456 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:45:36,457 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:36,457 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:45:36,457 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:36,457 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:45:36,459 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:36,459 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:36,459 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:40,658 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:45:40,658 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:40,658 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 11:45:40,658 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:45:40,659 - session_2017-10-24T11_45_36_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:45:40,659 - session_2017-10-24T11_45_36_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:45:40,659 - session_2017-10-24T11_45_36_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:45:40,664 - session_2017-10-24T11_45_36_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:45:40,664 - session_2017-10-24T11_45_36_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 11:45:40,665 - session_2017-10-24T11_45_36_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 11:45:40,665 - session_2017-10-24T11_45_36_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:45:40,665 - session_2017-10-24T11_45_36_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:45:40,665 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 11:45:40,666 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:45:40,666 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:45:40,666 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:45:40,666 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:45:40,666 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 11:45:40,666 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:40,667 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 11:45:40,667 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:45:40,667 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:45:40,668 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:45:40,669 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:45:40,670 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838340.67
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:40,670 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:40,673 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 11:45:40,673 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:40,677 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 11:45:40,677 - session_2017-10-24T11_45_36_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:45:40,677 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:45:40,681 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 11:45:40,681 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:45:40,686 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 11:45:40,686 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:45:40,686 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:45:40,688 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:40,688 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:45:40,688 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:45:40,693 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 11:45:40,694 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:45:40,694 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:45:40,694 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:45:40,695 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:45:40,695 - session_2017-10-24T11_45_36_0 - INFO - BEGIN integrate_moves
2017-10-24 11:45:40,695 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 11:45:40,695 - session_2017-10-24T11_45_36_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:45:40,695 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 11:45:40,695 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:40,699 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 11:45:40,699 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:40,699 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:40,703 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 11:45:40,703 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:40,704 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:40,707 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
-- END TIS changes --
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - INFO - breaking out of accommodate
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - INFO - END integrate_moves
2017-10-24 11:45:40,708 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:40,709 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:40,709 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:45:40,712 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:45:40,712 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:40,712 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:40,712 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:40,713 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:40,713 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:45:40,713 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 11:45:40,713 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:40,713 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: select
2017-10-24 11:45:40,714 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838340.67
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:40,714 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:45:40,719 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
-- END TIS changes --
2017-10-24 11:45:40,720 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:40,723 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:45:40,723 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:40,726 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 11:45:40,726 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:40,726 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:40,729 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 11:45:40,729 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:40,732 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:45:40,732 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:40,732 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:40,733 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:45:40,735 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:40,735 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:45:40,735 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:45:40,738 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:40,739 - session_2017-10-24T11_45_36_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 11:45:40,739 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:45:40,739 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 11:45:40,739 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 11:45:40,739 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:45:40,740 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:40,741 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:45:40,741 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:40,741 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:45:40,741 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:40,742 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:45:40,742 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:45:40,742 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:45:40,743 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:40,743 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:40,745 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:40,745 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 11:45:40,745 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:45:40,745 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:45:40,745 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:45:40,745 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:45:40,745 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:40,745 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 11:45:40,746 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 11:45:40,746 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 11:45:40,746 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 11:45:40,746 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:40,747 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 11:45:40,747 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 11:45:40,748 - session_2017-10-24T11_45_36_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:40,750 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:40,751 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:45:40,751 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 11:45:40,751 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 11:45:40,751 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:45:40,751 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 11:45:40,751 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 11:45:40,751 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:45:40,752 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:40,752 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend generated message []
2017-10-24 11:45:40,752 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:45:40,752 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posted event
2017-10-24 11:45:40,752 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 11:45:40,752 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 11:45:40,753 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:45:40,753 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:40,753 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 11:45:40,753 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:45:40,753 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:45:40,754 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:40,754 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:40,775 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:45:40,775 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:40,776 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 11:45:40,776 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 11:45:40,776 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:45:40,776 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:45:40,776 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:45:40,776 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 11:45:40,777 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 11:45:40,778 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838340.78
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:40,778 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:40,778 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:45:40,778 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:45:40,784 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:45:40,784 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:45:40,785 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:45:40,787 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:40,787 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:45:40,787 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:45:40,787 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:45:40,787 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:45:40,787 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:45:40,787 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:45:40,788 - session_2017-10-24T11_45_36_0 - INFO - BEGIN integrate_moves
2017-10-24 11:45:40,788 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:45:40,788 - session_2017-10-24T11_45_36_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:45:40,788 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:45:40,788 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:40,793 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:45:40,793 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:40,793 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:40,794 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:40,794 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:40,794 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:40,798 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:45:40,798 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:40,798 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:40,798 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:40,798 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:40,798 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:40,802 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 11:45:40,802 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:40,802 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - INFO - breaking out of accommodate
2017-10-24 11:45:40,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:40,804 - session_2017-10-24T11_45_36_0 - INFO - END integrate_moves
2017-10-24 11:45:40,804 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:40,804 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:40,804 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:45:40,804 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:40,805 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:40,805 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:40,805 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:40,805 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:45:40,808 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:40,808 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:40,808 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:40,808 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:45:40,808 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:40,808 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:45:40,809 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:40,809 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:45:40,809 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:40,810 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:40,810 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:42,701 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "back"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 11:45:42,702 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:42,702 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: back}], sender=TextInputComponent, reason=None))
2017-10-24 11:45:42,702 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: back}], sender=TextInputComponent, reason=None)
2017-10-24 11:45:42,702 - session_2017-10-24T11_45_36_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: back}], sender=TextInputComponent, reason=None)
2017-10-24 11:45:42,702 - session_2017-10-24T11_45_36_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "back"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 11:45:42,702 - session_2017-10-24T11_45_36_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 11:45:42,704 - session_2017-10-24T11_45_36_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 11:45:42,704 - session_2017-10-24T11_45_36_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])} for DDD 'recipehelp'
2017-10-24 11:45:42,704 - session_2017-10-24T11_45_36_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}
2017-10-24 11:45:42,704 - session_2017-10-24T11_45_36_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:45:42,705 - session_2017-10-24T11_45_36_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "back"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "back", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "up"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "back", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 11:45:42,705 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: back}], sender=TextInputComponent, reason=None)
2017-10-24 11:45:42,705 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=InterpretModule, reason=None))
2017-10-24 11:45:42,705 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=InterpretModule, reason=None)
2017-10-24 11:45:42,705 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:45:42,705 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 11:45:42,705 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 11:45:42,706 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,706 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 11:45:42,706 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,706 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,707 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,707 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:45:42,709 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838342.71
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:42,709 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:42,713 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #]), OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}
-- END TIS changes --
2017-10-24 11:45:42,713 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:42,713 - session_2017-10-24T11_45_36_0 - INFO - hypotheses reranking had no effect
2017-10-24 11:45:42,714 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:45:42,716 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')])
-- END TIS changes --
2017-10-24 11:45:42,716 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:45:42,721 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 11:45:42,721 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:45:42,721 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:45:42,724 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:42,724 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:45:42,724 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:45:42,730 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 11:45:42,730 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:45:42,730 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:45:42,733 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: irrelevantFollowup
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 11:45:42,733 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:45:42,733 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:45:42,734 - session_2017-10-24T11_45_36_0 - INFO - BEGIN integrate_moves
2017-10-24 11:45:42,734 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])
2017-10-24 11:45:42,734 - session_2017-10-24T11_45_36_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:45:42,734 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])
2017-10-24 11:45:42,734 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:42,739 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([do(up), findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
?                          ++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([perform(up), resolve(?X.go_to_step(X)), perform(top)])
?                             +++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')}
-- END TIS changes --
2017-10-24 11:45:42,739 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:42,739 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:42,739 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:42,740 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,743 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: goUp
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(up), findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([])
- tis.shared.goals: stackset([perform(up), resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
+ tis.shared.previous_goal: resolve(?X.go_to_step(X))
-- END TIS changes --
2017-10-24 11:45:42,743 - session_2017-10-24T11_45_36_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:45:42,743 - session_2017-10-24T11_45_36_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:45:42,743 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:42,744 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:42,744 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:42,744 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:45:42,744 - session_2017-10-24T11_45_36_0 - INFO - breaking out of accommodate
2017-10-24 11:45:42,745 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:42,745 - session_2017-10-24T11_45_36_0 - INFO - END integrate_moves
2017-10-24 11:45:42,745 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:42,745 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,745 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:45:42,745 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:42,746 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:42,746 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,746 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:42,746 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:45:42,746 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, back, sender=DmeModule, reason=None)
2017-10-24 11:45:42,746 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:42,746 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: select
2017-10-24 11:45:42,748 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838342.71
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')])
tis.latest_moves_amb: {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: resolve(?X.go_to_step(X))
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:42,748 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:45:42,751 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 11:45:42,752 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:42,752 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:42,754 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:45:42,754 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:42,755 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:42,755 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:42,755 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:45:42,757 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:42,757 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:45:42,757 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:45:42,761 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 11:45:42,761 - session_2017-10-24T11_45_36_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-24 11:45:42,761 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:45:42,761 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, back, sender=DmeModule, reason=None))
2017-10-24 11:45:42,761 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, back, sender=DmeModule, reason=None)
2017-10-24 11:45:42,761 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": "back", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 11:45:42,762 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,762 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:45:42,762 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:42,762 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:45:42,763 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,763 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None)))
2017-10-24 11:45:42,764 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}, sender=TurnManager, reason=None))
2017-10-24 11:45:42,764 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:45:42,764 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,764 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,765 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,765 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 11:45:42,765 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:45:42,765 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 11:45:42,765 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 11:45:42,765 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-24 11:45:42,766 - session_2017-10-24T11_45_36_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,767 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,768 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:45:42,768 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-24 11:45:42,768 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 11:45:42,768 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 11:45:42,768 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend generated message []
2017-10-24 11:45:42,768 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:45:42,768 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posted event
2017-10-24 11:45:42,769 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None))
2017-10-24 11:45:42,769 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-24 11:45:42,769 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [""], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:45:42,769 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,769 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 11:45:42,770 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:45:42,770 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:45:42,770 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,770 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:42,780 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend received event {"content": [""], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:45:42,781 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:42,781 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None))
2017-10-24 11:45:42,781 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None)
2017-10-24 11:45:42,781 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:45:42,781 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-24 11:45:42,781 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-24 11:45:42,781 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-24 11:45:42,782 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-24 11:45:42,783 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838342.78
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: resolve(?X.go_to_step(X))
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:42,783 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:42,783 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:45:42,783 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:45:42,789 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 11:45:42,789 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:45:42,789 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:45:42,791 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:42,792 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:45:42,792 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:45:42,792 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:45:42,792 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:45:42,792 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:45:42,792 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:45:42,792 - session_2017-10-24T11_45_36_0 - INFO - BEGIN integrate_moves
2017-10-24 11:45:42,792 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-24 11:45:42,793 - session_2017-10-24T11_45_36_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:45:42,793 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-24 11:45:42,793 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:42,795 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:45:42,795 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:42,795 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - INFO - breaking out of accommodate
2017-10-24 11:45:42,796 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:42,797 - session_2017-10-24T11_45_36_0 - INFO - END integrate_moves
2017-10-24 11:45:42,797 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:42,799 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:45:42,799 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,799 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:42,802 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:45:42,802 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,802 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:42,802 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,802 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:45:42,802 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:42,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:42,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:42,803 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:45:42,806 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 11:45:42,806 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:42,806 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: select
2017-10-24 11:45:42,807 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838342.78
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')}
tis.shared.previous_goal: resolve(?X.go_to_step(X))
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:42,807 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 11:45:42,810 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 11:45:42,810 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:42,813 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 11:45:42,813 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:42,816 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 11:45:42,816 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:42,819 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 11:45:42,819 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_icm
2017-10-24 11:45:42,819 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_move
2017-10-24 11:45:42,819 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 11:45:42,821 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:42,821 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 11:45:42,821 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:set_timeout
2017-10-24 11:45:42,824 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 11:45:42,825 - session_2017-10-24T11_45_36_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:45:42,825 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-24 11:45:42,825 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:45:42,825 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:42,825 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:45:42,826 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,826 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)))
2017-10-24 11:45:42,826 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-24 11:45:42,826 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 11:45:42,827 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,827 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,828 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,828 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 11:45:42,829 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 11:45:42,829 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:45:42,829 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:42,829 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 11:45:42,829 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 11:45:42,829 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:42,830 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 11:45:42,830 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:45:42,831 - session_2017-10-24T11_45_36_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,833 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: resolve(?X.go_to_step(X)), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 11:45:42,833 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 11:45:42,833 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 11:45:42,833 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 11:45:42,833 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 11:45:42,833 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 11:45:42,833 - session_2017-10-24T11_45_36_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 11:45:42,834 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend generated message []
2017-10-24 11:45:42,834 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:45:42,834 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posted event
2017-10-24 11:45:42,834 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 11:45:42,834 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 11:45:42,834 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 11:45:42,835 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,835 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 11:45:42,835 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 11:45:42,836 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 11:45:42,836 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,836 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 11:45:42,875 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 11:45:42,875 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 11:45:42,875 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 11:45:42,875 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 11:45:42,875 - session_2017-10-24T11_45_36_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 11:45:42,875 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:45:42,875 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:45:42,876 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 11:45:42,876 - session_2017-10-24T11_45_36_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 11:45:42,877 - session_2017-10-24T11_45_36_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9449703090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9449f399d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508838342.88
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose), jumpto(resolve(?X.say_step(X)))])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')}
tis.shared.previous_goal: resolve(?X.go_to_step(X))
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 11:45:42,877 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:filterReadings
2017-10-24 11:45:42,877 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 11:45:42,878 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 11:45:42,883 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {Move(request(up), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'back')}
-- END TIS changes --
2017-10-24 11:45:42,883 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 11:45:42,883 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 11:45:42,885 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 11:45:42,885 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - INFO - BEGIN integrate_moves
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 11:45:42,886 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:42,891 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 11:45:42,891 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:42,891 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:42,891 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:42,891 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,892 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:integrate
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:42,895 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_action
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:accommodate
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - INFO - breaking out of accommodate
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:select_reject
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - INFO - END integrate_moves
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 11:45:42,896 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 11:45:42,897 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:exec_plan
2017-10-24 11:45:42,897 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:load_plan
2017-10-24 11:45:42,897 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 11:45:42,897 - session_2017-10-24T11_45_36_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 11:45:42,900 - session_2017-10-24T11_45_36_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 11:45:42,900 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:42,900 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:42,900 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 11:45:42,900 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 11:45:42,901 - session_2017-10-24T11_45_36_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 11:45:42,901 - session_2017-10-24T11_45_36_0 - DEBUG - Sent.
2017-10-24 11:45:42,901 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 11:45:42,902 - session_2017-10-24T11_45_36_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:42,902 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 11:45:42,902 - session_2017-10-24T11_45_36_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:10:36,468 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:10:36,469 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 12:10:36,469 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:10:36,470 - session_2017-10-24T11_45_36_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:10:36,470 - session_2017-10-24T11_45_36_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 12:10:36,470 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:10:36,471 - session_2017-10-24T11_45_36_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 12:10:36,471 - session_2017-10-24T11_45_36_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:10:36,471 - session_2017-10-24T11_45_36_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 12:10:36,471 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:10:36,471 - session_2017-10-24T11_45_36_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 12:10:36,471 - session_2017-10-24T11_45_36_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:10:36,472 - session_2017-10-24T11_45_36_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:10:36,472 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:10:36,472 - session_2017-10-24T11_45_36_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 12:10:36,472 - session_2017-10-24T11_45_36_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:10:36,472 - session_2017-10-24T11_45_36_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 12:10:36,472 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 12:10:36,472 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 12:10:36,472 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 12:10:36,473 - session_2017-10-24T11_45_36_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 12:10:36,474 - session_2017-10-24T11_45_36_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
