2017-10-20 17:56:42,381 - session_2017-10-20T17_56_42_0 - DEBUG - Backend()
2017-10-20 17:56:42,382 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.initialize()
2017-10-20 17:56:42,414 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f51eafd5f10>>, False])
2017-10-20 17:56:42,414 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f51eafd5f10>>, 'eng'])
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f51eafd5f10>>, True, 'disabled'])
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f51eafd5f10>>])
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f51eafd5f10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f51eafd5f10>>, 'eng', False, True])
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend initialized
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 17:56:42,415 - session_2017-10-20T17_56_42_0 - DEBUG - Backend uses language 'eng'
2017-10-20 17:56:42,416 - session_2017-10-20T17_56_42_0 - DEBUG - running module InterpretModule
2017-10-20 17:56:42,416 - session_2017-10-20T17_56_42_0 - DEBUG - running module DmeModule
2017-10-20 17:56:42,417 - session_2017-10-20T17_56_42_0 - DEBUG - running module DeviceManager
2017-10-20 17:56:42,417 - session_2017-10-20T17_56_42_0 - DEBUG - running module GenerateModule
2017-10-20 17:56:42,417 - session_2017-10-20T17_56_42_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 17:56:42,418 - session_2017-10-20T17_56_42_0 - DEBUG - running module GuiBackend
2017-10-20 17:56:42,418 - session_2017-10-20T17_56_42_0 - DEBUG - running module CogloadModule
2017-10-20 17:56:42,418 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:56:42,419 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:56:42,419 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 17:56:42,419 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 17:56:42,419 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 17:56:42,420 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:42,420 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:56:42,452 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 17:56:42,453 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:56:42,453 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 17:56:42,454 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,454 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 17:56:42,455 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 17:56:42,455 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 17:56:42,455 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:42,456 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:56:42,461 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 17:56:42,461 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:56:42,461 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:56:42,461 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,461 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,461 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,462 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:56:42,462 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:56:42,463 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515002.46
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:56:42,463 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:56:42,463 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:56:42,463 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:56:42,466 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:42,466 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:56:42,466 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:56:42,468 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:42,468 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:56:42,468 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:56:42,468 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:56:42,469 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:42,470 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:42,473 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:56:42,473 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:42,475 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:56:42,475 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:42,475 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:42,476 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:42,476 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:56:42,476 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:42,476 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:42,477 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:42,477 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:56:42,477 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:56:42,477 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:56:42,477 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:56:42,478 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515002.46
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:56:42,478 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:56:42,482 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:56:42,482 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:56:42,484 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:56:42,484 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:56:42,487 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:56:42,487 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:56:42,489 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:56:42,489 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:56:42,490 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:56:42,490 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:56:42,492 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:42,492 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:56:42,492 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:56:42,494 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 17:56:42,494 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:56:42,495 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:56:42,495 - session_2017-10-20T17_56_42_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,495 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,495 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,495 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,495 - session_2017-10-20T17_56_42_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:56:42,495 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 17:56:42,495 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:56:42,496 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:56:42,496 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:56:42,496 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 17:56:42,496 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:42,496 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:56:42,496 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:56:42,497 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:56:42,497 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:42,498 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 17:56:42,498 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:56:42,498 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:56:42,499 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:42,499 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:42,502 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:42,502 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:56:42,502 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:56:42,502 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:56:42,502 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:56:42,502 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:56:42,503 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:56:42,503 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:56:42,504 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:56:42,504 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:56:42,505 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:42,506 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:42,507 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:56:42,507 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:56:42,507 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:56:42,507 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:56:42,507 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:56:42,507 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:56:42,508 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:56:42,508 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:56:42,508 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:56:42,508 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:56:42,508 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:56:42,508 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:56:42,509 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:42,509 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:56:42,509 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:56:42,509 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:56:42,510 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:42,511 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:56:42,571 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:56:42,571 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:56:42,571 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:56:42,572 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:56:42,572 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:56:42,572 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:56:42,572 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:56:42,572 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:56:42,572 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:56:42,573 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515002.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:56:42,573 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:56:42,574 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:56:42,574 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:56:42,577 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 17:56:42,577 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:56:42,578 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:56:42,580 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:42,580 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:56:42,580 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:56:42,580 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:56:42,580 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:56:42,580 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:56:42,580 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:56:42,580 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:56:42,581 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:56:42,581 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:56:42,581 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:56:42,581 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:56:42,585 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:56:42,585 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:56:42,585 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:42,585 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:56:42,586 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:42,586 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:56:42,588 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:56:42,588 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:56:42,588 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:56:42,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:56:42,590 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:56:42,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:42,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:42,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:56:42,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:42,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:42,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:42,591 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:56:42,591 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:56:42,593 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:42,593 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:56:42,593 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:56:42,593 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:56:42,593 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:56:42,594 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:56:42,594 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:42,594 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:56:42,595 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:56:42,595 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:56:42,595 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:56:50,823 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:56:50,824 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:56:50,824 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-20 17:56:50,824 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:56:50,824 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:56:50,824 - session_2017-10-20T17_56_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:56:50,824 - session_2017-10-20T17_56_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:56:50,831 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:56:50,832 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-20 17:56:50,832 - session_2017-10-20T17_56_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-20 17:56:50,832 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:56:50,832 - session_2017-10-20T17_56_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:56:50,833 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:56:50,833 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:56:50,833 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:56:50,833 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:56:50,833 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:56:50,833 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:56:50,834 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:50,834 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:56:50,834 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:56:50,834 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:56:50,835 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:56:50,835 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:56:50,837 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515010.84
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:56:50,837 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:56:50,840 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-20 17:56:50,840 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:56:50,844 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 17:56:50,844 - session_2017-10-20T17_56_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:56:50,844 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:56:50,849 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:56:50,849 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:56:50,853 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:56:50,854 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:56:50,854 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:56:50,856 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:50,856 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:56:50,856 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:56:50,860 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:56:50,861 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:56:50,864 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-20 17:56:50,864 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:56:50,864 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:50,867 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:56:50,867 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:56:50,868 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,871 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:56:50,871 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:56:50,871 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:56:50,871 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:56:50,871 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:56:50,871 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:56:50,872 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:56:50,872 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:56:50,872 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:56:50,872 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:56:50,872 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:50,875 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_findoutFromDevice
-- BEGIN TIS changes --
- tis.shared.com: {}
+ tis.shared.com: {say_step("unknown step")}
-- END TIS changes --
2017-10-20 17:56:50,875 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,875 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:50,875 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,876 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:56:50,878 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:56:50,878 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:50,881 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("unknown step")}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
?                                          ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:56:50,881 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:50,882 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:50,882 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,882 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:56:50,883 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:56:50,883 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 17:56:50,883 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:56:50,884 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:56:50,885 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515010.84
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:56:50,885 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:56:50,889 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:56:50,890 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:56:50,893 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:56:50,893 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:56:50,897 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:56:50,897 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:56:50,898 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:56:50,901 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:56:50,901 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:56:50,904 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                                                    +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:56:50,904 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:56:50,904 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:56:50,904 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:56:50,908 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:50,908 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:56:50,908 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:56:50,910 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:50,911 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:56:50,911 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:56:50,911 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-20 17:56:50,911 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 17:56:50,912 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:56:50,912 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:50,912 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:56:50,912 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:56:50,913 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:56:50,913 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:50,914 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:56:50,914 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:56:50,914 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:56:50,915 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:50,915 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:50,916 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:50,916 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:56:50,916 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:56:50,916 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:56:50,917 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:56:50,917 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:56:50,917 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:56:50,917 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:56:50,917 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:56:50,918 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:56:50,918 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:56:50,918 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:56:50,918 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-20 17:56:50,919 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:56:50,920 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:50,921 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:56:50,922 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:56:50,923 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:56:50,923 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:56:50,923 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:56:50,923 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:56:50,923 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:56:50,923 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:56:50,923 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:56:50,923 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:56:50,924 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f51eafd9c68>]
2017-10-20 17:56:50,925 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51eafd9c68>], sender=GuiBackend, reason=None)
2017-10-20 17:56:50,925 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:56:50,925 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None))
2017-10-20 17:56:50,925 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:56:50,926 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:56:50,927 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:50,928 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:56:50,928 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:56:50,928 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Are you done?"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:56:50,929 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:50,929 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51eafd9c68>], sender=GuiBackend, reason=None))
2017-10-20 17:56:50,929 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51eafd9c68>], sender=GuiBackend, reason=None)
2017-10-20 17:56:50,930 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Are you done?"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:56:50,932 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:50,932 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:56:50,933 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:56:50,934 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:56:50,934 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None))
2017-10-20 17:56:50,934 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None)
2017-10-20 17:56:50,934 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:56:50,934 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:56:50,934 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:56:50,934 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:56:50,935 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None))
2017-10-20 17:56:50,937 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515010.94
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:56:50,937 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:56:50,937 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:56:50,938 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:56:50,945 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:56:50,945 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:56:50,946 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:56:50,949 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:50,949 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:56:50,949 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:56:50,949 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:56:50,950 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:56:50,950 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:56:50,950 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:56:50,950 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:56:50,950 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:56:50,950 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:56:50,950 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:56:50,950 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:56:50,955 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:56:50,955 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:56:50,955 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:50,955 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:56:50,955 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,955 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:56:50,959 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:56:50,959 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:56:50,959 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:50,960 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:56:50,960 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,960 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:56:50,963 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:56:50,963 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:56:50,963 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:50,963 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:56:50,964 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:50,965 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,965 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:56:50,965 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:56:50,965 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:56:50,966 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:56:50,966 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:56:50,966 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:56:50,968 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:56:50,968 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:56:50,969 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:56:50,969 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:56:50,969 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:56:50,969 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:56:50,969 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:56:50,970 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:56:50,970 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:56:50,970 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:56:50,970 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:00,446 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "yes"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:57:00,447 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:00,447 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None))
2017-10-20 17:57:00,448 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:00,448 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:00,448 - session_2017-10-20T17_56_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "yes"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:57:00,448 - session_2017-10-20T17_56_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:57:00,450 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:57:00,451 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])} for DDD 'recipehelp'
2017-10-20 17:57:00,451 - session_2017-10-20T17_56_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
2017-10-20 17:57:00,451 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:57:00,451 - session_2017-10-20T17_56_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Yes": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "yes"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "True"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:57:00,452 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:00,452 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:57:00,452 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:57:00,452 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:57:00,452 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:57:00,452 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:57:00,453 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,454 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:57:00,454 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,454 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,455 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,455 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:00,456 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515020.46
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:00,456 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:00,461 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^^                                                                                                              ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^                                                                                                              ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^^                                                                                                              -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^
-- END TIS changes --
2017-10-20 17:57:00,462 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:00,466 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
-- END TIS changes --
2017-10-20 17:57:00,470 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^^
-- END TIS changes --
2017-10-20 17:57:00,471 - session_2017-10-20T17_56_42_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-20 17:57:00,471 - session_2017-10-20T17_56_42_0 - INFO - Could not log rerank
2017-10-20 17:57:00,472 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:00,474 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 17:57:00,475 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:00,479 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-20 17:57:00,479 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:00,479 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:00,482 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:00,482 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:00,482 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:00,488 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                                                      ^ ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:57:00,488 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:00,488 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:00,488 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:00,488 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:00,488 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:00,488 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-20 17:57:00,488 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:00,489 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-20 17:57:00,489 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:00,493 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(True)}
?                          ++++++++++
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(True)}
?                                                                    ++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-20 17:57:00,493 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:00,494 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:00,499 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(True)}
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(True), resolved(?X.done(X))}
?                                                                                ++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:57:00,499 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:00,504 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
?                          ---------------------
+ tis.private.plan: Stack([device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:57:00,504 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,504 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:00,504 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:00,504 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:00,504 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:00,504 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:00,504 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:00,505 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:00,505 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:00,505 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:00,505 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,508 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step("unknown step")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), forget(done)])
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-20 17:57:00,508 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,509 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,512 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X)), done(True), resolved(?X.done(X))}
?                                                                    ----------------------------------
+ tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
-- END TIS changes --
2017-10-20 17:57:00,512 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,512 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,512 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,512 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:00,515 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:57:00,515 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:00,515 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:00,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:00,516 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-20 17:57:00,516 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-20 17:57:00,516 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:57:00,516 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:57:00,518 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515020.46
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:00,518 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:57:00,522 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step("unknown step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:57:00,522 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:00,522 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:00,525 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:57:00,525 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:00,525 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:00,525 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:00,525 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:57:00,528 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:00,528 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:57:00,528 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:57:00,531 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:57:00,531 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-20 17:57:00,531 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:00,531 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None))
2017-10-20 17:57:00,532 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-20 17:57:00,532 - session_2017-10-20T17_56_42_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-20 17:57:00,532 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None))
2017-10-20 17:57:00,532 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-20 17:57:00,532 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "yes", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:57:00,533 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,533 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None))
2017-10-20 17:57:00,533 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: unknown step}], sender=DmeModule, reason=None)
2017-10-20 17:57:00,534 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "unknown step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:00,534 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,535 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:57:00,535 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:00,535 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:57:00,536 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,536 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {say_step("unknown step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,537 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,537 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:57:00,537 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:57:00,537 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:57:00,538 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:57:00,538 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-20 17:57:00,539 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,540 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("unknown step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {say_step("unknown step"), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,540 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:57:00,541 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-20 17:57:00,541 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("unknown step"), resolved(?X.say_step(X))})
2017-10-20 17:57:00,541 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:57:00,541 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8072368>]
2017-10-20 17:57:00,541 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8072368>], sender=GuiBackend, reason=None)
2017-10-20 17:57:00,541 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:57:00,542 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None))
2017-10-20 17:57:00,542 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-20 17:57:00,542 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [""], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:57:00,542 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,542 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8072368>], sender=GuiBackend, reason=None))
2017-10-20 17:57:00,542 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8072368>], sender=GuiBackend, reason=None)
2017-10-20 17:57:00,543 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:57:00,543 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,544 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:00,569 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [""], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:57:00,570 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:00,570 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None))
2017-10-20 17:57:00,570 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None)
2017-10-20 17:57:00,570 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:57:00,570 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:57:00,570 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:57:00,570 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:57:00,571 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:57:00,572 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515020.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("unknown step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("unknown step")}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:00,572 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:00,572 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:00,572 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:00,577 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:57:00,578 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:00,578 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-20 17:57:00,581 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:00,582 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-20 17:57:00,582 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:00,584 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:57:00,584 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:00,585 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:00,586 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:00,586 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:00,586 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:00,586 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,589 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:57:00,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,592 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step("unknown step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:57:00,593 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,593 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,593 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,593 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:00,593 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:00,593 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,594 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,594 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:00,594 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:00,596 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:57:00,597 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:00,597 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:57:00,598 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515020.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("unknown step")}
tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:00,598 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:57:00,602 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step("unknown step")}
- tis.private.tmp.sys.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:00,602 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:00,605 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:00,605 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:00,608 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:57:00,608 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:00,611 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:57:00,611 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:00,611 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:00,611 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:57:00,614 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:00,614 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:57:00,614 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:57:00,616 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:57:00,617 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:57:00,617 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:57:00,617 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:57:00,617 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:00,617 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:00,618 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,618 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)))
2017-10-20 17:57:00,619 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:57:00,619 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:57:00,620 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,620 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,621 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,621 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:57:00,621 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:57:00,621 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:57:00,621 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:00,621 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 17:57:00,622 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 17:57:00,622 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:00,622 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:57:00,622 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:57:00,624 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,625 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:00,625 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:57:00,625 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:57:00,625 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:57:00,625 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:57:00,626 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:57:00,626 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:00,626 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:57:00,626 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:57:00,626 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:57:00,626 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:57:00,626 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:57:00,627 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:57:00,627 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,627 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:57:00,627 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:57:00,627 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:57:00,628 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,628 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:00,670 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:57:00,671 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:00,672 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:57:00,672 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:57:00,672 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:57:00,672 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:57:00,672 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:57:00,672 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:57:00,673 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:57:00,674 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515020.67
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:00,674 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:00,674 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:00,674 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:00,678 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-20 17:57:00,678 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:00,679 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:00,681 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:00,681 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:00,681 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:00,681 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:00,681 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:00,681 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:00,681 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:00,681 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:00,682 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:00,682 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:00,682 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:00,682 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:00,685 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:57:00,686 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:00,686 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:00,686 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:00,686 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,686 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:00,689 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:00,690 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:00,691 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:00,691 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:00,691 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:00,691 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,691 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,691 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:00,691 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:00,691 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:00,692 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:00,692 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:00,692 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:00,695 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:57:00,695 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:00,696 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:00,696 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:57:00,696 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:00,696 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:00,696 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:00,697 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:57:00,697 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:00,697 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:00,697 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:05,072 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:57:05,073 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:05,073 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-20 17:57:05,073 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:05,073 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:05,073 - session_2017-10-20T17_56_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:57:05,074 - session_2017-10-20T17_56_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:57:05,075 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:57:05,075 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-20 17:57:05,075 - session_2017-10-20T17_56_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-20 17:57:05,075 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:57:05,076 - session_2017-10-20T17_56_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:57:05,076 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:05,076 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:57:05,076 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:57:05,076 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:57:05,077 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:57:05,077 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:57:05,077 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:05,077 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:57:05,078 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:05,078 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:05,079 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:05,079 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:05,080 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515025.08
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:05,080 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:05,084 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-20 17:57:05,084 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:05,088 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-20 17:57:05,089 - session_2017-10-20T17_56_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:57:05,089 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:05,093 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:57:05,093 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:05,098 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:57:05,098 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:05,099 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:05,101 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:05,101 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:05,101 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:05,106 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.com: {say_step("unknown step"), resolved(?X.say_step(X))}
+ tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                                                      ^ ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:57:05,106 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:05,106 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:05,106 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:05,106 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:05,106 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:05,107 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-20 17:57:05,107 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:05,107 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-20 17:57:05,107 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:05,110 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:05,110 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:05,110 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:05,114 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:57:05,114 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:05,114 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:05,118 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:57:05,118 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:05,118 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:05,118 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:05,118 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:05,118 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:05,118 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:05,119 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:05,119 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:05,119 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:05,119 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:05,119 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:05,119 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:05,122 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:57:05,122 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:05,122 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:05,123 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:05,123 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:05,123 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:05,124 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-20 17:57:05,124 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:05,124 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:57:05,126 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515025.08
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:05,126 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:57:05,132 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^ ^^ ^^^^^^^^^  ^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ^^^^^^^^^^^ ^ ^^^^  ^^^^ +++++++++++ ^^^
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:57:05,132 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:05,135 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:05,136 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:05,140 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:57:05,140 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:05,140 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:05,143 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 17:57:05,143 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:05,147 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:57:05,147 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:05,147 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:05,147 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:57:05,150 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:05,150 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:57:05,151 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:57:05,153 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:05,153 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:57:05,154 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:05,154 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-20 17:57:05,154 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-20 17:57:05,154 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:57:05,155 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:05,155 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:57:05,155 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:05,155 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:05,156 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:05,156 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:57:05,157 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:05,157 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:57:05,157 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:05,157 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:05,159 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:05,159 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 17:57:05,159 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:57:05,159 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:57:05,159 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:57:05,159 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:57:05,159 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:05,160 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:57:05,160 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:57:05,160 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:57:05,160 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:57:05,160 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:05,161 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 17:57:05,161 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:57:05,162 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:05,165 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:05,165 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:57:05,165 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 17:57:05,165 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 17:57:05,165 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:57:05,165 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:57:05,165 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:57:05,166 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:57:05,166 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:05,166 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:57:05,166 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:57:05,166 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:57:05,167 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-20 17:57:05,167 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 17:57:05,167 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:57:05,169 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:05,169 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:57:05,169 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:57:05,170 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:57:05,171 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:05,171 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:05,174 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:57:05,174 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:05,174 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 17:57:05,174 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 17:57:05,175 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:57:05,175 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:57:05,175 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:57:05,175 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 17:57:05,175 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-20 17:57:05,177 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515025.18
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:05,177 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:05,177 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:05,177 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:05,184 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:57:05,185 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:05,185 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:05,187 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:05,187 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:05,187 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:05,187 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:05,188 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:05,188 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:05,188 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:05,188 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:05,188 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:05,188 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:05,188 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:05,188 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:05,193 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:57:05,193 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:05,193 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:05,194 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:05,194 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:05,194 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:05,198 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:05,198 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:05,198 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:05,199 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:05,199 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:05,199 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:05,202 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 17:57:05,203 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:05,203 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:05,203 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:05,203 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:05,203 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:05,203 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:05,203 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:05,203 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:05,204 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:05,205 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:05,205 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:05,205 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:05,205 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:05,208 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:05,208 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:05,208 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:05,208 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:57:05,208 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:05,208 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:05,209 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:05,209 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:57:05,209 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:05,209 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:05,209 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:09,619 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:57:09,619 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:09,619 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 17:57:09,620 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:09,620 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:09,620 - session_2017-10-20T17_56_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:57:09,620 - session_2017-10-20T17_56_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:57:09,622 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:57:09,622 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-20 17:57:09,622 - session_2017-10-20T17_56_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-20 17:57:09,622 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:57:09,622 - session_2017-10-20T17_56_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:57:09,623 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:09,623 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:57:09,623 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:57:09,623 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:57:09,623 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:57:09,623 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:57:09,624 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:09,624 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:57:09,624 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:09,624 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:09,625 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:09,625 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:09,626 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515029.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:09,626 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:09,630 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-20 17:57:09,630 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:09,635 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-20 17:57:09,641 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-20 17:57:09,642 - session_2017-10-20T17_56_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:57:09,642 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:09,646 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 17:57:09,646 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:09,651 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-20 17:57:09,652 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:09,652 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:09,654 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:09,654 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:09,654 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:09,662 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-20 17:57:09,662 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:09,662 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:09,662 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:09,662 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:09,662 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:09,662 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 17:57:09,662 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:09,663 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 17:57:09,663 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:09,666 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:57:09,666 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:09,666 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:09,670 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:57:09,670 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:09,674 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:09,675 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:09,675 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:09,675 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:09,678 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-20 17:57:09,678 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:09,678 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:09,681 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:57:09,681 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:09,681 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:09,682 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:09,682 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:09,684 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:57:09,684 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:09,685 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:09,685 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:09,685 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:09,685 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:09,685 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:57:09,685 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:57:09,685 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:57:09,685 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:57:09,687 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515029.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:09,687 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:57:09,691 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose a step")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:57:09,691 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:09,693 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:09,693 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:09,696 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 17:57:09,697 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:09,699 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:57:09,699 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:09,699 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:09,699 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:57:09,702 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:09,702 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:57:09,702 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:57:09,704 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:57:09,705 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:57:09,705 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:09,705 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-20 17:57:09,705 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:57:09,705 - session_2017-10-20T17_56_42_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 17:57:09,706 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-20 17:57:09,706 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 17:57:09,706 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:57:09,706 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:09,706 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:57:09,706 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:57:09,707 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:09,708 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:09,708 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:57:09,708 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:09,708 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:57:09,709 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:09,709 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:09,710 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:09,710 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:57:09,710 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:57:09,710 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:57:09,711 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-20 17:57:09,711 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:57:09,712 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:09,713 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:57:09,714 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:09,714 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:57:09,714 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-20 17:57:09,714 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-20 17:57:09,714 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-20 17:57:09,715 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f51e8072518>]
2017-10-20 17:57:09,715 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51e8072518>], sender=GuiBackend, reason=None)
2017-10-20 17:57:09,715 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:57:09,715 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-20 17:57:09,715 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-20 17:57:09,716 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:57:09,716 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:09,716 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:57:09,716 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:57:09,717 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:57:09,717 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:09,717 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51e8072518>], sender=GuiBackend, reason=None))
2017-10-20 17:57:09,717 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51e8072518>], sender=GuiBackend, reason=None)
2017-10-20 17:57:09,718 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:57:09,718 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:09,718 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:09,727 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:57:09,727 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:09,728 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-20 17:57:09,728 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-20 17:57:09,728 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:57:09,728 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:57:09,728 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:57:09,728 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-20 17:57:09,729 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-20 17:57:09,730 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515029.73
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:09,730 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:09,731 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:09,731 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:09,737 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:57:09,737 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:09,737 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:09,741 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:09,741 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:09,741 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:09,741 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:09,741 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:09,742 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:09,742 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:09,742 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:09,742 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:09,742 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:09,742 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:09,742 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:09,745 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose a step")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:57:09,745 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:09,745 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:09,748 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                            ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:57:09,748 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:09,748 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:09,749 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:09,750 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:09,750 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:09,750 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:09,750 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:09,750 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:09,750 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:09,750 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:09,753 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:57:09,753 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:57:09,753 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:57:09,753 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-20 17:57:09,753 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-20 17:57:09,753 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:09,754 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:09,754 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 17:57:09,754 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:57:09,754 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 17:57:09,755 - session_2017-10-20T17_56_42_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f51e88c6488>:1.0
2017-10-20 17:57:09,755 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:10,756 - session_2017-10-20T17_56_42_0 - DEBUG - Timeout fired
2017-10-20 17:57:10,756 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:57:10,756 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:57:10,756 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 17:57:10,756 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:57:10,757 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515030.76
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:10,757 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:10,757 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:10,759 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:57:10,759 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:10,764 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 17:57:10,764 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:10,764 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:10,766 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:10,766 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:10,766 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:10,766 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:10,766 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:10,766 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:10,766 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:10,766 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:10,767 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:57:10,767 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:10,767 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:57:10,767 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:10,767 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:10,767 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:10,768 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:10,768 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:10,768 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:10,768 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:10,768 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:10,768 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:10,768 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:10,768 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:10,772 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:57:10,772 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:10,772 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:10,775 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose a step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:57:10,775 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:10,775 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:10,775 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:10,775 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:10,776 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:10,776 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:10,776 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:10,776 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:10,776 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:10,776 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:10,776 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:57:10,777 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515030.76
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:10,777 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:57:10,782 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose a step")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:10,783 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:10,785 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:10,785 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:10,788 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:57:10,788 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:10,791 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:57:10,791 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:10,791 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:10,791 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:57:10,793 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:10,793 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:57:10,793 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:57:10,796 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:57:10,796 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:57:10,796 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:57:23,235 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:57:23,236 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:23,236 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-20 17:57:23,236 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:23,236 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:23,236 - session_2017-10-20T17_56_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:57:23,237 - session_2017-10-20T17_56_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:57:23,238 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:57:23,239 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-20 17:57:23,239 - session_2017-10-20T17_56_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-20 17:57:23,239 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:57:23,239 - session_2017-10-20T17_56_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:57:23,240 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-20 17:57:23,240 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:57:23,240 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:23,240 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:23,241 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,241 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 17:57:23,242 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 17:57:23,242 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:57:23,242 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,242 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,244 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,244 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:57:23,244 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:57:23,244 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:57:23,244 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:23,244 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 17:57:23,245 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 17:57:23,245 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:23,245 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:57:23,245 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:57:23,246 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,248 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,248 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:57:23,248 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:57:23,248 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:57:23,248 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:57:23,248 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:57:23,248 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:23,249 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e88c0878>]
2017-10-20 17:57:23,249 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e88c0878>], sender=GuiBackend, reason=None)
2017-10-20 17:57:23,249 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:57:23,249 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:57:23,249 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:57:23,249 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:57:23,249 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-20 17:57:23,249 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-20 17:57:23,250 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,250 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:57:23,250 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:57:23,251 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:57:23,251 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,252 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e88c0878>], sender=GuiBackend, reason=None))
2017-10-20 17:57:23,252 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e88c0878>], sender=GuiBackend, reason=None)
2017-10-20 17:57:23,252 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:57:23,253 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,253 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:23,276 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:57:23,276 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:23,276 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:57:23,277 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:57:23,277 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:57:23,277 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:57:23,277 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:57:23,277 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:57:23,278 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:57:23,279 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515043.28
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:23,279 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:23,279 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:23,279 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:23,283 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:57:23,283 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:23,283 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:23,286 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:23,286 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:23,286 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:23,286 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:23,286 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:23,287 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:23,287 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:23,287 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:23,287 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:23,287 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:23,287 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:23,287 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:23,290 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:57:23,290 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:23,291 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,291 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:23,291 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,291 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:23,294 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:57:23,294 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:23,295 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:23,296 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:23,296 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:23,296 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:23,296 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,296 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,296 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:23,296 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,296 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,297 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,297 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:23,297 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:23,300 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:57:23,300 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:23,300 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:23,300 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:57:23,300 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:23,300 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:23,301 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,302 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:57:23,302 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:23,302 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:23,303 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,303 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,303 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,303 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:23,305 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515043.3
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:23,305 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:23,309 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-20 17:57:23,309 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:23,315 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 17:57:23,316 - session_2017-10-20T17_56_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:57:23,316 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:23,321 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:57:23,321 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:23,327 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:57:23,328 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:23,328 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:23,330 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:23,330 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:23,331 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:23,335 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:57:23,335 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:23,335 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:23,335 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:23,335 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:23,336 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:23,336 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 17:57:23,336 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:23,336 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-20 17:57:23,336 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:23,340 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 17:57:23,340 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:23,340 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,343 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-20 17:57:23,343 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:23,343 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,346 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-20 17:57:23,346 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:23,346 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:23,346 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:23,346 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:23,346 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:23,346 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:23,347 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:23,347 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:23,347 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:23,347 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,350 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-20 17:57:23,350 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,350 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,350 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,350 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:23,353 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:57:23,353 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,353 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,353 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,353 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:23,353 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:23,354 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 17:57:23,354 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:23,354 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:57:23,355 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515043.3
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:23,355 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:57:23,359 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:57:23,359 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:23,362 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-20 17:57:23,362 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:23,365 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:57:23,365 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:23,365 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:23,365 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:57:23,367 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:23,367 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:57:23,368 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:57:23,370 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:57:23,370 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 17:57:23,371 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:23,371 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-20 17:57:23,371 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-20 17:57:23,371 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:57:23,371 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,372 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:57:23,372 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:57:23,372 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:23,373 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,373 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:57:23,373 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:57:23,373 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:57:23,374 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,374 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,375 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,375 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:57:23,375 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:57:23,375 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:57:23,375 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 17:57:23,375 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:57:23,375 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:57:23,376 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 17:57:23,376 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-20 17:57:23,376 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 17:57:23,377 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,378 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:57:23,379 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,379 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:57:23,379 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-20 17:57:23,379 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:57:23,379 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:57:23,379 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:57:23,379 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-20 17:57:23,380 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f51e88c66c8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f51e8031170>]
2017-10-20 17:57:23,380 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f51e88c66c8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f51e8031170>], sender=GuiBackend, reason=None)
2017-10-20 17:57:23,380 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:57:23,380 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-20 17:57:23,380 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-20 17:57:23,380 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:57:23,381 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,381 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:57:23,381 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:57:23,382 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:57:23,382 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,382 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f51e88c66c8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f51e8031170>], sender=GuiBackend, reason=None))
2017-10-20 17:57:23,382 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f51e88c66c8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f51e8031170>], sender=GuiBackend, reason=None)
2017-10-20 17:57:23,383 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:57:23,383 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,384 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:23,392 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:57:23,393 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:23,394 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-20 17:57:23,394 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-20 17:57:23,394 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:57:23,394 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 17:57:23,395 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 17:57:23,395 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-20 17:57:23,395 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 17:57:23,396 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515043.4
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:23,396 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:23,397 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:23,397 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:23,402 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:57:23,402 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:23,402 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:23,406 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-20 17:57:23,406 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:23,406 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:23,406 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:23,406 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:23,407 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:23,407 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:23,407 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:23,407 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:23,407 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:23,407 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:23,407 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:23,411 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:57:23,411 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:23,411 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,411 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:23,411 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,411 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:23,414 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:57:23,414 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:23,414 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^
+ tis.shared.previous_goal: perform(go_to_next)
?                           ^^^^ +++++++++  +++
-- END TIS changes --
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:23,418 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:23,419 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:23,419 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,422 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:23,422 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,422 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,425 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_findoutFromDevice
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic.")}
-- END TIS changes --
2017-10-20 17:57:23,426 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,426 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,426 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,426 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:23,426 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,430 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                                                        ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:57:23,430 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,430 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,431 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,431 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:23,431 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:23,434 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:57:23,434 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:57:23,434 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:57:23,435 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515043.4
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:23,435 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:57:23,439 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              ---------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:57:23,440 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:23,442 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:57:23,442 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:23,446 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:57:23,446 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:23,449 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:57:23,449 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:57:23,449 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:57:23,450 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:57:23,452 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:23,452 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:57:23,452 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:57:23,455 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:57:23,455 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:57:23,455 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 17:57:23,455 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 17:57:23,456 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:57:23,456 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:23,456 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,456 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-20 17:57:23,457 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-20 17:57:23,457 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:57:23,457 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,458 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,460 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,460 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:57:23,460 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:57:23,460 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:57:23,460 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:23,460 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:57:23,461 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:57:23,461 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:23,461 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-20 17:57:23,461 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:57:23,463 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,464 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:57:23,466 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:57:23,466 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:57:23,466 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:57:23,466 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:57:23,466 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:57:23,466 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:57:23,466 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:57:23,468 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8031cf8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f51e88c96c8>]
2017-10-20 17:57:23,468 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8031cf8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f51e88c96c8>], sender=GuiBackend, reason=None)
2017-10-20 17:57:23,468 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:57:23,468 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-20 17:57:23,469 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:57:23,469 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:57:23,470 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,470 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:57:23,470 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:57:23,470 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Are you done?"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:57:23,471 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,471 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8031cf8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f51e88c96c8>], sender=GuiBackend, reason=None))
2017-10-20 17:57:23,471 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8031cf8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f51e88c96c8>], sender=GuiBackend, reason=None)
2017-10-20 17:57:23,472 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Are you done?"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:57:23,472 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,472 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:57:23,504 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:57:23,505 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:57:23,505 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-20 17:57:23,505 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-20 17:57:23,505 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:57:23,505 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:57:23,506 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:57:23,506 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:57:23,506 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-20 17:57:23,507 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515043.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:57:23,508 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:57:23,508 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:57:23,508 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:57:23,512 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-20 17:57:23,513 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:57:23,513 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:57:23,516 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:57:23,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:57:23,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:57:23,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:57:23,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:57:23,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:57:23,516 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:57:23,516 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:57:23,517 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:23,517 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:57:23,517 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:57:23,517 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:23,520 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:57:23,520 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:23,520 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,521 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:23,521 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,521 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:57:23,524 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:57:23,524 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:57:23,524 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,524 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:57:23,525 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,525 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:57:23,525 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:57:23,525 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:23,525 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:57:23,525 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:23,525 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:57:23,525 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:57:23,526 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:57:23,526 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:57:23,526 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,526 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,526 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:57:23,526 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:57:23,527 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:57:23,527 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:57:23,527 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:57:23,527 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:57:23,530 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:57:23,530 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:57:23,530 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:23,530 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 17:57:23,530 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:57:23,530 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:57:23,531 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:57:23,531 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:57:23,531 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:23,532 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:57:23,532 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:58:13,331 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "no"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:58:13,332 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:58:13,332 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None))
2017-10-20 17:58:13,332 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:58:13,332 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:58:13,332 - session_2017-10-20T17_56_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "no"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:58:13,332 - session_2017-10-20T17_56_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:58:13,335 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:58:13,335 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])} for DDD 'recipehelp'
2017-10-20 17:58:13,335 - session_2017-10-20T17_56_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
2017-10-20 17:58:13,336 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:58:13,336 - session_2017-10-20T17_56_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.No": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "no"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "False"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:58:13,336 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-20 17:58:13,336 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:58:13,337 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:58:13,337 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:58:13,337 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:58:13,337 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:58:13,337 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,337 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:58:13,338 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,338 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,339 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,339 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:58:13,341 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515093.34
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:58:13,341 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:58:13,346 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^                                                                                                             ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^^                                                                                                             ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^                                                                                                             -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^^
-- END TIS changes --
2017-10-20 17:58:13,346 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:58:13,351 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
-- END TIS changes --
2017-10-20 17:58:13,355 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^^
-- END TIS changes --
2017-10-20 17:58:13,357 - session_2017-10-20T17_56_42_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-20 17:58:13,357 - session_2017-10-20T17_56_42_0 - INFO - Could not log rerank
2017-10-20 17:58:13,357 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:58:13,361 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 17:58:13,361 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:58:13,366 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:58:13,366 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:58:13,367 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:58:13,369 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:13,369 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:58:13,369 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:58:13,376 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                                                      ^ ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:58:13,377 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:58:13,377 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:58:13,377 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:58:13,377 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:58:13,377 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:58:13,378 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-20 17:58:13,378 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:58:13,378 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-20 17:58:13,378 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:58:13,383 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(False)}
?                          +++++++++++
- tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), done(False)}
?                                                                                                                                  +++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-20 17:58:13,383 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:58:13,384 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:13,389 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), done(False)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), done(False), resolved(?X.done(X))}
?                                                                                                                                               ++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:58:13,389 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:58:13,393 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
?                          ---------------------
+ tis.private.plan: Stack([device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:58:13,393 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,393 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:58:13,393 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:58:13,393 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:13,393 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:58:13,393 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:13,394 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:58:13,394 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:58:13,394 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:13,394 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:58:13,394 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,398 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
?                                                                                                              ++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X)), forget(done)])
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-20 17:58:13,398 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,398 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,403 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), done(False), resolved(?X.done(X))}
?                                                                                                                                  -----------------------------------
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
-- END TIS changes --
2017-10-20 17:58:13,403 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,403 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,403 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,403 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:58:13,406 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:58:13,406 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:13,406 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,406 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,407 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:13,407 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:58:13,407 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-20 17:58:13,407 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-20 17:58:13,407 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:58:13,407 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:58:13,408 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515093.34
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:58:13,408 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:58:13,413 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^^^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                ^^^^^ ^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
?                                                                                                                      ++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 17:58:13,413 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:58:13,413 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:58:13,416 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:58:13,416 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:58:13,416 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:58:13,416 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:58:13,417 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:58:13,419 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:13,419 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:58:13,419 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:58:13,422 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 17:58:13,422 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-20 17:58:13,423 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:58:13,423 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None))
2017-10-20 17:58:13,423 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-20 17:58:13,423 - session_2017-10-20T17_56_42_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-20 17:58:13,423 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None))
2017-10-20 17:58:13,423 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-20 17:58:13,424 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "no", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:58:13,424 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,424 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 17:58:13,424 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:58:13,425 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:58:13,426 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,426 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:58:13,427 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:58:13,427 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:58:13,427 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,427 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,428 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,428 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:58:13,429 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:58:13,429 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:58:13,429 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:58:13,429 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-20 17:58:13,430 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,432 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos)]), com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,432 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:58:13,432 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos)])
2017-10-20 17:58:13,432 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X)), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-20 17:58:13,433 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:58:13,433 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8031560>]
2017-10-20 17:58:13,433 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8031560>], sender=GuiBackend, reason=None)
2017-10-20 17:58:13,433 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:58:13,433 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None))
2017-10-20 17:58:13,433 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [], sender=GenerateModule, reason=None)
2017-10-20 17:58:13,433 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [""], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:58:13,434 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,434 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8031560>], sender=GuiBackend, reason=None))
2017-10-20 17:58:13,434 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f51e8031560>], sender=GuiBackend, reason=None)
2017-10-20 17:58:13,434 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:58:13,435 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,435 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:58:13,456 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [""], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:58:13,456 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:58:13,457 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None))
2017-10-20 17:58:13,457 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [], sender=TextOutputComponent, reason=None)
2017-10-20 17:58:13,457 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:58:13,457 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:58:13,457 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:58:13,457 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
2017-10-20 17:58:13,458 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:58:13,459 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515093.46
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:58:13,459 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:58:13,459 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:58:13,459 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:58:13,465 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:58:13,465 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:58:13,465 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:58:13,468 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:13,468 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:58:13,468 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
2017-10-20 17:58:13,469 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:58:13,472 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:58:13,472 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:58:13,472 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:13,473 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:58:13,474 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,477 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:58:13,477 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,478 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,480 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 17:58:13,480 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,480 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,481 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,481 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:58:13,481 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:13,481 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,481 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,481 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:13,482 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:58:13,484 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 17:58:13,484 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:58:13,485 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:58:13,486 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515093.46
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:58:13,486 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:58:13,489 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:58:13,489 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:58:13,492 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:58:13,492 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:58:13,499 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:58:13,499 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:58:13,503 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:58:13,503 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:58:13,503 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:58:13,503 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:58:13,505 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:13,505 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:58:13,506 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:58:13,508 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 17:58:13,509 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:58:13,509 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:58:13,509 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:58:13,510 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:58:13,510 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:58:13,511 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,511 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None)))
2017-10-20 17:58:13,512 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [], sender=TurnManager, reason=None))
2017-10-20 17:58:13,512 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:58:13,512 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,513 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,514 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,514 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:58:13,514 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:58:13,514 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:58:13,514 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:58:13,514 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-20 17:58:13,516 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-20 17:58:13,516 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:58:13,516 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:58:13,516 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:58:13,518 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,520 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:13,520 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:58:13,520 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:58:13,520 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-20 17:58:13,520 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-20 17:58:13,520 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:58:13,521 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:58:13,521 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:58:13,521 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:58:13,521 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:58:13,521 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:58:13,521 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:58:13,522 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:58:13,522 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,522 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:58:13,522 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:58:13,523 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:58:13,523 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,523 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:58:13,567 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:58:13,567 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:58:13,567 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:58:13,568 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:58:13,568 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:58:13,568 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:58:13,568 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:58:13,569 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:58:13,569 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:58:13,570 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515093.57
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:58:13,570 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:58:13,571 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:58:13,571 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:58:13,576 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-20 17:58:13,576 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:58:13,576 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:58:13,578 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:58:13,579 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:58:13,584 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:58:13,584 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:58:13,584 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:13,584 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:58:13,584 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,584 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:58:13,587 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:58:13,587 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:13,588 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:58:13,589 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:58:13,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:13,589 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:58:13,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:58:13,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:13,589 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:13,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:13,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:13,590 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:58:13,593 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-20 17:58:13,593 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:58:13,593 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:58:13,593 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:58:13,593 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:58:13,593 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:58:13,594 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:13,594 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:58:13,595 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:58:13,595 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:58:13,595 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:58:33,996 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:58:33,996 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:58:33,997 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-20 17:58:33,997 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:58:33,997 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:58:33,997 - session_2017-10-20T17_56_42_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:58:33,997 - session_2017-10-20T17_56_42_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:58:33,999 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:58:33,999 - session_2017-10-20T17_56_42_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-20 17:58:33,999 - session_2017-10-20T17_56_42_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-20 17:58:33,999 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:58:34,000 - session_2017-10-20T17_56_42_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:58:34,000 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:58:34,000 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:58:34,000 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:58:34,000 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:58:34,001 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:58:34,001 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:58:34,001 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:34,001 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:58:34,002 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:58:34,002 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:58:34,003 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:58:34,003 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:58:34,004 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515114.0
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:58:34,004 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:58:34,007 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-20 17:58:34,007 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:58:34,012 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 17:58:34,012 - session_2017-10-20T17_56_42_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:58:34,013 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:58:34,017 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:58:34,017 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:58:34,023 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:58:34,023 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:58:34,024 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:58:34,026 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:34,026 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:58:34,027 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:58:34,033 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.usr.com: {device_activity_terminated(go_to_next), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.private.tmp.usr.bel: {}
+ tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                                                      ^ ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-20 17:58:34,033 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:58:34,033 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:58:34,033 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:58:34,033 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:58:34,034 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:58:34,034 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:58:34,034 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:58:34,034 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:58:34,034 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:58:34,038 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-20 17:58:34,038 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:58:34,038 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:34,041 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:58:34,042 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:58:34,042 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,045 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:58:34,045 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:58:34,045 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:58:34,046 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:34,046 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:58:34,046 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:34,046 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:58:34,046 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:58:34,046 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:34,046 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:58:34,046 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:34,049 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: exec_findoutFromDevice
-- BEGIN TIS changes --
- tis.shared.com: {}
+ tis.shared.com: {say_step(" Step one: Chop onions and garlic.")}
-- END TIS changes --
2017-10-20 17:58:34,049 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,049 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:34,050 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,050 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:58:34,053 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 17:58:34,053 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:34,057 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 17:58:34,057 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:34,057 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:34,057 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,057 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:34,057 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:58:34,058 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 17:58:34,058 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:58:34,058 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: select
2017-10-20 17:58:34,059 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515114.0
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:58:34,059 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:58:34,063 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^ ^^ ^^^^^^^^^  ^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ^^^^^^^^^^^ ^ ^^^^  ^^^^ +++++++++++ ^^^
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:58:34,063 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:58:34,066 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:58:34,066 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:58:34,070 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:58:34,070 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:58:34,070 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:58:34,074 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-20 17:58:34,074 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:58:34,077 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                                                    +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:58:34,077 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:58:34,077 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_move
2017-10-20 17:58:34,077 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:58:34,079 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:34,080 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:58:34,080 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:58:34,082 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:34,083 - session_2017-10-20T17_56_42_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:58:34,083 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:58:34,083 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-20 17:58:34,083 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-20 17:58:34,083 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 17:58:34,084 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:34,084 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 17:58:34,084 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:58:34,084 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:58:34,085 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:34,085 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-20 17:58:34,086 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:58:34,086 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:58:34,086 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:34,087 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:34,088 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:34,088 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))})
2017-10-20 17:58:34,089 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:58:34,089 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))})
2017-10-20 17:58:34,089 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:58:34,089 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))})
2017-10-20 17:58:34,089 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:58:34,089 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 17:58:34,089 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 17:58:34,090 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:58:34,090 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:58:34,090 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:58:34,090 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-20 17:58:34,091 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:58:34,092 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:34,094 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:58:34,095 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:58:34,096 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:58:34,096 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-20 17:58:34,096 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))})
2017-10-20 17:58:34,096 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 17:58:34,096 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))})
2017-10-20 17:58:34,096 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:58:34,096 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))})
2017-10-20 17:58:34,096 - session_2017-10-20T17_56_42_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-20 17:58:34,097 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f51e8099098>]
2017-10-20 17:58:34,097 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51e8099098>], sender=GuiBackend, reason=None)
2017-10-20 17:58:34,098 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posted event
2017-10-20 17:58:34,098 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None))
2017-10-20 17:58:34,098 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-20 17:58:34,098 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:58:34,098 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:34,099 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:58:34,099 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Are you done?}, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:58:34,099 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Are you done?"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 17:58:34,100 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:34,100 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51e8099098>], sender=GuiBackend, reason=None))
2017-10-20 17:58:34,101 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f51e8099098>], sender=GuiBackend, reason=None)
2017-10-20 17:58:34,101 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Are you done?"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:58:34,101 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:34,101 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:58:34,107 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:58:34,107 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:58:34,107 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None))
2017-10-20 17:58:34,107 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None)
2017-10-20 17:58:34,107 - session_2017-10-20T17_56_42_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:58:34,108 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:58:34,108 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:58:34,108 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-20 17:58:34,109 - session_2017-10-20T17_56_42_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None))
2017-10-20 17:58:34,110 - session_2017-10-20T17_56_42_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f51ea79e090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f51e88cb5d0>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508515114.11
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:58:34,110 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:58:34,110 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:58:34,111 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:58:34,117 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 17:58:34,117 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:58:34,117 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:58:34,120 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:34,120 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:58:34,120 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - INFO - BEGIN integrate_moves
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:58:34,121 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:58:34,125 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:58:34,125 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:58:34,125 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:34,126 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:58:34,126 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,126 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:58:34,130 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:58:34,130 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:58:34,130 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:34,131 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:58:34,131 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,131 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:integrate
2017-10-20 17:58:34,134 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:58:34,134 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:58:34,134 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:34,134 - session_2017-10-20T17_56_42_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:58:34,134 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_action
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - INFO - breaking out of accommodate
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - INFO - END integrate_moves
2017-10-20 17:58:34,135 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:34,136 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,136 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:58:34,136 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:58:34,136 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:58:34,137 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:58:34,137 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:58:34,137 - session_2017-10-20T17_56_42_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:58:34,139 - session_2017-10-20T17_56_42_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:58:34,139 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:58:34,139 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:58:34,140 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 17:58:34,140 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 17:58:34,140 - session_2017-10-20T17_56_42_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:58:34,140 - session_2017-10-20T17_56_42_0 - DEBUG - Sent.
2017-10-20 17:58:34,140 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:58:34,141 - session_2017-10-20T17_56_42_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:58:34,141 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:58:34,142 - session_2017-10-20T17_56_42_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:59:26,319 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:59:26,319 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-20 17:59:26,319 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:59:26,319 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:59:26,319 - session_2017-10-20T17_56_42_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 17:59:26,320 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:59:26,320 - session_2017-10-20T17_56_42_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 17:59:26,320 - session_2017-10-20T17_56_42_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:59:26,320 - session_2017-10-20T17_56_42_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 17:59:26,320 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:59:26,320 - session_2017-10-20T17_56_42_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 17:59:26,321 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:59:26,321 - session_2017-10-20T17_56_42_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:59:26,321 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:59:26,322 - session_2017-10-20T17_56_42_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 17:59:26,322 - session_2017-10-20T17_56_42_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 17:59:26,322 - session_2017-10-20T17_56_42_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-20 17:59:26,323 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-20 17:59:26,323 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 17:59:26,323 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-20 17:59:26,323 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 17:59:26,323 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-20 17:59:26,323 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 17:59:26,323 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-20 17:59:26,323 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 17:59:26,324 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-20 17:59:26,324 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 17:59:26,324 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-20 17:59:26,324 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 17:59:26,324 - session_2017-10-20T17_56_42_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-20 17:59:26,324 - session_2017-10-20T17_56_42_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
