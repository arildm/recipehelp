2017-10-20 15:21:51,873 - session_2017-10-20T15_21_51_0 - DEBUG - Backend()
2017-10-20 15:21:51,874 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.initialize()
2017-10-20 15:21:51,901 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fafb4c03dd0>>, False])
2017-10-20 15:21:51,901 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fafb4c03dd0>>, 'eng'])
2017-10-20 15:21:51,901 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 15:21:51,901 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 15:21:51,901 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 15:21:51,901 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fafb4c03dd0>>, True, 'disabled'])
2017-10-20 15:21:51,901 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fafb4c03dd0>>])
2017-10-20 15:21:51,901 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7fafb4c03dd0>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7fafb4c03dd0>>, 'eng', False, True])
2017-10-20 15:21:51,902 - session_2017-10-20T15_21_51_0 - DEBUG - Backend initialized
2017-10-20 15:21:51,902 - session_2017-10-20T15_21_51_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 15:21:51,902 - session_2017-10-20T15_21_51_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 15:21:51,902 - session_2017-10-20T15_21_51_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 15:21:51,902 - session_2017-10-20T15_21_51_0 - DEBUG - Backend uses language 'eng'
2017-10-20 15:21:51,902 - session_2017-10-20T15_21_51_0 - DEBUG - running module InterpretModule
2017-10-20 15:21:51,902 - session_2017-10-20T15_21_51_0 - DEBUG - running module DmeModule
2017-10-20 15:21:51,903 - session_2017-10-20T15_21_51_0 - DEBUG - running module DeviceManager
2017-10-20 15:21:51,904 - session_2017-10-20T15_21_51_0 - DEBUG - running module GenerateModule
2017-10-20 15:21:51,904 - session_2017-10-20T15_21_51_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 15:21:51,904 - session_2017-10-20T15_21_51_0 - DEBUG - running module GuiBackend
2017-10-20 15:21:51,904 - session_2017-10-20T15_21_51_0 - DEBUG - running module CogloadModule
2017-10-20 15:21:51,904 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:21:51,905 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:21:51,906 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 15:21:51,906 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 15:21:51,906 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 15:21:51,907 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:21:51,907 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:21:51,913 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 15:21:51,913 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:21:51,913 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 15:21:51,914 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,914 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 15:21:51,914 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 15:21:51,914 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 15:21:51,915 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:21:51,915 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:21:51,917 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 15:21:51,918 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:21:51,918 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 15:21:51,918 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,918 - session_2017-10-20T15_21_51_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,918 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,918 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 15:21:51,918 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 15:21:51,919 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505711.92
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:21:51,919 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:21:51,920 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 15:21:51,920 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 15:21:51,922 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:21:51,923 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 15:21:51,923 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 15:21:51,925 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:21:51,925 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 15:21:51,925 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 15:21:51,925 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 15:21:51,925 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - INFO - BEGIN integrate_moves
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:21:51,926 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:21:51,927 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:21:51,927 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:accommodate
2017-10-20 15:21:51,927 - session_2017-10-20T15_21_51_0 - INFO - breaking out of accommodate
2017-10-20 15:21:51,927 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:21:51,927 - session_2017-10-20T15_21_51_0 - INFO - END integrate_moves
2017-10-20 15:21:51,927 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:21:51,927 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:21:51,930 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 15:21:51,930 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:21:51,932 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 15:21:51,932 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:21:51,932 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:21:51,932 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:21:51,932 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 15:21:51,932 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:21:51,933 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:21:51,933 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:21:51,933 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:21:51,933 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 15:21:51,933 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:21:51,933 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: select
2017-10-20 15:21:51,934 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505711.92
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:21:51,934 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 15:21:51,938 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 15:21:51,939 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:21:51,941 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 15:21:51,941 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:21:51,943 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 15:21:51,943 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:21:51,946 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 15:21:51,946 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:21:51,946 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:21:51,946 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 15:21:51,948 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:21:51,948 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 15:21:51,948 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:set_timeout
2017-10-20 15:21:51,950 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 15:21:51,951 - session_2017-10-20T15_21_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 15:21:51,951 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 15:21:51,951 - session_2017-10-20T15_21_51_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,951 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,951 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,951 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,952 - session_2017-10-20T15_21_51_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 15:21:51,952 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 15:21:51,952 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 15:21:51,952 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 15:21:51,952 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 15:21:51,952 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 15:21:51,953 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:21:51,953 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 15:21:51,953 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:21:51,953 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 15:21:51,954 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:21:51,954 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 15:21:51,954 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 15:21:51,954 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 15:21:51,955 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:21:51,955 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:21:51,957 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:21:51,957 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 15:21:51,957 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 15:21:51,957 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 15:21:51,957 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 15:21:51,958 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 15:21:51,958 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 15:21:51,959 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 15:21:51,959 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 15:21:51,959 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 15:21:51,960 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:21:51,962 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:21:51,962 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 15:21:51,962 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 15:21:51,962 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 15:21:51,962 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 15:21:51,962 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 15:21:51,963 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 15:21:51,963 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend generated message []
2017-10-20 15:21:51,963 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 15:21:51,963 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend posted event
2017-10-20 15:21:51,963 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 15:21:51,963 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 15:21:51,964 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 15:21:51,964 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:21:51,964 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 15:21:51,964 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 15:21:51,965 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 15:21:51,965 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:21:51,965 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:21:52,027 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 15:21:52,027 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:21:52,028 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 15:21:52,028 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 15:21:52,028 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 15:21:52,028 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 15:21:52,028 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 15:21:52,028 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 15:21:52,029 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 15:21:52,030 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505712.03
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:21:52,030 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:21:52,030 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 15:21:52,030 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 15:21:52,033 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 15:21:52,033 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 15:21:52,033 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 15:21:52,035 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:21:52,035 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 15:21:52,035 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 15:21:52,035 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 15:21:52,035 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 15:21:52,035 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 15:21:52,035 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 15:21:52,036 - session_2017-10-20T15_21_51_0 - INFO - BEGIN integrate_moves
2017-10-20 15:21:52,036 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 15:21:52,036 - session_2017-10-20T15_21_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 15:21:52,036 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 15:21:52,036 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:21:52,040 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 15:21:52,041 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 15:21:52,041 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:21:52,041 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 15:21:52,041 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:21:52,041 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:21:52,044 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 15:21:52,044 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 15:21:52,044 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:21:52,044 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 15:21:52,044 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:21:52,044 - session_2017-10-20T15_21_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 15:21:52,044 - session_2017-10-20T15_21_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:accommodate
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - INFO - breaking out of accommodate
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - INFO - END integrate_moves
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:21:52,045 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:21:52,046 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 15:21:52,046 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:21:52,046 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:21:52,046 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:21:52,046 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:21:52,046 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 15:21:52,048 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:21:52,048 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:21:52,049 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 15:21:52,049 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 15:21:52,049 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:21:52,050 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 15:21:52,050 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:21:52,050 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 15:21:52,050 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 15:21:52,051 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 15:21:52,051 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:22:02,097 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to hell"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 15:22:02,097 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:22:02,097 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None))
2017-10-20 15:22:02,097 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 15:22:02,098 - session_2017-10-20T15_21_51_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 15:22:02,098 - session_2017-10-20T15_21_51_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to hell"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 15:22:02,098 - session_2017-10-20T15_21_51_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 15:22:02,103 - session_2017-10-20T15_21_51_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 15:22:02,103 - session_2017-10-20T15_21_51_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])} for DDD 'recipehelp'
2017-10-20 15:22:02,104 - session_2017-10-20T15_21_51_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
2017-10-20 15:22:02,104 - session_2017-10-20T15_21_51_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None)
2017-10-20 15:22:02,104 - session_2017-10-20T15_21_51_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to hell", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to hell"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to hell", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 15:22:02,104 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to hell}], sender=TextInputComponent, reason=None)
2017-10-20 15:22:02,105 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None))
2017-10-20 15:22:02,105 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=InterpretModule, reason=None)
2017-10-20 15:22:02,105 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 15:22:02,105 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 15:22:02,105 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 15:22:02,106 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:02,106 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 15:22:02,106 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 15:22:02,106 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 15:22:02,107 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
2017-10-20 15:22:02,107 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 15:22:02,108 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505722.11
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:22:02,109 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:22:02,112 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #]), OpenQueue([Move(answer("go to hell"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
-- END TIS changes --
2017-10-20 15:22:02,112 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:22:02,117 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to hell'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-20 15:22:02,117 - session_2017-10-20T15_21_51_0 - INFO - hypotheses reranking had no effect
2017-10-20 15:22:02,117 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 15:22:02,121 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 15:22:02,121 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 15:22:02,125 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 15:22:02,126 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 15:22:02,126 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 15:22:02,128 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:02,128 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 15:22:02,128 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - INFO - BEGIN integrate_moves
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 15:22:02,132 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
2017-10-20 15:22:02,133 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:22:02,136 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-20 15:22:02,136 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 15:22:02,136 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:02,140 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 15:22:02,141 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 15:22:02,141 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:02,145 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 15:22:02,145 - session_2017-10-20T15_21_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 15:22:02,145 - session_2017-10-20T15_21_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 15:22:02,145 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:02,145 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:22:02,145 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:02,145 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:accommodate
2017-10-20 15:22:02,145 - session_2017-10-20T15_21_51_0 - INFO - breaking out of accommodate
2017-10-20 15:22:02,146 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:02,146 - session_2017-10-20T15_21_51_0 - INFO - END integrate_moves
2017-10-20 15:22:02,146 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:02,146 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:02,146 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 15:22:02,149 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 15:22:02,149 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:02,149 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:02,150 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:02,150 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:02,150 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 15:22:02,150 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None)
2017-10-20 15:22:02,151 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:22:02,151 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: select
2017-10-20 15:22:02,152 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505722.11
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:22:02,152 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 15:22:02,156 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 15:22:02,157 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:22:02,159 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 15:22:02,160 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:22:02,163 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 15:22:02,163 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:22:02,163 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:22:02,167 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-20 15:22:02,167 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:22:02,170 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 15:22:02,170 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:22:02,170 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:22:02,170 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 15:22:02,172 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:02,173 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 15:22:02,173 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:set_timeout
2017-10-20 15:22:02,175 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:02,175 - session_2017-10-20T15_21_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 15:22:02,176 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 15:22:02,176 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None))
2017-10-20 15:22:02,176 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to hell, sender=DmeModule, reason=None)
2017-10-20 15:22:02,176 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to hell", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 15:22:02,177 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:02,177 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 15:22:02,177 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:22:02,177 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 15:22:02,178 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:02,178 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None)))
2017-10-20 15:22:02,179 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}, sender=TurnManager, reason=None))
2017-10-20 15:22:02,179 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 15:22:02,179 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:02,179 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:02,181 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:02,181 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 15:22:02,181 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 15:22:02,181 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 15:22:02,181 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 15:22:02,181 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 15:22:02,181 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 15:22:02,181 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-20 15:22:02,182 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-20 15:22:02,182 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 15:22:02,182 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 15:22:02,182 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 15:22:02,183 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-20 15:22:02,183 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 15:22:02,185 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:02,188 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:02,188 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 15:22:02,189 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-20 15:22:02,189 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-20 15:22:02,189 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-20 15:22:02,190 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 15:22:02,190 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 15:22:02,190 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 15:22:02,190 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-20 15:22:02,191 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend generated message []
2017-10-20 15:22:02,191 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 15:22:02,191 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend posted event
2017-10-20 15:22:02,191 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-20 15:22:02,191 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-20 15:22:02,192 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 15:22:02,192 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:02,193 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 15:22:02,193 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 15:22:02,193 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 15:22:02,194 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:02,194 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:22:02,197 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 15:22:02,198 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:22:02,198 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-20 15:22:02,198 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-20 15:22:02,198 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 15:22:02,198 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 15:22:02,198 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 15:22:02,199 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-20 15:22:02,199 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-20 15:22:02,200 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505722.2
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to hell
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:22:02,200 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:22:02,201 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 15:22:02,201 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 15:22:02,206 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 15:22:02,206 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 15:22:02,206 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 15:22:02,209 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:02,209 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 15:22:02,209 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 15:22:02,209 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 15:22:02,209 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 15:22:02,209 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 15:22:02,209 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 15:22:02,210 - session_2017-10-20T15_21_51_0 - INFO - BEGIN integrate_moves
2017-10-20 15:22:02,210 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 15:22:02,210 - session_2017-10-20T15_21_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 15:22:02,210 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 15:22:02,210 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:22:02,214 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 15:22:02,214 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 15:22:02,215 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:02,215 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 15:22:02,215 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:02,215 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:22:02,219 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 15:22:02,219 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 15:22:02,219 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:02,219 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 15:22:02,219 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:02,219 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:22:02,222 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-20 15:22:02,223 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 15:22:02,223 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:02,223 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 15:22:02,223 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:02,223 - session_2017-10-20T15_21_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 15:22:02,223 - session_2017-10-20T15_21_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 15:22:02,223 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:02,223 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:accommodate
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - INFO - breaking out of accommodate
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - INFO - END integrate_moves
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 15:22:02,224 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:02,225 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:02,225 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:02,225 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:02,225 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 15:22:02,228 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:02,228 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:22:02,228 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 15:22:02,228 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 15:22:02,228 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:22:02,228 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 15:22:02,229 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:02,229 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 15:22:02,229 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 15:22:02,229 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 15:22:02,229 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:22:10,683 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 15:22:10,683 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:22:10,684 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-20 15:22:10,684 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 15:22:10,684 - session_2017-10-20T15_21_51_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 15:22:10,684 - session_2017-10-20T15_21_51_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 15:22:10,684 - session_2017-10-20T15_21_51_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 15:22:10,686 - session_2017-10-20T15_21_51_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 15:22:10,686 - session_2017-10-20T15_21_51_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-20 15:22:10,686 - session_2017-10-20T15_21_51_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-20 15:22:10,686 - session_2017-10-20T15_21_51_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 15:22:10,687 - session_2017-10-20T15_21_51_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 15:22:10,687 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-20 15:22:10,687 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-20 15:22:10,687 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-20 15:22:10,687 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 15:22:10,687 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 15:22:10,687 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 15:22:10,688 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:10,688 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 15:22:10,688 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 15:22:10,689 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 15:22:10,689 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-20 15:22:10,689 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 15:22:10,691 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505730.69
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:22:10,691 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:22:10,694 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-20 15:22:10,695 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:22:10,699 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-20 15:22:10,705 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-20 15:22:10,705 - session_2017-10-20T15_21_51_0 - INFO - hypotheses reranking had no effect
2017-10-20 15:22:10,706 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 15:22:10,710 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-20 15:22:10,710 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 15:22:10,717 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to hell')}
-- END TIS changes --
2017-10-20 15:22:10,717 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 15:22:10,717 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 15:22:10,720 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:10,720 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 15:22:10,720 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 15:22:10,726 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-20 15:22:10,726 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 15:22:10,726 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 15:22:10,726 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 15:22:10,727 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 15:22:10,727 - session_2017-10-20T15_21_51_0 - INFO - BEGIN integrate_moves
2017-10-20 15:22:10,727 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 15:22:10,727 - session_2017-10-20T15_21_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 15:22:10,727 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-20 15:22:10,727 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:22:10,731 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 15:22:10,731 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 15:22:10,731 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:10,734 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 15:22:10,735 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:accommodate
2017-10-20 15:22:10,738 - session_2017-10-20T15_21_51_0 - INFO - breaking out of accommodate
2017-10-20 15:22:10,739 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:10,739 - session_2017-10-20T15_21_51_0 - INFO - END integrate_moves
2017-10-20 15:22:10,739 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:10,742 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-20 15:22:10,742 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:10,742 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:10,745 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 15:22:10,745 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:10,745 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:10,745 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:10,746 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 15:22:10,748 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-20 15:22:10,748 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:10,748 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:10,749 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:10,749 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:10,749 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 15:22:10,749 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 15:22:10,749 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 15:22:10,749 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 15:22:10,749 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: select
2017-10-20 15:22:10,750 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505730.69
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:22:10,750 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 15:22:10,754 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-20 15:22:10,754 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:22:10,757 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-20 15:22:10,757 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:22:10,760 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-20 15:22:10,760 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:22:10,763 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 15:22:10,763 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:22:10,763 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:22:10,763 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 15:22:10,765 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:10,765 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 15:22:10,765 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:set_timeout
2017-10-20 15:22:10,768 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-20 15:22:10,768 - session_2017-10-20T15_21_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-20 15:22:10,769 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 15:22:10,769 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-20 15:22:10,769 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 15:22:10,769 - session_2017-10-20T15_21_51_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-20 15:22:10,769 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-20 15:22:10,769 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-20 15:22:10,769 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-20 15:22:10,770 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:10,770 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 15:22:10,770 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 15:22:10,770 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 15:22:10,771 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:10,771 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-20 15:22:10,772 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-20 15:22:10,772 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 15:22:10,772 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:10,773 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:10,774 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:10,774 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={go_to_step(" Step one: Chop onions and garlic.")})
2017-10-20 15:22:10,774 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 15:22:10,774 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 15:22:10,775 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok.'
2017-10-20 15:22:10,775 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok.], sender=GenerateModule, reason=None)
2017-10-20 15:22:10,776 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:10,777 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 15:22:10,778 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:22:10,778 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 15:22:10,779 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-20 15:22:10,779 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={go_to_step(" Step one: Chop onions and garlic.")})
2017-10-20 15:22:10,780 - session_2017-10-20T15_21_51_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-20 15:22:10,781 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7fafb4141ef0>]
2017-10-20 15:22:10,782 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fafb4141ef0>], sender=GuiBackend, reason=None)
2017-10-20 15:22:10,782 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend posted event
2017-10-20 15:22:10,782 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok.], sender=GenerateModule, reason=None))
2017-10-20 15:22:10,782 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok.], sender=GenerateModule, reason=None)
2017-10-20 15:22:10,783 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 15:22:10,783 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:10,783 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok.}, sender=IndependentGuiBackend, reason=None))
2017-10-20 15:22:10,784 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok.}, sender=IndependentGuiBackend, reason=None)
2017-10-20 15:22:10,784 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-20 15:22:10,784 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:10,784 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fafb4141ef0>], sender=GuiBackend, reason=None))
2017-10-20 15:22:10,785 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7fafb4141ef0>], sender=GuiBackend, reason=None)
2017-10-20 15:22:10,785 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 15:22:10,786 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:10,786 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:22:10,789 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 15:22:10,789 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:22:10,789 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok.], sender=TextOutputComponent, reason=None))
2017-10-20 15:22:10,790 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok.], sender=TextOutputComponent, reason=None)
2017-10-20 15:22:10,790 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 15:22:10,790 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok.], sender=TurnManager, reason=None)
2017-10-20 15:22:10,791 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok.], sender=TurnManager, reason=None)
2017-10-20 15:22:10,791 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok.], sender=TurnManager, reason=None)
2017-10-20 15:22:10,791 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok.], sender=TurnManager, reason=None))
2017-10-20 15:22:10,793 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505730.79
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:22:10,793 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:22:10,793 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 15:22:10,793 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 15:22:10,800 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 15:22:10,800 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 15:22:10,800 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 15:22:10,802 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - INFO - BEGIN integrate_moves
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 15:22:10,803 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:22:10,807 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-20 15:22:10,807 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 15:22:10,807 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:10,810 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {go_to_step(" Step one: Chop onions and garlic."), resolved(?X.go_to_step(X))}
?                                                                  ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-20 15:22:10,810 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 15:22:10,810 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:10,810 - session_2017-10-20T15_21_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 15:22:10,810 - session_2017-10-20T15_21_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 15:22:10,810 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:10,810 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:22:10,811 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:10,811 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:accommodate
2017-10-20 15:22:10,811 - session_2017-10-20T15_21_51_0 - INFO - breaking out of accommodate
2017-10-20 15:22:10,811 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:10,811 - session_2017-10-20T15_21_51_0 - INFO - END integrate_moves
2017-10-20 15:22:10,811 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:10,812 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:10,812 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 15:22:10,812 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:10,812 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:10,812 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:10,812 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:10,812 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 15:22:10,816 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-20 15:22:10,816 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 15:22:10,816 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok.], latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 15:22:10,816 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-20 15:22:10,816 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-20 15:22:10,816 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 15:22:10,817 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:22:10,817 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok.], latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-20 15:22:10,818 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok.], latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 15:22:10,818 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok.], latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-20 15:22:10,819 - session_2017-10-20T15_21_51_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7fafb413b1b8>:1.0
2017-10-20 15:22:10,819 - session_2017-10-20T15_21_51_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 15:22:11,819 - session_2017-10-20T15_21_51_0 - DEBUG - Timeout fired
2017-10-20 15:22:11,819 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 15:22:11,819 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 15:22:11,819 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-20 15:22:11,820 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 15:22:11,821 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505731.82
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step(" Step one: Chop onions and garlic."), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:22:11,821 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:filterReadings
2017-10-20 15:22:11,821 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 15:22:11,823 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-20 15:22:11,823 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 15:22:11,828 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-20 15:22:11,828 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 15:22:11,828 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - INFO - BEGIN integrate_moves
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 15:22:11,831 - session_2017-10-20T15_21_51_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:integrate
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:accommodate
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - INFO - breaking out of accommodate
2017-10-20 15:22:11,832 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_reject
2017-10-20 15:22:11,833 - session_2017-10-20T15_21_51_0 - INFO - END integrate_moves
2017-10-20 15:22:11,833 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:11,835 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 15:22:11,836 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:11,836 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:11,839 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step(" Step one: Chop onions and garlic."), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-20 15:22:11,839 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:11,839 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:11,839 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:11,839 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 15:22:11,839 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 15:22:11,840 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:exec_plan
2017-10-20 15:22:11,840 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:load_plan
2017-10-20 15:22:11,840 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 15:22:11,840 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 15:22:11,840 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:22:11,840 - session_2017-10-20T15_21_51_0 - INFO - running ISU module: select
2017-10-20 15:22:11,841 - session_2017-10-20T15_21_51_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7fafb4c03e50>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7fafb411a690>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508505731.82
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 15:22:11,841 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 15:22:11,845 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step(" Step one: Chop onions and garlic.")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 15:22:11,845 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_action
2017-10-20 15:22:11,848 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-20 15:22:11,848 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:22:11,850 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 15:22:11,850 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:22:11,853 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 15:22:11,853 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_icm
2017-10-20 15:22:11,853 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:select_move
2017-10-20 15:22:11,853 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 15:22:11,856 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 15:22:11,856 - session_2017-10-20T15_21_51_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 15:22:11,856 - session_2017-10-20T15_21_51_0 - DEBUG - rulegroup:set_timeout
2017-10-20 15:22:11,858 - session_2017-10-20T15_21_51_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-20 15:22:11,859 - session_2017-10-20T15_21_51_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 15:22:11,859 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 15:25:18,918 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 15:25:18,918 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-20 15:25:18,918 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-20 15:25:18,919 - session_2017-10-20T15_21_51_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 15:25:18,919 - session_2017-10-20T15_21_51_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 15:25:18,919 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 15:25:18,920 - session_2017-10-20T15_21_51_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 15:25:18,920 - session_2017-10-20T15_21_51_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 15:25:18,920 - session_2017-10-20T15_21_51_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 15:25:18,920 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 15:25:18,920 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 15:25:18,921 - session_2017-10-20T15_21_51_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 15:25:18,922 - session_2017-10-20T15_21_51_0 - DEBUG - Sent.
2017-10-20 15:25:18,922 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-20 15:25:18,922 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-20 15:25:18,923 - session_2017-10-20T15_21_51_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 15:25:18,923 - session_2017-10-20T15_21_51_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:25:18,923 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:25:18,924 - session_2017-10-20T15_21_51_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:25:18,925 - session_2017-10-20T15_21_51_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-20 15:25:18,926 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-20 15:25:18,927 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-20 15:25:18,927 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-20 15:25:18,927 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-20 15:25:18,927 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-20 15:25:18,927 - session_2017-10-20T15_21_51_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-20 15:25:18,927 - session_2017-10-20T15_21_51_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
