2017-10-24 12:14:58,078 - session_2017-10-24T12_14_58_0 - DEBUG - Backend()
2017-10-24 12:14:58,078 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.initialize()
2017-10-24 12:14:58,107 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f292eaf6f10>>, False])
2017-10-24 12:14:58,107 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f292eaf6f10>>, 'eng'])
2017-10-24 12:14:58,107 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 12:14:58,107 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 12:14:58,107 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 12:14:58,107 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f292eaf6f10>>, True, 'disabled'])
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f292eaf6f10>>])
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f292eaf6f10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f292eaf6f10>>, 'eng', False, True])
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - Backend initialized
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - Backend uses language 'eng'
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - running module InterpretModule
2017-10-24 12:14:58,108 - session_2017-10-24T12_14_58_0 - DEBUG - running module DmeModule
2017-10-24 12:14:58,110 - session_2017-10-24T12_14_58_0 - DEBUG - running module DeviceManager
2017-10-24 12:14:58,110 - session_2017-10-24T12_14_58_0 - DEBUG - running module GenerateModule
2017-10-24 12:14:58,110 - session_2017-10-24T12_14_58_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 12:14:58,110 - session_2017-10-24T12_14_58_0 - DEBUG - running module GuiBackend
2017-10-24 12:14:58,110 - session_2017-10-24T12_14_58_0 - DEBUG - running module CogloadModule
2017-10-24 12:14:58,111 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:14:58,111 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:14:58,111 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 12:14:58,112 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 12:14:58,112 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 12:14:58,112 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:14:58,112 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:14:58,146 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 12:14:58,146 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:14:58,146 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 12:14:58,148 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,148 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 12:14:58,148 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 12:14:58,148 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 12:14:58,149 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:14:58,149 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:14:58,151 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 12:14:58,152 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:14:58,152 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:14:58,152 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,152 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,152 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,152 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:14:58,152 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:14:58,153 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840098.15
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:14:58,154 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:14:58,154 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:14:58,154 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:14:58,157 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:14:58,157 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:14:58,157 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:14:58,159 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:14:58,159 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:14:58,159 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:14:58,159 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:14:58,159 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:14:58,160 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:14:58,161 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:14:58,161 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:14:58,161 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:14:58,161 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:14:58,161 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:14:58,161 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:14:58,161 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:14:58,164 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:14:58,164 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:14:58,166 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:14:58,166 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:14:58,166 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:14:58,166 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:14:58,167 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:14:58,167 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:14:58,167 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:14:58,167 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:14:58,167 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:14:58,167 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:14:58,167 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:14:58,167 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:14:58,168 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840098.15
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:14:58,168 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:14:58,172 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:14:58,173 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:14:58,175 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:14:58,175 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:14:58,177 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:14:58,177 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:14:58,180 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:14:58,180 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:14:58,180 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:14:58,180 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:14:58,182 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:14:58,182 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:14:58,182 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:14:58,184 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 12:14:58,185 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:14:58,185 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:14:58,185 - session_2017-10-24T12_14_58_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,185 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,185 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,185 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,185 - session_2017-10-24T12_14_58_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:14:58,186 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 12:14:58,186 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:14:58,186 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:14:58,186 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:14:58,186 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 12:14:58,186 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:14:58,187 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:14:58,187 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:14:58,187 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:14:58,188 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:14:58,188 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 12:14:58,189 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:14:58,190 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:14:58,191 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:14:58,191 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:14:58,192 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:14:58,192 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 12:14:58,192 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:14:58,192 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:14:58,193 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:14:58,193 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 12:14:58,193 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 12:14:58,193 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:14:58,194 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:14:58,194 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:14:58,195 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:14:58,196 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:14:58,196 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:14:58,196 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:14:58,196 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 12:14:58,197 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:14:58,197 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:14:58,197 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:14:58,197 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message []
2017-10-24 12:14:58,197 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:14:58,197 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:14:58,197 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:14:58,198 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:14:58,198 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:14:58,198 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:14:58,199 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 12:14:58,199 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:14:58,199 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:14:58,200 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:14:58,200 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:14:58,259 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:14:58,259 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:14:58,259 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:14:58,260 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:14:58,260 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:14:58,260 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:14:58,260 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:14:58,260 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:14:58,260 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:14:58,262 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840098.26
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:14:58,262 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:14:58,262 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:14:58,262 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:14:58,265 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 12:14:58,265 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:14:58,265 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:14:58,268 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:14:58,268 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:14:58,269 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:14:58,273 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:14:58,273 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:14:58,273 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:14:58,273 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:14:58,273 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:14:58,273 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:14:58,276 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:14:58,276 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:14:58,276 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:14:58,276 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:14:58,276 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:14:58,276 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:14:58,277 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:14:58,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:14:58,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:14:58,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:14:58,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:14:58,278 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:14:58,278 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:14:58,278 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:14:58,278 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:14:58,278 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:14:58,278 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:14:58,278 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:14:58,278 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:14:58,279 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:14:58,279 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:14:58,279 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:14:58,281 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:14:58,281 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:14:58,281 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:14:58,281 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:14:58,281 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:14:58,281 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:14:58,282 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:14:58,282 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:14:58,283 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:14:58,283 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:14:58,283 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:02,966 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:15:02,966 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:02,966 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 12:15:02,966 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:02,966 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:02,966 - session_2017-10-24T12_14_58_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:15:02,967 - session_2017-10-24T12_14_58_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:15:02,972 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:15:02,972 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 12:15:02,972 - session_2017-10-24T12_14_58_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 12:15:02,972 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:15:02,973 - session_2017-10-24T12_14_58_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:15:02,973 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:02,973 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:15:02,973 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:15:02,973 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:15:02,974 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:15:02,974 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 12:15:02,974 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:02,974 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 12:15:02,975 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:02,976 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:02,976 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:02,976 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:02,977 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840102.98
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:02,978 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:02,981 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 12:15:02,981 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:02,985 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 12:15:02,985 - session_2017-10-24T12_14_58_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:15:02,985 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:02,989 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 12:15:02,989 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:02,994 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:15:02,994 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:02,994 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:02,996 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:02,996 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:02,996 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:03,000 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 12:15:03,000 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:03,000 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:03,000 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:03,000 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:03,000 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:03,001 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 12:15:03,001 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:03,001 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 12:15:03,001 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:03,004 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:03,004 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:03,004 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:03,007 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 12:15:03,007 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:03,007 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:03,011 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 12:15:03,011 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:03,012 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:03,012 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:03,012 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:03,013 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:03,013 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:03,013 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:03,013 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:03,014 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:03,014 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:03,014 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:03,014 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:03,017 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:15:03,017 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:03,018 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:03,018 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:03,018 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:03,018 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:03,018 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 12:15:03,019 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:03,019 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:15:03,020 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840102.98
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:03,020 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:15:03,026 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 12:15:03,026 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:03,029 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:03,029 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:03,032 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 12:15:03,032 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:03,033 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:03,037 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 12:15:03,037 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:03,040 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:03,040 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:03,040 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:03,040 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:15:03,042 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:03,043 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:15:03,043 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:15:03,045 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:03,045 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 12:15:03,046 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:03,046 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 12:15:03,046 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 12:15:03,046 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:15:03,046 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:03,047 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:15:03,047 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:03,047 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:03,048 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:03,048 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:15:03,049 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:03,049 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:15:03,049 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:03,049 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:03,051 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:03,051 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 12:15:03,051 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:15:03,051 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 12:15:03,051 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:15:03,051 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:15:03,051 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:03,052 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 12:15:03,052 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 12:15:03,052 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 12:15:03,052 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 12:15:03,052 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:03,053 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 12:15:03,054 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 12:15:03,057 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:03,059 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:03,060 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:15:03,060 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 12:15:03,060 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 12:15:03,060 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:15:03,060 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 12:15:03,061 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:15:03,061 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:15:03,061 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:03,061 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message []
2017-10-24 12:15:03,061 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:15:03,062 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:15:03,062 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 12:15:03,062 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 12:15:03,062 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:15:03,063 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:03,063 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 12:15:03,064 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:15:03,064 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:15:03,065 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:03,066 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:03,071 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:15:03,071 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:03,071 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 12:15:03,071 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 12:15:03,071 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:15:03,071 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 12:15:03,072 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 12:15:03,072 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 12:15:03,072 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 12:15:03,074 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840103.07
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:03,074 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:03,074 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:03,074 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:03,080 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:15:03,080 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:03,080 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:03,083 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:03,083 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:03,083 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:03,083 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:03,083 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:03,083 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:03,083 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:03,083 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:03,084 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:03,084 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:03,084 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:03,084 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:03,088 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:15:03,088 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:03,089 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:03,089 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:03,089 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:03,089 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:03,093 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:03,093 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:03,093 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:03,093 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:03,093 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:03,093 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:03,097 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 12:15:03,097 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:03,097 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:03,097 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:03,098 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:03,099 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:03,099 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:03,099 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:03,099 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:03,100 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:03,100 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:03,100 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:03,102 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:03,102 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:03,103 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:03,103 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:15:03,103 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:03,103 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:03,103 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:03,104 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:15:03,104 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:03,104 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:03,105 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:08,433 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 2.0, "utterance": "step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:15:08,434 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:08,434 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 2.0, utterance: step}], sender=TextInputComponent, reason=None))
2017-10-24 12:15:08,434 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 2.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:08,434 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 2.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:08,435 - session_2017-10-24T12_14_58_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 2.0, "utterance": "step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:15:08,435 - session_2017-10-24T12_14_58_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:15:08,436 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-24 12:15:08,436 - session_2017-10-24T12_14_58_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-24 12:15:08,436 - session_2017-10-24T12_14_58_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-24 12:15:08,436 - session_2017-10-24T12_14_58_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99856090546
2017-10-24 12:15:08,438 - session_2017-10-24T12_14_58_0 - DEBUG - robust grammatical interpretations: []
2017-10-24 12:15:08,440 - session_2017-10-24T12_14_58_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-24 12:15:08,440 - session_2017-10-24T12_14_58_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-24 12:15:08,440 - session_2017-10-24T12_14_58_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-24 12:15:08,440 - session_2017-10-24T12_14_58_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-24 12:15:08,440 - session_2017-10-24T12_14_58_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-24 12:15:08,440 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 12:15:08,440 - session_2017-10-24T12_14_58_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:15:08,440 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 2.0, utterance: step}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:08,441 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-24 12:15:08,441 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 12:15:08,441 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:15:08,441 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:15:08,441 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 12:15:08,441 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:08,442 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 12:15:08,442 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 12:15:08,442 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 12:15:08,442 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 12:15:08,442 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 12:15:08,444 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840108.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 2.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:08,444 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:08,444 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:08,447 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:08,447 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:08,451 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 12:15:08,451 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:08,451 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:08,455 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:08,456 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:08,456 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:08,456 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:08,456 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:08,456 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:08,457 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:08,458 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:08,458 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:08,458 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:08,458 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:08,458 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:08,458 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:08,459 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:08,459 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:08,462 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:15:08,462 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:08,462 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:08,463 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:08,463 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:08,463 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:08,463 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:08,463 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:15:08,464 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840108.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 2.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:08,464 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:15:08,470 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                             ++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:08,471 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:08,473 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: reraiseIssue
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 12:15:08,473 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:08,476 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-24 12:15:08,476 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:08,476 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:08,481 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise)])
?                                                                                          ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.step_to_choose(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, raise(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 12:15:08,481 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:08,484 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
?                                                                                                                +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, raise(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:08,484 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:08,484 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:08,484 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:15:08,486 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:08,487 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:15:08,487 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:15:08,489 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:08,490 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 12:15:08,490 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 12:15:08,491 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:15:08,491 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:08,491 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:08,492 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:08,492 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-24 12:15:08,493 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 12:15:08,493 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:15:08,494 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:08,494 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:08,497 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:08,499 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"step"), facts={})
2017-10-24 12:15:08,499 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"step")
2017-10-24 12:15:08,499 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 12:15:08,499 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 12:15:08,500 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={})
2017-10-24 12:15:08,500 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-24 12:15:08,500 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:15:08,500 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:08,500 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"step")
2017-10-24 12:15:08,501 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"step") generated as u'I heard you say step.'
2017-10-24 12:15:08,501 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-24 12:15:08,501 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-24 12:15:08,501 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise)
2017-10-24 12:15:08,502 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise) generated as u'So,'
2017-10-24 12:15:08,502 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:08,502 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 12:15:08,502 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step., I don't understand., So,, Which step?], sender=GenerateModule, reason=None)
2017-10-24 12:15:08,505 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:08,507 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:08,507 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:15:08,507 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 12:15:08,507 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"step"), facts={})
2017-10-24 12:15:08,508 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"step")
2017-10-24 12:15:08,508 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 12:15:08,508 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 12:15:08,508 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={})
2017-10-24 12:15:08,508 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-24 12:15:08,508 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:15:08,508 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:08,509 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message []
2017-10-24 12:15:08,509 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:15:08,509 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:15:08,509 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step., I don't understand., So,, Which step?], sender=GenerateModule, reason=None))
2017-10-24 12:15:08,509 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say step., I don't understand., So,, Which step?], sender=GenerateModule, reason=None)
2017-10-24 12:15:08,509 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say step.", "I don't understand.", "So,", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:15:08,510 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:08,511 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 12:15:08,511 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:15:08,511 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:15:08,512 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:08,512 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:08,520 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say step.", "I don't understand.", "So,", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:15:08,520 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:08,521 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say step., I don't understand., So,, Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 12:15:08,521 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say step., I don't understand., So,, Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 12:15:08,521 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:15:08,521 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say step., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-24 12:15:08,522 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say step., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-24 12:15:08,522 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say step., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
2017-10-24 12:15:08,522 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say step., I don't understand., So,, Which step?], sender=TurnManager, reason=None))
2017-10-24 12:15:08,523 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840108.52
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say step., I don't understand., So,, Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step
tis.repeat_questions: False
tis.score: 2.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:08,523 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:08,523 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:08,524 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:08,527 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
- tis.sys_turns: 0
?                ^
+ tis.sys_turns: 1
?                ^
-- END TIS changes --
2017-10-24 12:15:08,527 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:08,527 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:08,530 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:08,530 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:08,530 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:08,530 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:08,530 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:08,530 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:08,530 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:08,531 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:08,531 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:08,531 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:08,531 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:08,531 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:08,534 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                                         ^^^ ^^^^^^^^^^                                       ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                                         ^^^ ^^^
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:15:08,534 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:08,534 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:08,535 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:08,535 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:08,535 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:08,540 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                              ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:08,540 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:08,540 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:08,541 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:08,541 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:08,541 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:08,545 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
?                                                                                                                            ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:08,545 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:08,545 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:08,545 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:08,545 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:08,546 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:08,549 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 12:15:08,549 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:08,549 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:08,549 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:08,550 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:08,551 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:08,551 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:08,551 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:08,552 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:08,552 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:08,552 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:08,552 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:08,555 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:08,555 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:08,555 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say step., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:08,555 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:15:08,555 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:08,555 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:08,556 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:08,556 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say step., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:15:08,556 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say step., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:08,557 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say step., I don't understand., So,, Which step?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:08,557 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:12,263 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:15:12,264 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:12,264 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-24 12:15:12,264 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:12,264 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:12,264 - session_2017-10-24T12_14_58_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:15:12,264 - session_2017-10-24T12_14_58_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:15:12,266 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:15:12,266 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-24 12:15:12,267 - session_2017-10-24T12_14_58_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-24 12:15:12,267 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:15:12,267 - session_2017-10-24T12_14_58_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:15:12,268 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:12,268 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:15:12,268 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:15:12,268 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:15:12,268 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:15:12,268 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 12:15:12,269 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:12,269 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 12:15:12,269 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:12,270 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:12,271 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:12,271 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:12,272 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840112.27
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"step"), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:12,273 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:12,276 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-24 12:15:12,276 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:12,281 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-24 12:15:12,285 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-24 12:15:12,286 - session_2017-10-24T12_14_58_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:15:12,286 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:12,289 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 12:15:12,289 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:12,294 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
- tis.sys_turns: 1
?                ^
+ tis.sys_turns: 0
?                ^
-- END TIS changes --
2017-10-24 12:15:12,294 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:12,294 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:12,297 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:12,297 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:12,297 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:12,302 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 12:15:12,302 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:12,302 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:12,302 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:12,302 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:12,302 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:12,303 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 12:15:12,303 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:12,303 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 12:15:12,303 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:12,307 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 12:15:12,308 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:12,308 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:12,313 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 12:15:12,313 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:12,316 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 12:15:12,317 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:12,317 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:12,317 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:12,317 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:12,317 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:12,317 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:12,318 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:12,318 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:12,318 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:12,318 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:12,318 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:12,322 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose a step")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 12:15:12,322 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:12,322 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:12,325 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 12:15:12,325 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:12,325 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:12,325 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:12,325 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:12,328 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:15:12,328 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:12,328 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:12,328 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:12,329 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:12,329 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:12,329 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 12:15:12,329 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 12:15:12,329 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 12:15:12,329 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:15:12,331 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840112.27
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:12,331 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:15:12,336 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.tmp.sys.bel: {go_to_step("chose a step")}
- tis.private.tmp.sys.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                             ------------------------------------
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 12:15:12,336 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:12,339 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:12,339 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:12,343 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 12:15:12,343 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:12,346 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:12,346 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:12,346 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:12,346 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:15:12,350 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:12,351 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:15:12,351 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:15:12,353 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 12:15:12,354 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-24 12:15:12,354 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:12,354 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 12:15:12,354 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 12:15:12,354 - session_2017-10-24T12_14_58_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 12:15:12,354 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-24 12:15:12,355 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 12:15:12,355 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:15:12,356 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:12,356 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-24 12:15:12,356 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 12:15:12,357 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:12,358 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:12,358 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:15:12,359 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:12,359 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:15:12,359 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:12,359 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose a step")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:12,361 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:12,361 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-24 12:15:12,362 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 12:15:12,362 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 12:15:12,362 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp') generated as u'Ok chose a step.'
2017-10-24 12:15:12,363 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-24 12:15:12,364 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:12,365 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:15:12,366 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose a step")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose a step")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:12,366 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:15:12,366 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')])
2017-10-24 12:15:12,367 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp'), facts={go_to_step("chose a step")})
2017-10-24 12:15:12,367 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp')
2017-10-24 12:15:12,368 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f292c3efe18>]
2017-10-24 12:15:12,368 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f292c3efe18>], sender=GuiBackend, reason=None)
2017-10-24 12:15:12,368 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:15:12,368 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None))
2017-10-24 12:15:12,368 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose a step.], sender=GenerateModule, reason=None)
2017-10-24 12:15:12,368 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose a step."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:15:12,369 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:12,369 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:15:12,369 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose a step.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:15:12,369 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose a step."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:15:12,370 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:12,370 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f292c3efe18>], sender=GuiBackend, reason=None))
2017-10-24 12:15:12,371 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f292c3efe18>], sender=GuiBackend, reason=None)
2017-10-24 12:15:12,371 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose a step."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:15:12,371 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:12,372 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:12,388 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose a step."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:15:12,388 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:12,388 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None))
2017-10-24 12:15:12,389 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose a step.], sender=TextOutputComponent, reason=None)
2017-10-24 12:15:12,389 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:15:12,389 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 12:15:12,389 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 12:15:12,389 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
2017-10-24 12:15:12,389 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None))
2017-10-24 12:15:12,391 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840112.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose a step.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:12,391 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:12,391 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:12,391 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:12,398 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:per*pos:"step", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:15:12,398 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:12,398 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:12,401 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:12,402 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:12,403 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:12,405 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose a step")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:15:12,406 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:12,406 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:12,409 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose a step")}
+ tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
?                                            ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 12:15:12,409 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:12,409 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:12,410 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:12,410 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:12,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:12,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:12,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:12,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:12,410 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:12,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:12,411 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:12,411 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:12,411 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:12,411 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:12,411 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:12,411 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:12,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:12,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:12,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:12,414 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 12:15:12,414 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 12:15:12,415 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:15:12,415 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None))
2017-10-24 12:15:12,415 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose a step}], sender=DmeModule, reason=None)
2017-10-24 12:15:12,415 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose a step"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:12,416 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:12,416 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 12:15:12,417 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:15:12,417 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose a step.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:15:12,418 - session_2017-10-24T12_14_58_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f292c38b6c8>:1.0
2017-10-24 12:15:12,418 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:13,418 - session_2017-10-24T12_14_58_0 - DEBUG - Timeout fired
2017-10-24 12:15:13,418 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:15:13,418 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:15:13,419 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:15:13,419 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:15:13,420 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840113.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose a step")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose a step")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:13,420 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:13,421 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:13,423 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:13,423 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:13,427 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 12:15:13,427 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:13,427 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:13,429 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:13,430 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:13,430 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:13,430 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:13,430 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:13,430 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:13,431 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:13,432 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:13,432 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:13,432 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:13,432 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:13,435 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:15:13,435 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:13,435 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:13,439 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose a step")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose a step"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 12:15:13,439 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:13,439 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:13,440 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:13,440 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:13,440 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:13,440 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:13,440 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:13,440 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:13,441 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:13,441 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:13,441 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:15:13,442 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840113.42
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose a step")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:13,442 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:15:13,447 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose a step")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:13,448 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:13,450 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:13,450 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:13,452 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:15:13,453 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:13,456 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:13,456 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:13,456 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:13,456 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:15:13,458 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:13,458 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:15:13,458 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:15:13,461 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 12:15:13,461 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:15:13,461 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:15:48,089 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go back"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:15:48,089 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:48,090 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None))
2017-10-24 12:15:48,090 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:48,090 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:48,090 - session_2017-10-24T12_14_58_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go back"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:15:48,090 - session_2017-10-24T12_14_58_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:15:48,092 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:15:48,092 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])} for DDD 'recipehelp'
2017-10-24 12:15:48,092 - session_2017-10-24T12_14_58_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
2017-10-24 12:15:48,092 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:15:48,093 - session_2017-10-24T12_14_58_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go back"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go back", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_back"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go back", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:15:48,093 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go back}], sender=TextInputComponent, reason=None)
2017-10-24 12:15:48,093 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:15:48,093 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:48,093 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:48,094 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,095 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 12:15:48,095 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:15:48,095 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:15:48,096 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,096 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,097 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,097 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:15:48,097 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:15:48,098 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:15:48,098 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:48,098 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 12:15:48,098 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 12:15:48,098 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:48,099 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:15:48,099 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:15:48,100 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,101 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,101 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:15:48,101 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:15:48,102 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:15:48,102 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:15:48,102 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:15:48,102 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:15:48,103 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3c28c0>]
2017-10-24 12:15:48,103 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3c28c0>], sender=GuiBackend, reason=None)
2017-10-24 12:15:48,103 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:15:48,103 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:15:48,103 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:15:48,103 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:15:48,103 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:15:48,103 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 12:15:48,104 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,105 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:15:48,106 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:15:48,106 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:15:48,110 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,110 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3c28c0>], sender=GuiBackend, reason=None))
2017-10-24 12:15:48,110 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3c28c0>], sender=GuiBackend, reason=None)
2017-10-24 12:15:48,112 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:15:48,114 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,115 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:48,115 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:15:48,116 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:48,116 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:15:48,116 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:15:48,116 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:15:48,116 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:15:48,116 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:15:48,116 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:15:48,117 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:15:48,118 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840148.12
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:48,119 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:48,119 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:48,120 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:48,124 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose a step")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:15:48,125 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:48,125 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:48,129 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:48,130 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:48,130 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:48,130 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:48,134 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:15:48,134 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:48,134 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,135 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:48,135 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,135 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:48,138 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:15:48,138 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:48,138 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,138 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:48,139 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,139 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:48,139 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:48,139 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:48,139 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:48,139 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:48,139 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:48,140 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:48,140 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:48,140 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:48,140 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,140 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,140 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:48,140 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,140 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,141 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,141 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:48,141 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:48,143 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 12:15:48,143 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:48,143 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:48,144 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:15:48,144 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:48,144 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:48,144 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,144 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:15:48,145 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:48,145 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:15:48,145 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,145 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,146 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,146 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:48,147 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840148.15
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:48,147 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:48,151 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go back"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #]), OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
-- END TIS changes --
2017-10-24 12:15:48,151 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:48,155 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                            ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                            ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go back'), #])}
?                                                                                                                           ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
?                                                                                                                           ^
-- END TIS changes --
2017-10-24 12:15:48,156 - session_2017-10-24T12_14_58_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:15:48,156 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:48,160 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 12:15:48,160 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:48,167 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:15:48,167 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:48,168 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:48,171 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:48,171 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:48,172 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:48,177 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 12:15:48,177 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:48,178 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:48,178 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:48,178 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:48,178 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:48,178 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])
2017-10-24 12:15:48,178 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:48,178 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])
2017-10-24 12:15:48,178 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:48,182 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_back), findout(?X.goal(X))])
?                          +++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_back), resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
-- END TIS changes --
2017-10-24 12:15:48,182 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:48,182 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,185 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_back), resolve_user(?X.goal(X)), perform(top)])
?                                               --------------------------
+ tis.shared.goals: stackset([perform(go_back), perform(top)])
-- END TIS changes --
2017-10-24 12:15:48,185 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:48,186 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,188 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_back), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_back, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 12:15:48,188 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:48,189 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,193 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_back, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:15:48,193 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,194 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,194 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,194 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:48,197 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:15:48,197 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,197 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,197 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,197 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:48,197 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:48,198 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None)
2017-10-24 12:15:48,198 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:48,198 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:15:48,199 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840148.15
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_back), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:48,199 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:15:48,203 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_back), perform(top)])
?                                              ++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 12:15:48,203 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:48,207 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_back, [], True, None))])
-- END TIS changes --
2017-10-24 12:15:48,207 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:48,209 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:48,209 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:48,210 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:48,210 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:15:48,212 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:48,212 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:15:48,213 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:15:48,215 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 12:15:48,215 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 12:15:48,216 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:48,216 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None))
2017-10-24 12:15:48,216 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go back, sender=DmeModule, reason=None)
2017-10-24 12:15:48,216 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": "go back", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:15:48,216 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,216 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:15:48,217 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:48,217 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:48,218 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,218 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:15:48,219 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:15:48,219 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:15:48,219 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,219 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), top_perform_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,220 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,220 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 12:15:48,220 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:15:48,220 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 12:15:48,220 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:15:48,220 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 12:15:48,221 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 12:15:48,221 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:15:48,221 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp') generated as u'Went to the previous step'
2017-10-24 12:15:48,221 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None)
2017-10-24 12:15:48,222 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,223 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:15:48,224 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_back), device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_back), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,224 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:15:48,224 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 12:15:48,224 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 12:15:48,224 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:15:48,224 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)})
2017-10-24 12:15:48,224 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:15:48,225 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3c2488>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3c2560>]
2017-10-24 12:15:48,225 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3c2488>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3c2560>], sender=GuiBackend, reason=None)
2017-10-24 12:15:48,225 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:15:48,225 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None))
2017-10-24 12:15:48,226 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to the previous step], sender=GenerateModule, reason=None)
2017-10-24 12:15:48,226 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to the previous step"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:15:48,227 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,227 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:15:48,227 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to the previous step}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:15:48,227 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to the previous step"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:15:48,228 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,228 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3c2488>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3c2560>], sender=GuiBackend, reason=None))
2017-10-24 12:15:48,228 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3c2488>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3c2560>], sender=GuiBackend, reason=None)
2017-10-24 12:15:48,228 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_back", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to the previous step"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:15:48,229 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,229 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:48,246 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to the previous step"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:15:48,247 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:48,247 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to the previous step], sender=TextOutputComponent, reason=None))
2017-10-24 12:15:48,247 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to the previous step], sender=TextOutputComponent, reason=None)
2017-10-24 12:15:48,247 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:15:48,248 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 12:15:48,248 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 12:15:48,248 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
2017-10-24 12:15:48,248 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 12:15:48,249 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840148.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_back, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_back), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_back), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:48,249 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:48,250 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:48,250 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:48,256 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:15:48,256 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:48,256 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:48,259 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_back, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 12:15:48,259 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:48,259 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:48,259 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:48,260 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:48,260 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:48,260 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:48,260 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:48,260 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:48,260 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:48,260 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:48,261 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:48,264 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:15:48,264 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:48,264 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,264 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:48,264 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,265 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:48,267 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_back)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:15:48,267 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:48,268 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,271 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_back), perform(top)])
?                                     ------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^ ^^
+ tis.shared.previous_goal: perform(go_back)
?                           ^^^^ ^^^^^^^^^^^
-- END TIS changes --
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:48,272 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:48,273 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,276 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
?                          ^ ^^^^^ ^^^^^^                -
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^^^^^^ ^ ^
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:48,276 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,276 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,279 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
?                                                                                                        ++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:15:48,279 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,279 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,279 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,280 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:48,280 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,280 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,280 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,280 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:48,280 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:48,283 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 12:15:48,283 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:15:48,283 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:15:48,284 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840148.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_back), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:48,284 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:15:48,292 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_back, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None)}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
?                                                                                                                ++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
- tis.private.tmp.sys.goals: stackset([perform(go_back), perform(top)])
?                                       ------ ^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
-- END TIS changes --
2017-10-24 12:15:48,292 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:48,294 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                                                  +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:48,294 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:48,297 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 12:15:48,297 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:48,300 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:48,300 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:48,300 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:48,300 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:15:48,302 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:48,302 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:15:48,303 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:15:48,306 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:48,306 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 12:15:48,306 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 12:15:48,307 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:15:48,307 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:15:48,307 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:48,307 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,307 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None)))
2017-10-24 12:15:48,308 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to the previous step], sender=TurnManager, reason=None))
2017-10-24 12:15:48,308 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:15:48,309 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,309 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,310 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,310 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:15:48,311 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:15:48,311 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:15:48,311 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok  Step one: Chop onions and garlic..'
2017-10-24 12:15:48,311 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 12:15:48,312 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,313 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:15:48,315 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_back)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:15:48,315 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:15:48,315 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 12:15:48,315 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:15:48,315 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:15:48,316 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c38b950>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c38bea8>]
2017-10-24 12:15:48,316 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c38b950>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c38bea8>], sender=GuiBackend, reason=None)
2017-10-24 12:15:48,316 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:15:48,316 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None))
2017-10-24 12:15:48,316 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 12:15:48,317 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:15:48,317 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,317 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:15:48,317 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:15:48,317 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok  Step one: Chop onions and garlic.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:15:48,318 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,318 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c38b950>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c38bea8>], sender=GuiBackend, reason=None))
2017-10-24 12:15:48,318 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c38b950>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c38bea8>], sender=GuiBackend, reason=None)
2017-10-24 12:15:48,318 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok  Step one: Chop onions and garlic.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:15:48,319 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,319 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:48,360 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:15:48,360 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:15:48,360 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None))
2017-10-24 12:15:48,360 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None)
2017-10-24 12:15:48,360 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:15:48,360 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:15:48,360 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:15:48,361 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:15:48,361 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None))
2017-10-24 12:15:48,362 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840148.36
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_back)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:48,362 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:48,362 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:48,363 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:48,367 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_back), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go back')}
-- END TIS changes --
2017-10-24 12:15:48,368 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:48,368 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:48,370 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:48,371 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:15:48,372 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:48,375 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_back)}
+ tis.shared.com: {device_activity_terminated(go_back), say_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:15:48,375 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:15:48,375 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,379 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_back), say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {device_activity_terminated(go_back), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                                                     ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 12:15:48,379 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:15:48,379 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,379 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:48,379 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:48,379 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:48,380 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:48,380 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:48,380 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:48,380 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:48,380 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:48,380 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:48,380 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,381 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,381 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:48,381 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:48,381 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:48,381 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:48,381 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:48,381 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:48,384 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:48,384 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:15:48,384 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:15:48,384 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:15:48,384 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:15:48,385 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:15:48,385 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:15:48,386 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 12:15:48,387 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:15:48,387 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:15:48,387 - session_2017-10-24T12_14_58_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f292c3ec7a0>:1.0
2017-10-24 12:15:48,387 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:15:49,387 - session_2017-10-24T12_14_58_0 - DEBUG - Timeout fired
2017-10-24 12:15:49,388 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:15:49,388 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:15:49,388 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:15:49,389 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:15:49,390 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840149.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_back), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:49,390 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:15:49,390 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:15:49,392 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:49,392 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:15:49,397 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_back, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:15:49,397 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:15:49,397 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:15:49,400 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:49,400 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:15:49,401 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:15:49,402 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:15:49,402 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:49,402 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:49,403 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:49,403 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:15:49,403 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:15:49,403 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:15:49,403 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:15:49,403 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:49,406 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:15:49,406 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:49,406 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:49,409 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_back), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 12:15:49,409 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:49,409 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:49,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:49,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:15:49,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:15:49,410 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:15:49,411 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:15:49,411 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:15:49,411 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:15:49,411 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:15:49,411 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:15:49,412 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840149.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go back
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:15:49,412 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:15:49,416 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^ ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^^^^^^^^^^^^ ^^^^^ ^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_back), DeviceResultProposition(go_back, [], True, None), say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_back)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:49,417 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:15:49,419 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:15:49,419 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:49,422 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:15:49,422 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:49,424 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:15:49,425 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:15:49,425 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:15:49,425 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:15:49,427 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:15:49,427 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:15:49,427 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:15:49,429 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 12:15:49,429 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:15:49,430 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:13,767 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next "}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:16:13,767 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:13,768 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next }], sender=TextInputComponent, reason=None))
2017-10-24 12:16:13,768 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next }], sender=TextInputComponent, reason=None)
2017-10-24 12:16:13,768 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next }], sender=TextInputComponent, reason=None)
2017-10-24 12:16:13,768 - session_2017-10-24T12_14_58_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next "}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:16:13,769 - session_2017-10-24T12_14_58_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:16:13,770 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:16:13,770 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])} for DDD 'recipehelp'
2017-10-24 12:16:13,770 - session_2017-10-24T12_14_58_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}
2017-10-24 12:16:13,771 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:16:13,771 - session_2017-10-24T12_14_58_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next ", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next ", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:16:13,771 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next }], sender=TextInputComponent, reason=None)
2017-10-24 12:16:13,771 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:13,771 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:13,772 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:13,772 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,772 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 12:16:13,773 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:13,773 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:16:13,774 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,774 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,775 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,775 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:16:13,775 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:13,775 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:16:13,776 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:13,776 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:13,776 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 12:16:13,776 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:13,777 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:16:13,777 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:16:13,778 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,779 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,779 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:16:13,779 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:16:13,780 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:16:13,780 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:13,780 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:16:13,780 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:13,780 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c38be60>]
2017-10-24 12:16:13,780 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c38be60>], sender=GuiBackend, reason=None)
2017-10-24 12:16:13,780 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:16:13,781 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:16:13,781 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:16:13,781 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:16:13,781 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:16:13,781 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 12:16:13,782 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,782 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:16:13,782 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:16:13,783 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:16:13,783 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,784 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c38be60>], sender=GuiBackend, reason=None))
2017-10-24 12:16:13,784 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c38be60>], sender=GuiBackend, reason=None)
2017-10-24 12:16:13,784 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:16:13,785 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,785 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:13,826 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:16:13,826 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:13,826 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:16:13,826 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:16:13,826 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:16:13,826 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:13,826 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:13,827 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:13,827 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:16:13,828 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840173.83
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next 
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:13,828 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:13,828 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:13,828 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:13,832 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:16:13,832 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:13,833 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:13,835 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:13,836 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:13,836 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:13,840 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:16:13,840 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:13,840 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:13,840 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:13,841 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,841 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:13,844 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:16:13,844 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:13,844 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:13,844 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:13,844 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,844 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:13,844 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,845 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,846 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:13,846 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:13,846 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,846 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,846 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:13,846 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:13,849 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 12:16:13,849 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:13,849 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:13,849 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:13,850 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:13,850 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:13,850 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,850 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:16:13,851 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:13,851 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:13,851 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,852 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,853 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,853 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:13,854 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840173.85
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next 
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:13,854 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:13,857 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}
-- END TIS changes --
2017-10-24 12:16:13,857 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:13,861 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next '), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 12:16:13,862 - session_2017-10-24T12_14_58_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:16:13,862 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:13,867 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 12:16:13,868 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:13,874 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:16:13,874 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:13,875 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:13,878 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:13,878 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:13,878 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:13,881 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])
2017-10-24 12:16:13,882 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:13,887 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')}
-- END TIS changes --
2017-10-24 12:16:13,887 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:13,887 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:13,890 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 12:16:13,890 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:13,890 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,893 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 12:16:13,893 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:13,893 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:13,894 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:13,894 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:13,894 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:13,894 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:13,894 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:13,894 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:13,894 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:13,894 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,897 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:16:13,897 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,898 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,898 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,898 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:13,900 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:16:13,900 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:13,901 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,901 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,901 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:13,901 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:13,901 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next , sender=DmeModule, reason=None)
2017-10-24 12:16:13,901 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:13,901 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:16:13,902 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840173.85
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next 
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:13,902 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:16:13,906 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 12:16:13,906 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:13,909 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 12:16:13,909 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:13,912 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:13,912 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:13,912 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:13,912 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:16:13,915 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:13,915 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:16:13,915 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:16:13,917 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 12:16:13,917 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 12:16:13,918 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:13,918 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next , sender=DmeModule, reason=None))
2017-10-24 12:16:13,918 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next , sender=DmeModule, reason=None)
2017-10-24 12:16:13,918 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next ", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:16:13,919 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,919 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:13,919 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:13,920 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:13,920 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,920 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:16:13,921 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:13,921 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:16:13,921 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,922 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,923 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,923 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 12:16:13,923 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:16:13,923 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 12:16:13,923 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:16:13,923 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 12:16:13,924 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 12:16:13,924 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:16:13,924 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-24 12:16:13,924 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 12:16:13,925 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,926 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:13,927 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_back), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:13,927 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:16:13,927 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 12:16:13,927 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 12:16:13,927 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:16:13,928 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 12:16:13,928 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:16:13,928 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3c2d88>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3c2290>]
2017-10-24 12:16:13,928 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3c2d88>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3c2290>], sender=GuiBackend, reason=None)
2017-10-24 12:16:13,929 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:16:13,929 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-24 12:16:13,929 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 12:16:13,929 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:16:13,929 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,929 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:16:13,930 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:13,931 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:16:13,931 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,931 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3c2d88>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3c2290>], sender=GuiBackend, reason=None))
2017-10-24 12:16:13,931 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3c2d88>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3c2290>], sender=GuiBackend, reason=None)
2017-10-24 12:16:13,932 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:16:13,933 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:13,933 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:13,951 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:16:13,952 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:13,952 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-24 12:16:13,952 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-24 12:16:13,952 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:16:13,953 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 12:16:13,953 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 12:16:13,953 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 12:16:13,953 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 12:16:13,954 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840173.95
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next 
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_back)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:13,954 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:13,955 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:13,955 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:13,960 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:13,960 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:13,961 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:13,963 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 12:16:13,963 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:13,963 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:13,963 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:13,963 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:13,964 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:13,964 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:13,964 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:13,964 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:13,964 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:13,964 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:13,964 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:13,968 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:16:13,969 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:13,969 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:13,969 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:13,969 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,969 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:13,972 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:13,972 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:13,972 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:13,975 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: perform(go_back)
?                                      ^^^^
+ tis.shared.previous_goal: perform(go_to_next)
?                                      ^^^^^^^
-- END TIS changes --
2017-10-24 12:16:13,975 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:13,975 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,975 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:13,975 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:13,975 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:13,975 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:13,975 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:13,976 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:13,976 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:13,976 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:13,976 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:13,976 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,980 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
?                          ^ ^^^^^ ^^^^^^                -
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^^^^^^ ^ ^
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:16:13,980 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,980 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,983 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
?                                                                                                              +++++++++++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:16:13,984 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,984 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,984 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,984 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:13,984 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:13,984 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:13,985 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:13,985 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:13,985 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:13,987 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 12:16:13,987 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None)
2017-10-24 12:16:13,987 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:16:13,988 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840173.95
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next 
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:13,988 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:16:13,995 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
?                                                                                                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
-- END TIS changes --
2017-10-24 12:16:13,995 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:13,998 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                                                  +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:16:13,999 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:14,001 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 12:16:14,001 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:14,004 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("other example")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:14,004 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:14,004 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:14,004 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:16:14,006 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:14,006 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:16:14,006 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:16:14,009 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:14,009 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')])
2017-10-24 12:16:14,009 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 12:16:14,009 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None))
2017-10-24 12:16:14,010 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None)
2017-10-24 12:16:14,010 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "other example"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:14,010 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:14,011 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-24 12:16:14,012 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 12:16:14,012 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:16:14,012 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:14,012 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:14,014 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:14,014 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("other example")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")})
2017-10-24 12:16:14,014 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("other example")), ddd_name=u'recipehelp')
2017-10-24 12:16:14,014 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("other example")), ddd_name=u'recipehelp')
2017-10-24 12:16:14,014 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(answer(say_step("other example")), ddd_name=u'recipehelp') generated as u'Ok other example.'
2017-10-24 12:16:14,015 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok other example.], sender=GenerateModule, reason=None)
2017-10-24 12:16:14,016 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:14,017 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok other example.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:14,018 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("other example")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:14,018 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:16:14,018 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp')])
2017-10-24 12:16:14,018 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("other example")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")})
2017-10-24 12:16:14,018 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("other example")), ddd_name=u'recipehelp')
2017-10-24 12:16:14,019 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3ef7a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c406cf8>]
2017-10-24 12:16:14,020 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3ef7a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c406cf8>], sender=GuiBackend, reason=None)
2017-10-24 12:16:14,020 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:16:14,020 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok other example.], sender=GenerateModule, reason=None))
2017-10-24 12:16:14,020 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok other example.], sender=GenerateModule, reason=None)
2017-10-24 12:16:14,020 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok other example."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:16:14,021 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:14,021 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok other example.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:16:14,021 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok other example.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:14,021 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok other example."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:16:14,022 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:14,022 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3ef7a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c406cf8>], sender=GuiBackend, reason=None))
2017-10-24 12:16:14,022 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3ef7a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c406cf8>], sender=GuiBackend, reason=None)
2017-10-24 12:16:14,022 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok other example."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:16:14,023 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:14,023 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:14,067 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok other example."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:16:14,068 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:14,068 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok other example.], sender=TextOutputComponent, reason=None))
2017-10-24 12:16:14,068 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok other example.], sender=TextOutputComponent, reason=None)
2017-10-24 12:16:14,068 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:16:14,068 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None)
2017-10-24 12:16:14,068 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None)
2017-10-24 12:16:14,069 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None)
2017-10-24 12:16:14,069 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None))
2017-10-24 12:16:14,070 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840174.07
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok other example.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next '), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("other example")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next 
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:14,071 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:14,071 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:14,071 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:14,075 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next ')}
-- END TIS changes --
2017-10-24 12:16:14,075 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:14,075 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:14,078 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:14,078 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:14,079 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:14,082 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example")}
?                                                        +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:14,082 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:14,082 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example"), resolved(?X.say_step(X))}
?                                                                                   ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:14,086 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:14,087 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:14,087 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:14,087 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:14,087 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:14,087 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:14,088 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:14,088 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:14,088 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:14,088 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:14,088 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:14,090 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:14,090 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None)
2017-10-24 12:16:14,091 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok other example.], latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:14,091 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None))
2017-10-24 12:16:14,091 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: other example}], sender=DmeModule, reason=None)
2017-10-24 12:16:14,091 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "other example"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:14,092 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:14,092 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok other example.], latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 12:16:14,092 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok other example.], latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:14,093 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok other example.], latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:14,093 - session_2017-10-24T12_14_58_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f292c3ea758>:1.0
2017-10-24 12:16:14,093 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:15,093 - session_2017-10-24T12_14_58_0 - DEBUG - Timeout fired
2017-10-24 12:16:15,094 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:15,094 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:15,094 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:15,094 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:15,095 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840175.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("other example")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next 
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:15,095 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:15,095 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:15,098 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:15,098 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:15,102 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:15,102 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:15,102 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:15,105 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:15,105 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:15,105 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:15,105 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:15,106 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:15,107 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:15,107 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:15,107 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:15,107 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:15,107 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:15,107 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:15,110 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:16:15,110 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:15,110 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:15,113 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("other example"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 12:16:15,113 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:15,113 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:15,113 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:15,113 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:15,114 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:15,114 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:15,114 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:15,114 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:15,114 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:15,114 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:15,115 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:16:15,116 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840175.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next 
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:15,116 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:16:15,121 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^ ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^^^^^^^^^^^^ ^^^^^ ^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("other example")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:16:15,121 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:15,123 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:16:15,123 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:15,125 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:16:15,126 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:15,129 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:15,129 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:15,129 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:15,129 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:16:15,131 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:15,131 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:16:15,131 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:16:15,133 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 12:16:15,134 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:16:15,134 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:23,102 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:16:23,103 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:23,103 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 12:16:23,104 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 12:16:23,104 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 12:16:23,104 - session_2017-10-24T12_14_58_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:16:23,104 - session_2017-10-24T12_14_58_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:16:23,105 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:16:23,105 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 12:16:23,105 - session_2017-10-24T12_14_58_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 12:16:23,105 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:16:23,106 - session_2017-10-24T12_14_58_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:16:23,106 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 12:16:23,106 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:23,106 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:23,106 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:23,107 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,107 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 12:16:23,108 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:23,108 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:16:23,108 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,108 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,110 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,110 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:16:23,110 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:23,110 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:16:23,111 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:23,111 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:23,112 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 12:16:23,112 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:23,112 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:16:23,113 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:16:23,114 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,115 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,115 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:16:23,115 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:16:23,115 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:16:23,116 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:23,116 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:16:23,116 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:23,116 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3a6ab8>]
2017-10-24 12:16:23,116 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3a6ab8>], sender=GuiBackend, reason=None)
2017-10-24 12:16:23,116 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:16:23,116 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:16:23,117 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:16:23,117 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:16:23,117 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:16:23,117 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 12:16:23,118 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,118 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:16:23,118 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:16:23,119 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:16:23,120 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,120 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3a6ab8>], sender=GuiBackend, reason=None))
2017-10-24 12:16:23,120 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3a6ab8>], sender=GuiBackend, reason=None)
2017-10-24 12:16:23,121 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:16:23,122 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,122 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:23,124 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:16:23,124 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:23,125 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:16:23,125 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:16:23,125 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:16:23,125 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:23,125 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:23,125 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:23,126 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:16:23,127 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840183.13
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:23,127 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:23,127 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:23,127 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:23,131 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step("other example")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:16:23,131 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:23,131 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:23,134 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:23,134 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:23,134 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:23,134 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:23,135 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:23,135 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:23,135 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:23,135 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:23,135 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:23,135 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:23,135 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:23,135 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:23,138 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:16:23,139 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:23,139 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,139 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:23,139 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,139 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:23,142 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:16:23,142 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:23,142 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:23,143 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:23,144 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:23,144 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,144 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,144 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:23,144 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,144 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,145 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,145 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:23,145 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:23,147 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 12:16:23,148 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:23,148 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:23,148 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:23,148 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:23,148 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:23,149 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,149 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:16:23,150 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:23,150 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:23,150 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,150 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,151 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,151 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:23,152 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840183.15
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:23,152 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:23,156 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 12:16:23,156 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:23,161 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 12:16:23,161 - session_2017-10-24T12_14_58_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:16:23,162 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:23,167 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 12:16:23,168 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:23,174 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:16:23,174 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:23,174 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:23,177 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:23,177 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:23,177 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 12:16:23,180 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:23,185 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 12:16:23,185 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:23,185 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,187 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 12:16:23,188 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:23,188 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,190 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 12:16:23,190 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:23,190 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:23,191 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:23,191 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:23,191 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:23,191 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:23,191 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:23,191 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:23,191 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:23,191 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,194 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:16:23,195 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,195 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,195 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,195 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:23,198 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:16:23,198 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,198 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,198 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,198 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:23,198 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:23,199 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 12:16:23,199 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:23,199 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:16:23,200 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840183.15
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:23,200 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:16:23,203 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 12:16:23,204 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:23,207 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 12:16:23,207 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:23,209 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:23,209 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:23,209 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:23,210 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:16:23,212 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:23,212 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:16:23,212 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:16:23,215 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 12:16:23,215 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 12:16:23,215 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:23,216 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 12:16:23,216 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 12:16:23,216 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:16:23,216 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,216 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:23,217 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:23,217 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:23,218 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,218 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:16:23,218 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:23,219 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:16:23,219 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,219 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,220 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,221 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 12:16:23,221 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:16:23,221 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 12:16:23,221 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:16:23,221 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 12:16:23,221 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 12:16:23,222 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:16:23,222 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Went to next'
2017-10-24 12:16:23,222 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 12:16:23,223 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,224 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:23,225 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,225 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:16:23,226 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 12:16:23,226 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 12:16:23,226 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:16:23,226 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 12:16:23,226 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 12:16:23,227 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3ec7a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c4064d0>]
2017-10-24 12:16:23,227 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3ec7a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c4064d0>], sender=GuiBackend, reason=None)
2017-10-24 12:16:23,227 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:16:23,227 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None))
2017-10-24 12:16:23,227 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Went to next], sender=GenerateModule, reason=None)
2017-10-24 12:16:23,227 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Went to next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:16:23,228 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,228 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:16:23,228 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Went to next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:23,229 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Went to next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:16:23,229 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,229 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3ec7a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c4064d0>], sender=GuiBackend, reason=None))
2017-10-24 12:16:23,230 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3ec7a0>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c4064d0>], sender=GuiBackend, reason=None)
2017-10-24 12:16:23,230 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Went to next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:16:23,232 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,233 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:23,249 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Went to next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:16:23,250 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:23,251 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None))
2017-10-24 12:16:23,251 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Went to next], sender=TextOutputComponent, reason=None)
2017-10-24 12:16:23,251 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:16:23,251 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 12:16:23,252 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 12:16:23,252 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
2017-10-24 12:16:23,252 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 12:16:23,254 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840183.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:23,254 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:23,255 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:23,255 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:23,261 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:23,261 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:23,261 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:23,264 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:23,265 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:23,266 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:23,269 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:16:23,269 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:23,269 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,269 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:23,270 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,270 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:23,272 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:23,272 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:23,272 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,276 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 12:16:23,276 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:23,276 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,276 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:23,276 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:23,276 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:23,276 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:23,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:23,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:23,277 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:23,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:23,277 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:23,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,281 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
?                          ^ ^^^^^ ^^^^^^                -
+ tis.private.plan: Stack([device_query(?X.say_step(X))])
?                          ^^^^^^^^ ^ ^
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:16:23,281 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,281 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,284 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
?                                                                                                              +++++++++++++++++
- tis.private.plan: Stack([device_query(?X.say_step(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:16:23,284 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,284 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,284 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,285 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:23,285 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,285 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,285 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,285 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:23,285 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:23,288 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 12:16:23,288 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: lol}], sender=DmeModule, reason=None)
2017-10-24 12:16:23,288 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:16:23,289 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840183.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:23,289 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:16:23,296 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
?                                                                                                                      +++++++++++++++++
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
-- END TIS changes --
2017-10-24 12:16:23,296 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:23,299 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                                                  +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:16:23,299 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:23,301 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), respond(?X.say_step(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 12:16:23,301 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:23,304 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("lol")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:23,304 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:23,304 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:23,304 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:16:23,306 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:23,307 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:16:23,307 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:16:23,309 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:23,309 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')])
2017-10-24 12:16:23,309 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("lol")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 12:16:23,310 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: lol}], sender=DmeModule, reason=None))
2017-10-24 12:16:23,310 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: lol}], sender=DmeModule, reason=None)
2017-10-24 12:16:23,310 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "lol"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:23,310 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,311 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("lol")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None)))
2017-10-24 12:16:23,311 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("lol")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Went to next], sender=TurnManager, reason=None))
2017-10-24 12:16:23,311 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:16:23,312 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("lol")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,312 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("lol")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,314 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("lol")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,314 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("lol")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")})
2017-10-24 12:16:23,314 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("lol")), ddd_name=u'recipehelp')
2017-10-24 12:16:23,314 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("lol")), ddd_name=u'recipehelp')
2017-10-24 12:16:23,315 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(answer(say_step("lol")), ddd_name=u'recipehelp') generated as u'Ok lol.'
2017-10-24 12:16:23,315 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok lol.], sender=GenerateModule, reason=None)
2017-10-24 12:16:23,316 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("lol")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,318 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok lol.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:23,319 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("lol")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:23,319 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:16:23,319 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp')])
2017-10-24 12:16:23,319 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("lol")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")})
2017-10-24 12:16:23,319 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("lol")), ddd_name=u'recipehelp')
2017-10-24 12:16:23,320 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3eff38>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3ec680>]
2017-10-24 12:16:23,320 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3eff38>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3ec680>], sender=GuiBackend, reason=None)
2017-10-24 12:16:23,321 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:16:23,321 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok lol.], sender=GenerateModule, reason=None))
2017-10-24 12:16:23,321 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok lol.], sender=GenerateModule, reason=None)
2017-10-24 12:16:23,321 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok lol."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:16:23,321 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,322 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok lol.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:16:23,322 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok lol.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:23,322 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok lol."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:16:23,322 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,323 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3eff38>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3ec680>], sender=GuiBackend, reason=None))
2017-10-24 12:16:23,323 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3eff38>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c3ec680>], sender=GuiBackend, reason=None)
2017-10-24 12:16:23,323 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok lol."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:16:23,323 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,324 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:23,363 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok lol."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:16:23,363 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:23,364 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok lol.], sender=TextOutputComponent, reason=None))
2017-10-24 12:16:23,364 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok lol.], sender=TextOutputComponent, reason=None)
2017-10-24 12:16:23,364 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:16:23,365 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok lol.], sender=TurnManager, reason=None)
2017-10-24 12:16:23,365 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok lol.], sender=TurnManager, reason=None)
2017-10-24 12:16:23,365 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok lol.], sender=TurnManager, reason=None)
2017-10-24 12:16:23,366 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok lol.], sender=TurnManager, reason=None))
2017-10-24 12:16:23,367 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840183.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok lol.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("lol")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:23,367 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:23,367 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:23,367 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:23,372 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 12:16:23,372 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:23,372 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:23,375 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:23,375 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:23,375 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:23,375 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:23,375 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:23,375 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:23,376 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:23,376 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:23,376 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:23,376 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:23,376 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:23,376 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:23,380 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("lol")}
?                                                        +++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:23,380 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:23,380 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,385 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("lol")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("lol"), resolved(?X.say_step(X))}
?                                                                         ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 12:16:23,385 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:23,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,385 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:23,385 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:23,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:23,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:23,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:23,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:23,387 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:23,387 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:23,387 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:23,389 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:23,389 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: lol}], sender=DmeModule, reason=None)
2017-10-24 12:16:23,389 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok lol.], latest_moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:23,390 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: lol}], sender=DmeModule, reason=None))
2017-10-24 12:16:23,390 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: lol}], sender=DmeModule, reason=None)
2017-10-24 12:16:23,390 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "lol"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:23,390 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:23,390 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok lol.], latest_moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 12:16:23,391 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok lol.], latest_moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:23,391 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok lol.], latest_moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:23,392 - session_2017-10-24T12_14_58_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f292c3eff80>:1.0
2017-10-24 12:16:23,392 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:24,392 - session_2017-10-24T12_14_58_0 - DEBUG - Timeout fired
2017-10-24 12:16:24,393 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:24,393 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:24,393 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:24,393 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:24,394 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840184.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("lol")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(go_to_next), say_step("lol"), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:24,394 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:24,394 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:24,397 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:24,397 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:24,401 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:24,401 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:24,401 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:24,403 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:16:24,404 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:24,405 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:24,405 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:24,405 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:24,405 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:24,405 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:24,405 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:24,406 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:24,406 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:24,406 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:24,406 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:24,409 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:16:24,409 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:24,409 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:24,411 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("lol"), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 12:16:24,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:24,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:24,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:24,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:24,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:24,412 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:24,413 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:24,413 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:24,413 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:24,413 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:24,413 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:16:24,414 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840184.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:24,414 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:16:24,419 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^ ^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^^^^^^^^^^^^ ^^^^^ ^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("lol")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:16:24,419 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:24,422 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:16:24,422 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:24,424 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:16:24,424 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:24,427 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:24,427 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:24,427 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:24,427 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:16:24,429 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:24,429 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:16:24,429 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:16:24,431 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 12:16:24,432 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:16:24,432 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:29,191 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:16:29,192 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:29,192 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 12:16:29,192 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 12:16:29,192 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 12:16:29,192 - session_2017-10-24T12_14_58_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:16:29,192 - session_2017-10-24T12_14_58_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:16:29,193 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:16:29,194 - session_2017-10-24T12_14_58_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 12:16:29,194 - session_2017-10-24T12_14_58_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 12:16:29,194 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:16:29,194 - session_2017-10-24T12_14_58_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:16:29,194 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 12:16:29,195 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:29,195 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:29,195 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:29,195 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,196 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 12:16:29,196 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:29,196 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:16:29,196 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,197 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,198 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,198 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:16:29,198 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:29,198 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:16:29,198 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:29,198 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:29,199 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 12:16:29,199 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:29,199 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:16:29,199 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:16:29,200 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,202 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,202 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:16:29,202 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:16:29,202 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:16:29,202 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:16:29,202 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:16:29,202 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:16:29,203 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3efb00>]
2017-10-24 12:16:29,203 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3efb00>], sender=GuiBackend, reason=None)
2017-10-24 12:16:29,203 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:16:29,203 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:16:29,203 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:16:29,203 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:16:29,204 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:16:29,204 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 12:16:29,204 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,205 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:16:29,205 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:16:29,205 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:16:29,205 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,206 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3efb00>], sender=GuiBackend, reason=None))
2017-10-24 12:16:29,206 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f292c3efb00>], sender=GuiBackend, reason=None)
2017-10-24 12:16:29,206 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:16:29,207 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,207 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:29,224 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:16:29,225 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:29,225 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:16:29,225 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:16:29,225 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:16:29,225 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:29,226 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:29,226 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:16:29,226 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:16:29,227 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840189.23
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:29,227 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:29,228 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:29,228 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:29,231 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step("lol")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:16:29,231 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:29,232 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:29,234 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:29,234 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:29,234 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:29,234 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:29,234 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:29,234 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:29,235 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:29,235 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:29,235 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:29,235 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:29,235 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:29,235 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:29,239 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:16:29,239 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:29,239 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:29,239 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:29,239 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,239 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:29,243 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:16:29,243 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:29,243 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:29,244 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:29,245 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:29,245 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,245 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:29,245 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:29,245 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:29,245 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,246 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:29,246 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:29,248 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 12:16:29,248 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:29,248 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:29,248 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:29,248 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:29,249 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:29,249 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,249 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:16:29,250 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:29,250 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:16:29,250 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,251 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,251 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,251 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:29,252 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840189.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:29,253 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:29,256 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 12:16:29,256 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:29,262 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 12:16:29,262 - session_2017-10-24T12_14_58_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:16:29,262 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:29,268 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 12:16:29,268 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:29,274 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:16:29,275 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:29,275 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:29,277 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:29,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:29,277 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:29,281 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
2017-10-24 12:16:29,282 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:29,286 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 12:16:29,286 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:29,286 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:29,288 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 12:16:29,289 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:29,289 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:29,292 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:29,293 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:29,295 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:16:29,295 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,295 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:29,296 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,296 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:29,298 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:16:29,298 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:29,298 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:29,299 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,299 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:29,299 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:29,299 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 12:16:29,299 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:29,299 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:16:29,300 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840189.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:29,300 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:16:29,304 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                              +++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 12:16:29,304 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:29,307 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
-- END TIS changes --
2017-10-24 12:16:29,307 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:29,310 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:29,310 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:29,310 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:29,311 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:16:29,313 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:29,313 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:16:29,313 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:16:29,315 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 12:16:29,316 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 12:16:29,316 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:29,316 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 12:16:29,316 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 12:16:29,316 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:16:29,317 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,317 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:29,317 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:29,317 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:29,318 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,318 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:16:29,319 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:16:29,319 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:16:29,319 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,319 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,320 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,320 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)})
2017-10-24 12:16:29,320 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 12:16:29,321 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 12:16:29,321 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp') generated as u"I'm sorry, something went wrong."
2017-10-24 12:16:29,321 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 12:16:29,322 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,323 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:29,324 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)]), next_utterance: NextUtterance(moves=OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:16:29,324 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:16:29,324 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')])
2017-10-24 12:16:29,324 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)})
2017-10-24 12:16:29,324 - session_2017-10-24T12_14_58_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp')
2017-10-24 12:16:29,325 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3efc68>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c39a998>]
2017-10-24 12:16:29,325 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3efc68>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c39a998>], sender=GuiBackend, reason=None)
2017-10-24 12:16:29,325 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posted event
2017-10-24 12:16:29,326 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None))
2017-10-24 12:16:29,326 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I'm sorry, something went wrong.], sender=GenerateModule, reason=None)
2017-10-24 12:16:29,326 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I'm sorry, something went wrong."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:16:29,326 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,326 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:16:29,327 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: I'm sorry, something went wrong.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:16:29,327 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "I'm sorry, something went wrong."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:16:29,327 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,328 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3efc68>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c39a998>], sender=GuiBackend, reason=None))
2017-10-24 12:16:29,328 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f292c3efc68>, <tdm.tdm_gui_protocol.Popup instance at 0x7f292c39a998>], sender=GuiBackend, reason=None)
2017-10-24 12:16:29,328 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": false, "arguments": {}, "failure_reason": "undefined_failure"}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "I'm sorry, something went wrong."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:16:29,329 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,329 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:29,346 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend received event {"content": ["I'm sorry, something went wrong."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:16:29,347 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:16:29,348 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None))
2017-10-24 12:16:29,348 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I'm sorry, something went wrong.], sender=TextOutputComponent, reason=None)
2017-10-24 12:16:29,348 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:16:29,348 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 12:16:29,348 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 12:16:29,348 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
2017-10-24 12:16:29,349 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None))
2017-10-24 12:16:29,350 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840189.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I'm sorry, something went wrong.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:29,350 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:29,350 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:29,350 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:29,357 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:29,357 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:29,357 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:29,360 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], False, undefined_failure)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 12:16:29,360 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:29,360 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:29,360 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:29,360 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:29,360 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:29,360 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:29,360 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:29,361 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:29,361 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:29,361 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:16:29,361 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:29,364 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:16:29,364 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:16:29,364 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:29,364 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:16:29,364 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:29,365 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:29,366 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,366 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:29,366 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:29,366 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:29,366 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:29,366 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:29,366 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:29,369 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 12:16:29,369 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:29,369 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:29,369 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:16:29,369 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:29,369 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:16:29,370 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:16:29,370 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 12:16:29,370 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:29,370 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I'm sorry, something went wrong.], latest_moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:16:29,371 - session_2017-10-24T12_14_58_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f292c3efcb0>:1.0
2017-10-24 12:16:29,371 - session_2017-10-24T12_14_58_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:16:30,371 - session_2017-10-24T12_14_58_0 - DEBUG - Timeout fired
2017-10-24 12:16:30,371 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:30,371 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:30,371 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:16:30,372 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:16:30,373 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840190.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:30,373 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:16:30,373 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:16:30,375 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:30,376 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:16:30,381 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 12:16:30,381 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:16:30,381 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:16:30,383 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:30,383 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - INFO - BEGIN integrate_moves
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:integrate
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:16:30,384 - session_2017-10-24T12_14_58_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:16:30,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:30,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:30,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:30,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:16:30,385 - session_2017-10-24T12_14_58_0 - INFO - breaking out of accommodate
2017-10-24 12:16:30,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:16:30,385 - session_2017-10-24T12_14_58_0 - INFO - END integrate_moves
2017-10-24 12:16:30,385 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:30,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:30,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:16:30,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:16:30,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:16:30,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:16:30,386 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:16:30,387 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:16:30,387 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:16:30,387 - session_2017-10-24T12_14_58_0 - INFO - running ISU module: select
2017-10-24 12:16:30,388 - session_2017-10-24T12_14_58_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f292e2c0090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f292eaf6c10>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508840190.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {report(DeviceResultProposition(go_to_next, [], False, undefined_failure), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:16:30,388 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:16:30,391 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], False, undefined_failure))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:16:30,391 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_action
2017-10-24 12:16:30,391 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:16:30,391 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:select_move
2017-10-24 12:16:30,391 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:16:30,393 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:30,393 - session_2017-10-24T12_14_58_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:16:30,393 - session_2017-10-24T12_14_58_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:16:30,395 - session_2017-10-24T12_14_58_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:16:30,395 - session_2017-10-24T12_14_58_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#])
2017-10-24 12:16:30,396 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:17:28,360 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:17:28,360 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 12:17:28,360 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:17:28,360 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:17:28,361 - session_2017-10-24T12_14_58_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 12:17:28,361 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:17:28,362 - session_2017-10-24T12_14_58_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 12:17:28,362 - session_2017-10-24T12_14_58_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:17:28,362 - session_2017-10-24T12_14_58_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 12:17:28,362 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:17:28,362 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 12:17:28,362 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:17:28,362 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:17:28,363 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:17:28,363 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 12:17:28,363 - session_2017-10-24T12_14_58_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 12:17:28,363 - session_2017-10-24T12_14_58_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 12:17:28,363 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:17:28,363 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:17:28,363 - session_2017-10-24T12_14_58_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:17:28,364 - session_2017-10-24T12_14_58_0 - DEBUG - Sent.
2017-10-24 12:17:28,364 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 12:17:28,364 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:17:28,364 - session_2017-10-24T12_14_58_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:17:28,365 - session_2017-10-24T12_14_58_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:17:28,365 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:17:28,365 - session_2017-10-24T12_14_58_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:17:28,366 - session_2017-10-24T12_14_58_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:17:28,367 - session_2017-10-24T12_14_58_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], False, undefined_failure)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:17:28,367 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 12:17:28,367 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 12:17:28,367 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 12:17:28,367 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 12:17:28,367 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 12:17:28,367 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 12:17:28,367 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 12:17:28,368 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 12:17:28,368 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:17:28,368 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:17:28,368 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 12:17:28,368 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 12:17:28,368 - session_2017-10-24T12_14_58_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 12:17:28,368 - session_2017-10-24T12_14_58_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
