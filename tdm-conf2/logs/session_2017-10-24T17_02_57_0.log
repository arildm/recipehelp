2017-10-24 17:02:57,407 - session_2017-10-24T17_02_57_0 - DEBUG - Backend()
2017-10-24 17:02:57,408 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.initialize()
2017-10-24 17:02:57,440 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6b62abae90>>, False])
2017-10-24 17:02:57,440 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6b62abae90>>, 'eng'])
2017-10-24 17:02:57,440 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 17:02:57,440 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 17:02:57,440 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 17:02:57,440 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6b62abae90>>, True, 'disabled'])
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6b62abae90>>])
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f6b62abae90>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f6b62abae90>>, 'eng', False, True])
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - Backend initialized
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - Backend uses language 'eng'
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - running module InterpretModule
2017-10-24 17:02:57,441 - session_2017-10-24T17_02_57_0 - DEBUG - running module DmeModule
2017-10-24 17:02:57,443 - session_2017-10-24T17_02_57_0 - DEBUG - running module DeviceManager
2017-10-24 17:02:57,443 - session_2017-10-24T17_02_57_0 - DEBUG - running module GenerateModule
2017-10-24 17:02:57,443 - session_2017-10-24T17_02_57_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 17:02:57,443 - session_2017-10-24T17_02_57_0 - DEBUG - running module GuiBackend
2017-10-24 17:02:57,443 - session_2017-10-24T17_02_57_0 - DEBUG - running module CogloadModule
2017-10-24 17:02:57,443 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:02:57,444 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:02:57,445 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 17:02:57,445 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 17:02:57,445 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 17:02:57,446 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:02:57,446 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:02:57,474 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 17:02:57,474 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:02:57,474 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 17:02:57,476 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,476 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 17:02:57,476 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 17:02:57,476 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 17:02:57,477 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:02:57,477 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:02:57,483 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 17:02:57,483 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:02:57,483 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 17:02:57,484 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,484 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,484 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,484 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 17:02:57,484 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 17:02:57,486 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857377.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:02:57,486 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:02:57,486 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:02:57,486 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:02:57,488 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:02:57,488 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:02:57,489 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:02:57,490 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:02:57,490 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:02:57,491 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:02:57,492 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:02:57,495 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:02:57,495 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:02:57,497 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:02:57,497 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:02:57,498 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:02:57,498 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:02:57,498 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:02:57,498 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:02:57,498 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:02:57,498 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:02:57,498 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:02:57,499 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:02:57,499 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:02:57,499 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:02:57,500 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857377.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:02:57,500 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:02:57,504 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 17:02:57,504 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:02:57,506 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:02:57,506 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:02:57,509 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:02:57,509 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:02:57,511 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:02:57,511 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:02:57,511 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:02:57,512 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:02:57,513 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:02:57,513 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:02:57,514 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:02:57,516 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 17:02:57,516 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:02:57,516 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 17:02:57,517 - session_2017-10-24T17_02_57_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,517 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,517 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,517 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,517 - session_2017-10-24T17_02_57_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:02:57,517 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 17:02:57,517 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 17:02:57,517 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 17:02:57,518 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 17:02:57,518 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 17:02:57,518 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:02:57,518 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:02:57,518 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:02:57,518 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:02:57,519 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:02:57,520 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 17:02:57,520 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 17:02:57,520 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:02:57,521 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:02:57,522 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:02:57,522 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:02:57,523 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 17:02:57,523 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:02:57,523 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:02:57,523 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:02:57,523 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 17:02:57,523 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 17:02:57,524 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:02:57,524 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 17:02:57,524 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:02:57,525 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:02:57,526 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:02:57,526 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:02:57,526 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:02:57,527 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 17:02:57,527 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:02:57,527 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:02:57,527 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:02:57,527 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message []
2017-10-24 17:02:57,527 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:02:57,527 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:02:57,528 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 17:02:57,528 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:02:57,528 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:02:57,529 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:02:57,529 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 17:02:57,529 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:02:57,529 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:02:57,530 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:02:57,530 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:02:57,573 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:02:57,573 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:02:57,573 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 17:02:57,573 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 17:02:57,574 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:02:57,574 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:02:57,574 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:02:57,574 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:02:57,575 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 17:02:57,576 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857377.58
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:02:57,576 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:02:57,576 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:02:57,576 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:02:57,579 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 17:02:57,579 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:02:57,579 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:02:57,582 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:02:57,583 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:02:57,583 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:02:57,586 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:02:57,586 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:02:57,586 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:02:57,586 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:02:57,586 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:02:57,587 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:02:57,589 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:02:57,589 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:02:57,589 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:02:57,590 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:02:57,590 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:02:57,590 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:02:57,590 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:02:57,590 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:02:57,590 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:02:57,590 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:02:57,591 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:02:57,592 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:02:57,592 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:02:57,592 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:02:57,594 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:02:57,594 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:02:57,594 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:02:57,594 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:02:57,594 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:02:57,594 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:02:57,595 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:02:57,595 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:02:57,595 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:02:57,596 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:02:57,596 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:00,779 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to a step"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:03:00,779 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:00,780 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None))
2017-10-24 17:03:00,780 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:00,780 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:00,780 - session_2017-10-24T17_02_57_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to a step"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:03:00,780 - session_2017-10-24T17_02_57_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:03:00,786 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:03:00,787 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])} for DDD 'recipehelp'
2017-10-24 17:03:00,787 - session_2017-10-24T17_02_57_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
2017-10-24 17:03:00,787 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:00,787 - session_2017-10-24T17_02_57_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to a step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to a step", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:03:00,788 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to a step}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:00,788 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:03:00,788 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:00,788 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:00,788 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:00,788 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:03:00,789 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:00,789 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:03:00,789 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:00,789 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:00,790 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:00,790 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:00,792 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857380.79
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:00,792 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:00,796 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #]), OpenQueue([Move(answer("go to a step"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
-- END TIS changes --
2017-10-24 17:03:00,796 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:00,800 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
?                                                                                                                                ^
-- END TIS changes --
2017-10-24 17:03:00,800 - session_2017-10-24T17_02_57_0 - INFO - hypotheses reranking had no effect
2017-10-24 17:03:00,800 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:00,804 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                 -----------------------------------------------              ^^                                       ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
?                                               ^^^^^^^^                                      + ^                              ^                 +++++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 17:03:00,804 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:00,808 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:03:00,808 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:00,809 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:00,811 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:00,811 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:00,811 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:00,815 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
2017-10-24 17:03:00,816 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:00,819 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
?                                ++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:00,819 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:00,819 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:00,822 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                        --------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 17:03:00,822 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:00,822 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:00,829 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                   - ^ ^ -----------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 17:03:00,829 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:00,830 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:00,830 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:00,830 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:00,830 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:00,831 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:00,831 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:00,831 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:00,831 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:00,832 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:00,832 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:00,832 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:00,835 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.go_to_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:03:00,835 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:00,835 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:00,836 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:00,836 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:00,836 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:00,836 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 17:03:00,836 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:00,836 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:00,837 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857380.79
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:00,838 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:00,843 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 17:03:00,843 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:00,846 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                                                                                  +++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:00,846 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:00,849 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 17:03:00,849 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:00,850 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:00,853 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.step_to_choose(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
-- END TIS changes --
2017-10-24 17:03:00,853 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:00,856 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
?                                                                                    +++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.step_to_choose(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:00,856 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:00,856 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:00,856 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:00,859 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:00,859 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:00,859 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:00,861 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:00,862 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:00,862 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:00,862 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None))
2017-10-24 17:03:00,862 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to a step, sender=DmeModule, reason=None)
2017-10-24 17:03:00,862 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to a step", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:03:00,863 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:00,863 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:03:00,863 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:00,863 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:00,864 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:00,864 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:03:00,865 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:00,865 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:03:00,865 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:00,865 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:00,867 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:00,867 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 17:03:00,867 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:03:00,867 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 17:03:00,867 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:03:00,868 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:03:00,868 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:00,868 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 17:03:00,869 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 17:03:00,869 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 17:03:00,870 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 17:03:00,870 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:00,871 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp') generated as u'Which step?'
2017-10-24 17:03:00,871 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 17:03:00,872 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:00,875 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:00,875 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:03:00,875 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:00,875 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={})
2017-10-24 17:03:00,876 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:03:00,876 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 17:03:00,876 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:03:00,876 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:03:00,876 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:00,877 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message []
2017-10-24 17:03:00,877 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:03:00,877 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:03:00,877 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None))
2017-10-24 17:03:00,877 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Which step?], sender=GenerateModule, reason=None)
2017-10-24 17:03:00,877 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Which step?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:03:00,878 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:00,878 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 17:03:00,878 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:03:00,878 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:03:00,879 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:00,879 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:00,882 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Which step?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:03:00,882 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:00,882 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None))
2017-10-24 17:03:00,883 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Which step?], sender=TextOutputComponent, reason=None)
2017-10-24 17:03:00,883 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:03:00,883 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 17:03:00,883 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 17:03:00,883 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
2017-10-24 17:03:00,883 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None))
2017-10-24 17:03:00,885 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857380.88
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Which step?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to a step
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:00,885 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:00,885 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:00,885 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:00,892 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:00,892 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:00,892 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:00,895 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:00,895 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:00,895 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:00,895 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:00,895 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:00,895 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:00,895 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:00,896 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:00,896 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:00,896 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:00,896 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:00,896 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:00,901 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:03:00,901 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:00,901 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:00,901 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:00,901 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:00,902 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:00,905 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:00,905 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:00,905 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:00,906 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:00,906 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:00,906 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:00,909 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.step_to_choose(X)])
-- END TIS changes --
2017-10-24 17:03:00,909 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:00,909 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:00,910 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:00,910 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:00,910 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:00,910 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:00,910 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:00,910 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:00,911 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:00,911 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:00,911 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:00,911 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:00,911 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:00,911 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:00,911 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:00,911 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:00,912 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:00,912 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:00,912 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:00,912 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:00,912 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:00,915 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:00,915 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:00,915 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:00,915 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:03:00,915 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:00,915 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:00,916 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:00,916 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:03:00,916 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:00,916 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Which step?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:00,916 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:08,715 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "step one"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:03:08,715 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:08,716 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None))
2017-10-24 17:03:08,716 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:08,716 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:08,716 - session_2017-10-24T17_02_57_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "step one"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:03:08,716 - session_2017-10-24T17_02_57_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:03:08,718 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:03:08,718 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])} for DDD 'recipehelp'
2017-10-24 17:03:08,718 - session_2017-10-24T17_02_57_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
2017-10-24 17:03:08,718 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:08,719 - session_2017-10-24T17_02_57_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "step one"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step1"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "step one", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:03:08,719 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: step one}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:08,719 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:03:08,719 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:08,719 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:08,719 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:08,719 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:03:08,720 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:08,720 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:03:08,720 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:08,720 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:08,721 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:08,721 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:08,722 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857388.72
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.step_to_choose(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.step_to_choose(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:08,723 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:08,727 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("step one"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #]), OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
-- END TIS changes --
2017-10-24 17:03:08,727 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:08,731 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
-- END TIS changes --
2017-10-24 17:03:08,735 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                         ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
?                                                                                                                        ^^
-- END TIS changes --
2017-10-24 17:03:08,736 - session_2017-10-24T17_02_57_0 - INFO - hypotheses reranking had no effect
2017-10-24 17:03:08,736 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:08,739 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 17:03:08,739 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:08,744 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to a step')}
-- END TIS changes --
2017-10-24 17:03:08,744 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:08,745 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:08,748 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:08,748 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:08,748 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:08,755 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      +++++++++++++++++++++++++++++++  ^^^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
-- END TIS changes --
2017-10-24 17:03:08,755 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:08,755 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:08,755 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:08,756 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:08,756 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:08,756 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 17:03:08,756 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:08,756 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
2017-10-24 17:03:08,756 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:08,761 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {step_to_choose(step1)}
- tis.shared.com: {}
+ tis.shared.com: {step_to_choose(step1)}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 17:03:08,761 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:08,761 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:08,765 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {step_to_choose(step1)}
+ tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
- tis.shared.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                             ------------------------------------
+ tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 17:03:08,765 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:08,768 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          -------------------------------
+ tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
-- END TIS changes --
2017-10-24 17:03:08,768 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:08,768 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:08,768 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:08,768 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:08,769 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:08,769 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:08,769 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:08,769 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:08,769 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:08,769 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:08,769 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:08,772 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {go_to_step("chose step1")}
- tis.private.plan: Stack([device_query(?X.go_to_step(X)), forget(step_to_choose)])
?                          --------------------------------
+ tis.private.plan: Stack([forget(step_to_choose)])
-- END TIS changes --
2017-10-24 17:03:08,772 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:08,772 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:08,775 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(step_to_choose)])
+ tis.private.plan: Stack([])
- tis.shared.com: {step_to_choose(step1), resolved(?X.step_to_choose(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 17:03:08,775 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:08,775 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:08,776 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:08,776 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:08,778 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.step_to_choose(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:03:08,779 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:08,779 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:08,779 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:08,779 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:08,779 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:08,779 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 17:03:08,779 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 17:03:08,780 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 17:03:08,780 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:08,781 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857388.72
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:08,781 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:08,784 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {go_to_step("chose step1")}
- tis.private.tmp.sys.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 17:03:08,785 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:08,787 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                                                 +++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:08,787 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:08,790 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.go_to_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
-- END TIS changes --
2017-10-24 17:03:08,790 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:08,793 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
- tis.private.agenda: OpenQueue([#, respond(?X.go_to_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:08,793 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:08,793 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:08,793 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:08,796 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:08,796 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:08,796 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:08,798 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:03:08,799 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 17:03:08,799 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:08,799 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None))
2017-10-24 17:03:08,799 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 17:03:08,800 - session_2017-10-24T17_02_57_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, step_to_choose(step1), sender=DmeModule, reason=None)
2017-10-24 17:03:08,800 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None))
2017-10-24 17:03:08,800 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, step one, sender=DmeModule, reason=None)
2017-10-24 17:03:08,800 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": "step one", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:03:08,800 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:08,801 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 17:03:08,801 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 17:03:08,801 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:08,802 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:08,802 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:03:08,802 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:08,802 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:03:08,803 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:08,803 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.go_to_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), bel: {go_to_step("chose step1")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:08,804 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:08,804 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 17:03:08,804 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 17:03:08,804 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 17:03:08,805 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp') generated as u'Ok chose step1.'
2017-10-24 17:03:08,805 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 17:03:08,806 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:08,807 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:03:08,808 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {go_to_step("chose step1")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(go_to_step("chose step1")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.go_to_step(X)), moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:08,808 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:03:08,808 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')])
2017-10-24 17:03:08,808 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp'), facts={go_to_step("chose step1")})
2017-10-24 17:03:08,808 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp')
2017-10-24 17:03:08,809 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f6b60314830>]
2017-10-24 17:03:08,809 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f6b60314830>], sender=GuiBackend, reason=None)
2017-10-24 17:03:08,809 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:03:08,809 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None))
2017-10-24 17:03:08,809 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok chose step1.], sender=GenerateModule, reason=None)
2017-10-24 17:03:08,810 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok chose step1."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:03:08,810 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:08,810 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:03:08,810 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok chose step1.}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:03:08,811 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok chose step1."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:03:08,811 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:08,811 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f6b60314830>], sender=GuiBackend, reason=None))
2017-10-24 17:03:08,812 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f6b60314830>], sender=GuiBackend, reason=None)
2017-10-24 17:03:08,812 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok chose step1."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:03:08,813 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:08,813 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:08,833 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok chose step1."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:03:08,833 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:08,834 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None))
2017-10-24 17:03:08,834 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok chose step1.], sender=TextOutputComponent, reason=None)
2017-10-24 17:03:08,834 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:03:08,834 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 17:03:08,834 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 17:03:08,834 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
2017-10-24 17:03:08,835 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None))
2017-10-24 17:03:08,836 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857388.84
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok chose step1.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:08,836 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:08,836 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:08,836 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:08,842 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.step_to_choose(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:08,842 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:08,842 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:08,846 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:08,846 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:08,846 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:08,846 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:08,846 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:08,847 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:08,847 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:08,847 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:08,847 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:08,847 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:08,847 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:08,847 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:08,850 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {go_to_step("chose step1")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:08,850 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:08,850 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:08,854 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {go_to_step("chose step1")}
+ tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
?                                           ++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                             ---------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 17:03:08,854 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:08,854 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:08,854 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:08,855 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:08,856 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:08,856 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:08,856 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:08,856 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:08,856 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:08,856 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:08,859 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:03:08,859 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 17:03:08,859 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:08,859 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None))
2017-10-24 17:03:08,859 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: go_to_step, grammar_entry: None, value: chose step1}], sender=DmeModule, reason=None)
2017-10-24 17:03:08,859 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "go_to_step", "grammar_entry": null, "value": "chose step1"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:08,860 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:08,860 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 17:03:08,861 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:08,861 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok chose step1.], latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:08,861 - session_2017-10-24T17_02_57_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f6b6036f6c8>:1.0
2017-10-24 17:03:08,862 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:09,862 - session_2017-10-24T17_02_57_0 - DEBUG - Timeout fired
2017-10-24 17:03:09,862 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:09,862 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:09,862 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:09,862 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:03:09,863 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857389.86
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(go_to_step("chose step1")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {go_to_step("chose step1")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:09,863 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:09,864 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:09,866 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:09,866 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:09,870 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(step1), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'step one')}
-- END TIS changes --
2017-10-24 17:03:09,870 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:09,870 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:09,873 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:09,873 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:09,874 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:09,875 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:09,875 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:09,875 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:09,875 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:09,875 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:09,875 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:09,875 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:09,876 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:09,879 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:03:09,879 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:09,879 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:09,881 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {go_to_step("chose step1")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {go_to_step("chose step1"), resolved(?X.go_to_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 17:03:09,881 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:09,881 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:09,882 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:09,882 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:09,882 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:09,882 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:09,882 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:09,882 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:09,883 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:09,883 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:09,883 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:09,884 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857389.86
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {go_to_step("chose step1")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: step one
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:09,884 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:09,889 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {go_to_step("chose step1")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.go_to_step(X)), perform(top)])
?                                      ---------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:09,889 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:09,891 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:09,891 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:09,894 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:03:09,894 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:09,896 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:09,897 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:09,897 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:09,897 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:09,899 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:09,899 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:09,899 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:09,901 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:03:09,902 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:09,902 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:03:25,354 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:03:25,355 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:25,355 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 17:03:25,355 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:25,355 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:25,355 - session_2017-10-24T17_02_57_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:03:25,355 - session_2017-10-24T17_02_57_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:03:25,357 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:03:25,357 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 17:03:25,357 - session_2017-10-24T17_02_57_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 17:03:25,357 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:25,358 - session_2017-10-24T17_02_57_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "say_step"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:03:25,358 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:25,358 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:03:25,358 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,358 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:25,359 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,359 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 17:03:25,360 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:03:25,360 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:03:25,360 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,360 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,361 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,362 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 17:03:25,362 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 17:03:25,362 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:03:25,362 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:25,362 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 17:03:25,362 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 17:03:25,363 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:25,363 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 17:03:25,363 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:03:25,364 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,365 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,365 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:03:25,366 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:25,366 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 17:03:25,366 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 17:03:25,366 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:03:25,366 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:25,366 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b6035a830>]
2017-10-24 17:03:25,367 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b6035a830>], sender=GuiBackend, reason=None)
2017-10-24 17:03:25,367 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:03:25,367 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:03:25,367 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:25,367 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:25,367 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:25,367 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 17:03:25,368 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,368 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 17:03:25,369 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:03:25,369 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:03:25,369 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,370 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b6035a830>], sender=GuiBackend, reason=None))
2017-10-24 17:03:25,370 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b6035a830>], sender=GuiBackend, reason=None)
2017-10-24 17:03:25,370 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:03:25,371 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,371 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:25,382 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:03:25,382 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:25,383 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 17:03:25,383 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 17:03:25,383 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:03:25,383 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:03:25,383 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:03:25,383 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:03:25,384 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 17:03:25,385 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857405.38
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:25,385 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:25,385 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:25,385 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:25,390 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(go_to_step("chose step1")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:03:25,390 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:25,390 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:25,393 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:25,393 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:25,393 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:25,393 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:25,393 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:25,393 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:25,393 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:25,394 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:25,394 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:25,394 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:25,395 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:25,395 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:25,399 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:03:25,399 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:25,399 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,399 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:25,399 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,400 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:25,402 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:03:25,402 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:25,403 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:25,404 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:25,404 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:25,404 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,404 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,404 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:25,404 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,404 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,405 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,405 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:25,405 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:25,407 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 17:03:25,407 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,407 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:25,407 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:03:25,408 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,408 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:25,408 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,409 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:03:25,409 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:25,409 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:25,409 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,409 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,410 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,410 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:25,411 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857405.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:25,411 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:25,414 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 17:03:25,414 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:25,419 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                             ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                             ^
- tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                            ^
+ tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                            ^
-- END TIS changes --
2017-10-24 17:03:25,420 - session_2017-10-24T17_02_57_0 - INFO - hypotheses reranking had no effect
2017-10-24 17:03:25,420 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:25,425 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 17:03:25,425 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:25,432 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:03:25,432 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:25,432 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:25,435 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:25,435 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:25,435 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:25,440 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.step_to_choose(X)), resolve(?X.go_to_step(X)), perform(top)])
?                                                      -------------------------------  ^^^^^^^^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                        ^^
- tis.private.tmp.usr.plan: Stack([findout(?X.step_to_choose(X)), device_query(?X.go_to_step(X)), forget(step_to_choose)])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
- tis.private.tmp.usr.qud: stackset([?X.step_to_choose(X)])
?                                       ^^^^^^ ^^^^^^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 17:03:25,440 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:25,440 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:25,440 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:25,440 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:25,441 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:25,441 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 17:03:25,441 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:25,441 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 17:03:25,441 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:25,445 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(say_step), findout(?X.goal(X))])
?                          ++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(say_step), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 17:03:25,445 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:25,445 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,448 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(say_step), resolve_user(?X.goal(X)), perform(top)])
?                                                --------------------------
+ tis.shared.goals: stackset([perform(say_step), perform(top)])
-- END TIS changes --
2017-10-24 17:03:25,448 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:25,448 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,451 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(say_step), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 17:03:25,451 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:25,451 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:25,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:25,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:25,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:25,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:25,451 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:25,452 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:25,452 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:25,452 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,456 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 17:03:25,456 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,456 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,456 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,456 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:25,459 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:03:25,459 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,459 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,459 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,459 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:25,459 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:25,459 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 17:03:25,459 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,460 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:25,461 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857405.41
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:25,461 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:25,465 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
?                                              +++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 17:03:25,465 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:25,468 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 17:03:25,468 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:25,471 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:25,471 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:25,471 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:25,472 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:25,474 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:25,474 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:25,475 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:25,477 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:03:25,478 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:03:25,478 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:25,478 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 17:03:25,478 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 17:03:25,478 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:03:25,479 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,479 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:03:25,479 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,479 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:25,480 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,480 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:03:25,480 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:25,480 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:03:25,481 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,481 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,482 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,482 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 17:03:25,482 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:03:25,482 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 17:03:25,482 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:25,482 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 17:03:25,483 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 17:03:25,483 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:25,483 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp') generated as u'Step ended'
2017-10-24 17:03:25,483 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 17:03:25,484 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,485 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:03:25,486 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(say_step), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(say_step), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,486 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:03:25,486 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:03:25,486 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 17:03:25,486 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:03:25,486 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 17:03:25,486 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:25,487 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b60314908>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b603145a8>]
2017-10-24 17:03:25,487 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b60314908>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b603145a8>], sender=GuiBackend, reason=None)
2017-10-24 17:03:25,487 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:03:25,487 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None))
2017-10-24 17:03:25,487 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 17:03:25,488 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Step ended"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:03:25,488 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,488 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:03:25,488 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:03:25,489 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Step ended"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:03:25,489 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,489 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b60314908>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b603145a8>], sender=GuiBackend, reason=None))
2017-10-24 17:03:25,489 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b60314908>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b603145a8>], sender=GuiBackend, reason=None)
2017-10-24 17:03:25,490 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Step ended"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:03:25,490 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,490 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:25,508 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Step ended"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:03:25,509 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:25,509 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None))
2017-10-24 17:03:25,509 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None)
2017-10-24 17:03:25,509 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:03:25,509 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:25,510 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:25,510 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:25,510 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 17:03:25,512 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857405.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([perform(say_step), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:25,512 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:25,512 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:25,512 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:25,518 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:25,518 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:25,518 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:25,521 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:25,522 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:25,526 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:03:25,526 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:25,526 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,526 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:25,526 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,526 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:25,529 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(say_step)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:25,530 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:25,530 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(confirmation_action))])
- tis.shared.goals: stackset([perform(say_step), perform(top)])
?                                     -------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^ ^
+ tis.shared.previous_goal: perform(say_step)
?                           ^^^^ ^^^^^^^^^ ++
-- END TIS changes --
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:25,533 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:25,534 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:25,534 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:25,534 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,537 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(perform(confirmation_action))])
+ tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 17:03:25,537 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,537 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,541 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          -------------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 17:03:25,541 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,541 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,541 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,542 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:25,542 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,542 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,542 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,542 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:25,542 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:25,545 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:03:25,545 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,545 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:25,546 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857405.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:25,547 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:25,551 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
- tis.private.tmp.sys.goals: stackset([perform(say_step), perform(top)])
?                                              ^ ^ ^ ^^
+ tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
?                                              ^^^^^^^ ^^^^ ^^ ^^^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 17:03:25,551 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:25,554 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.confirmation_yn(X))])
?                                                                  ++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:25,554 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:25,557 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.confirmation_yn(X))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 17:03:25,557 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:25,560 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))])
?                                                              ++++++++++++++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:25,560 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:25,560 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:25,560 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:25,563 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:25,563 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:25,563 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:25,565 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:03:25,566 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:25,566 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 17:03:25,566 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:03:25,566 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,566 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:25,567 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,567 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)))
2017-10-24 17:03:25,568 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 17:03:25,568 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:03:25,568 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,569 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,570 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,571 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 17:03:25,571 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:03:25,571 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 17:03:25,571 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:25,571 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 17:03:25,571 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 17:03:25,571 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:25,572 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 17:03:25,572 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:03:25,573 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,576 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:25,576 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:03:25,576 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:25,576 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 17:03:25,576 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:03:25,576 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)})
2017-10-24 17:03:25,576 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:25,577 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b6035a8c0>]
2017-10-24 17:03:25,577 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b6035a8c0>], sender=GuiBackend, reason=None)
2017-10-24 17:03:25,577 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:03:25,577 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 17:03:25,577 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:03:25,577 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:03:25,578 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,578 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b6035a8c0>], sender=GuiBackend, reason=None))
2017-10-24 17:03:25,578 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b6035a8c0>], sender=GuiBackend, reason=None)
2017-10-24 17:03:25,578 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:03:25,579 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,580 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:25,615 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:03:25,615 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:25,615 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 17:03:25,616 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 17:03:25,616 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:03:25,616 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:03:25,616 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:03:25,616 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:03:25,616 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-24 17:03:25,618 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857405.62
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:25,618 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:25,618 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:25,618 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:25,623 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(say_step), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 17:03:25,623 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:25,624 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:25,626 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:25,626 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:25,626 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:25,626 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:25,626 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:25,626 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:25,627 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:25,627 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:25,627 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:25,627 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:25,627 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:25,627 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:25,631 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:03:25,631 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:25,631 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,631 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:25,631 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,631 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:25,635 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.confirmation_yn(X)])
-- END TIS changes --
2017-10-24 17:03:25,635 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:25,636 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:25,637 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:25,637 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:25,637 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:25,637 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,637 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,637 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:25,637 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:25,638 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:25,638 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:25,638 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:25,638 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:25,641 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 17:03:25,641 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,641 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:25,641 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:03:25,641 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:03:25,641 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:25,642 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:25,642 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:03:25,642 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:25,643 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:25,643 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:34,045 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to step five"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:03:34,045 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:34,046 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to step five}], sender=TextInputComponent, reason=None))
2017-10-24 17:03:34,046 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to step five}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:34,046 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to step five}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:34,046 - session_2017-10-24T17_02_57_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to step five"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:03:34,046 - session_2017-10-24T17_02_57_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:03:34,048 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:03:34,048 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])} for DDD 'recipehelp'
2017-10-24 17:03:34,048 - session_2017-10-24T17_02_57_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
2017-10-24 17:03:34,049 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:34,049 - session_2017-10-24T17_02_57_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to step five"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to step five", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "go_to_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to step five", "_modality": "speech", "_background": null, "_speaker": "USR"}}, {"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"7df9060a3399228b5ad4ef77628d15ef.PredicateProposition": {"_polarity": "POS", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "name": "step_to_choose", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}, "_content": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "name": "step_to_choose", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}, "_predicted": false, "_type": "PREDICATE", "individual": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "step"}}, "value": "step5"}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to step five", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:03:34,049 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to step five}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:34,050 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:03:34,050 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:34,050 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:34,050 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:34,050 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:03:34,050 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:34,051 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:03:34,051 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:34,051 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:34,052 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:34,052 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:34,054 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857414.05
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step five
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([?X.confirmation_yn(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:34,054 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:34,060 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                     ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                     ^
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
?                                                                                                                                    ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
?                                                                                                                                    ^
-- END TIS changes --
2017-10-24 17:03:34,066 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                     ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                     ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
?                                                                                                                                    ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
?                                                                                                                                    ^^
-- END TIS changes --
2017-10-24 17:03:34,067 - session_2017-10-24T17_02_57_0 - INFO - hypotheses reranking had no effect
2017-10-24 17:03:34,067 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:34,072 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 17:03:34,072 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:34,080 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:34,081 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:34,081 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:34,084 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:34,084 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:34,084 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:34,092 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
+ tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                                                      ^ +++++ ^^^^^^^   ++++++++++++++++++++++++++++++
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
+ tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^  ^
+ tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
?                                       ^ +++++ ^^^^^^^
-- END TIS changes --
2017-10-24 17:03:34,092 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:34,092 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:34,092 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:34,092 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:34,093 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:34,093 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #])
2017-10-24 17:03:34,093 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:34,093 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #])
2017-10-24 17:03:34,093 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:34,097 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {confirmation_yn("go to step five")}
- tis.shared.com: {device_activity_terminated(say_step)}
+ tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("go to step five")}
?                                                      ++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')}
-- END TIS changes --
2017-10-24 17:03:34,098 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:34,098 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:34,102 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("go to step five")}
+ tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("go to step five"), resolved(?X.confirmation_yn(X))}
?                                                                                          +++++++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             -------------------------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 17:03:34,102 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:34,106 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          --------------------------------
+ tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:34,107 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:34,108 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,112 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
+ tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
?                                                                                                          ++++++++++++++++++
- tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          ----------------------------------
+ tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 17:03:34,112 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,112 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,115 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_if_then_else
-- BEGIN TIS changes --
- tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
-- END TIS changes --
2017-10-24 17:03:34,115 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,115 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,119 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 +++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:34,119 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,119 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,123 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                                                                                  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 17:03:34,123 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,123 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,124 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,124 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:34,126 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.confirmation_yn(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:03:34,127 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:34,130 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(confirmation_action))])
- tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             -------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 17:03:34,130 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:34,130 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,134 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.plan: Stack([jumpto(perform(confirmation_action))])
+ tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 17:03:34,134 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,134 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,138 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          -------------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("go to step five"), resolved(?X.confirmation_yn(X))}
+ tis.shared.com: {device_activity_terminated(say_step)}
-- END TIS changes --
2017-10-24 17:03:34,139 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,139 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,139 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,139 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:34,139 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:34,139 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, confirmation_yn("go to step five"), sender=DmeModule, reason=None)
2017-10-24 17:03:34,140 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to step five, sender=DmeModule, reason=None)
2017-10-24 17:03:34,140 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:34,140 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:34,141 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857414.05
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step five
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:34,141 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:34,147 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
+ tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
?                                                                                                                  ++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:34,147 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:34,151 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 17:03:34,151 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:34,151 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:34,155 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 17:03:34,155 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:34,159 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:34,159 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:34,159 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:34,159 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:34,162 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:34,162 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:34,162 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:34,165 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:03:34,165 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:03:34,166 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:34,166 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, confirmation_yn("go to step five"), sender=DmeModule, reason=None))
2017-10-24 17:03:34,166 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, confirmation_yn("go to step five"), sender=DmeModule, reason=None)
2017-10-24 17:03:34,166 - session_2017-10-24T17_02_57_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, confirmation_yn("go to step five"), sender=DmeModule, reason=None)
2017-10-24 17:03:34,166 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to step five, sender=DmeModule, reason=None))
2017-10-24 17:03:34,166 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to step five, sender=DmeModule, reason=None)
2017-10-24 17:03:34,167 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to step five", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:03:34,167 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:34,167 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 17:03:34,168 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:34,168 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:34,168 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:34,169 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:03:34,169 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:34,170 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:03:34,170 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:34,170 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:34,172 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:34,172 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:34,172 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:03:34,172 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:34,172 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:34,172 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 17:03:34,173 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 17:03:34,173 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:34,173 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp') generated as u'Step ended'
2017-10-24 17:03:34,173 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 17:03:34,175 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:34,176 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:03:34,178 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:34,178 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:03:34,178 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:03:34,178 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:34,178 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:03:34,178 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:34,178 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:34,179 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b6035d290>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b603b5f80>]
2017-10-24 17:03:34,179 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b6035d290>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b603b5f80>], sender=GuiBackend, reason=None)
2017-10-24 17:03:34,179 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:03:34,179 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None))
2017-10-24 17:03:34,179 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 17:03:34,179 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Step ended"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:03:34,180 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:34,180 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:03:34,181 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:03:34,181 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Step ended"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:03:34,181 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:34,182 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b6035d290>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b603b5f80>], sender=GuiBackend, reason=None))
2017-10-24 17:03:34,182 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b6035d290>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b603b5f80>], sender=GuiBackend, reason=None)
2017-10-24 17:03:34,182 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Step ended"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:03:34,182 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:34,182 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:34,209 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Step ended"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:03:34,210 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:34,210 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None))
2017-10-24 17:03:34,210 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None)
2017-10-24 17:03:34,210 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:03:34,210 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:34,210 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:34,210 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:34,211 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 17:03:34,213 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857414.21
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step five
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:34,213 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:34,218 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five'), #]), OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.go_to_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), Move(answer(step_to_choose(step5)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to step five'), #])}
-- END TIS changes --
2017-10-24 17:03:34,218 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:34,218 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:34,218 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:34,225 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:34,225 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:34,225 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:34,228 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 17:03:34,228 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:34,228 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:34,228 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:34,228 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:34,228 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:34,228 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:34,228 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:34,229 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:34,229 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:34,229 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:34,229 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:34,233 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:03:34,233 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:34,233 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:34,233 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:34,234 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,234 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:34,237 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:34,237 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:34,237 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:34,237 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:34,237 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:34,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:34,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:34,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:34,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:34,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:34,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:34,242 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:03:34,242 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:34,243 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:34,243 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 17:03:34,243 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:34,243 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:34,243 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:34,244 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 17:03:34,244 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:34,244 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:34,245 - session_2017-10-24T17_02_57_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f6b603b9710>:1.0
2017-10-24 17:03:34,245 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:35,245 - session_2017-10-24T17_02_57_0 - DEBUG - Timeout fired
2017-10-24 17:03:35,245 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:35,245 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:35,245 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:35,245 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:03:35,246 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857415.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step five
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:35,247 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:35,247 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:35,249 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:35,249 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:35,254 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer("go to step five"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to step five')}
-- END TIS changes --
2017-10-24 17:03:35,254 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:35,254 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:35,257 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:35,257 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:35,257 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:35,257 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:35,257 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:35,257 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:35,257 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:35,258 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:35,259 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:35,259 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:35,259 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:35,259 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:35,259 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:35,259 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:35,259 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:35,260 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:35,260 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:35,260 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:35,260 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:35,260 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:35,260 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:35,262 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857415.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to step five
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:35,262 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:35,266 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:35,266 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:35,268 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 17:03:35,268 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:35,268 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:35,271 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:35,271 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:35,272 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:35,272 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:35,274 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:35,274 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:35,274 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:35,277 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:03:35,277 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:35,277 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:03:40,164 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:03:40,165 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:40,165 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 17:03:40,165 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:40,165 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:40,165 - session_2017-10-24T17_02_57_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:03:40,165 - session_2017-10-24T17_02_57_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:03:40,167 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:03:40,167 - session_2017-10-24T17_02_57_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 17:03:40,167 - session_2017-10-24T17_02_57_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 17:03:40,167 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:40,167 - session_2017-10-24T17_02_57_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:03:40,167 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:03:40,168 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 17:03:40,168 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:40,168 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:40,169 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,169 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 17:03:40,169 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:03:40,170 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:03:40,170 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,170 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,172 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,172 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:40,172 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:40,172 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:40,173 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 17:03:40,173 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:03:40,174 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,177 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,177 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:03:40,177 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:40,177 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:40,177 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')
2017-10-24 17:03:40,178 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b602cdbd8>]
2017-10-24 17:03:40,178 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b602cdbd8>], sender=GuiBackend, reason=None)
2017-10-24 17:03:40,178 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:03:40,178 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:03:40,178 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:03:40,178 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:40,178 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 17:03:40,179 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 17:03:40,179 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,179 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None))
2017-10-24 17:03:40,180 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:03:40,180 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:03:40,180 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,181 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b602cdbd8>], sender=GuiBackend, reason=None))
2017-10-24 17:03:40,181 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f6b602cdbd8>], sender=GuiBackend, reason=None)
2017-10-24 17:03:40,181 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:03:40,182 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,182 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:40,221 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:03:40,222 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:40,222 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 17:03:40,222 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 17:03:40,222 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:03:40,222 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:03:40,222 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:03:40,223 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:03:40,223 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None))
2017-10-24 17:03:40,224 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857420.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:40,224 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:40,224 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:40,225 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:40,228 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:03:40,228 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:40,229 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:40,231 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:40,231 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:40,232 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:40,236 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.confirmation_yn(X)])
-- END TIS changes --
2017-10-24 17:03:40,236 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:40,236 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:40,237 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:40,238 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:40,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:40,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:40,238 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:40,239 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:40,242 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 17:03:40,242 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:40,242 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:40,242 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 17:03:40,242 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:40,242 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:40,243 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,243 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:03:40,243 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:40,243 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Are you done?], latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:03:40,244 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,244 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,245 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,245 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:40,247 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857420.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([?X.confirmation_yn(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:40,247 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:40,252 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                ^
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                               ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                               ^
-- END TIS changes --
2017-10-24 17:03:40,258 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                               ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
?                                                                                                                               ^^
-- END TIS changes --
2017-10-24 17:03:40,259 - session_2017-10-24T17_02_57_0 - INFO - hypotheses reranking had no effect
2017-10-24 17:03:40,259 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:40,265 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
?                                        ^ ^^^^  ^^^^^ ^^^^^^^^^                                    ^^                              ^
+ tis.latest_moves: OpenQueue([#, Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')])
?                                       + ^^^ ^^ ++++ ^^ ^                                   + ^                              ^^                 +++++++++++++++++++++++++
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 17:03:40,265 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:40,272 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:03:40,272 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:40,272 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:40,276 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:40,276 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:40,276 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:40,282 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None)}
+ tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
?                                                                                                                  ++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:40,282 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:40,282 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:40,283 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:40,283 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:40,283 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:40,283 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #])
2017-10-24 17:03:40,283 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:40,283 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #])
2017-10-24 17:03:40,283 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:40,288 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {confirmation_yn("go to next")}
- tis.shared.com: {device_activity_terminated(say_step)}
+ tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("go to next")}
?                                                      +++++++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 17:03:40,288 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:40,288 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:40,293 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("go to next")}
+ tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("go to next"), resolved(?X.confirmation_yn(X))}
?                                                                                     +++++++++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
?                             -------------------------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 17:03:40,293 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:40,297 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          --------------------------------
+ tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 17:03:40,297 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,297 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:40,297 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:40,298 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:40,298 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:40,298 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:40,298 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:40,298 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:40,298 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:40,298 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:40,298 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,302 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.plan: Stack([device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          ----------------------------------
+ tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 17:03:40,302 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,302 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,305 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_if_then_else
-- BEGIN TIS changes --
- tis.private.plan: Stack([if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
+ tis.private.plan: Stack([jumpto(perform(say_step))])
-- END TIS changes --
2017-10-24 17:03:40,305 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,305 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,309 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                 +++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([jumpto(perform(say_step))])
+ tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
- tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
+ tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             +++++++++++++++++++
-- END TIS changes --
2017-10-24 17:03:40,309 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,309 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,313 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                                                                                  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.private.plan: Stack([dev_perform(say_step, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 17:03:40,313 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,313 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,313 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,313 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:40,316 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.confirmation_yn(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:03:40,316 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:40,320 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(perform(confirmation_action))])
- tis.shared.goals: stackset([perform(say_step), perform(confirmation_action), perform(top)])
?                             -------------------
+ tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
-- END TIS changes --
2017-10-24 17:03:40,320 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:40,320 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,324 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.plan: Stack([jumpto(perform(confirmation_action))])
+ tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
-- END TIS changes --
2017-10-24 17:03:40,324 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,324 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,328 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(confirmation_yn), findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
?                          -------------------------
+ tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
- tis.shared.com: {device_activity_terminated(say_step), confirmation_yn("go to next"), resolved(?X.confirmation_yn(X))}
+ tis.shared.com: {device_activity_terminated(say_step)}
-- END TIS changes --
2017-10-24 17:03:40,328 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,329 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,329 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,329 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:40,329 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:40,329 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, confirmation_yn("go to next"), sender=DmeModule, reason=None)
2017-10-24 17:03:40,329 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 17:03:40,330 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:40,330 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:40,331 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857420.25
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')}
tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:40,331 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:40,335 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 17:03:40,335 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:40,339 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 17:03:40,339 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:40,340 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:40,343 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
?                                 ---------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
-- END TIS changes --
2017-10-24 17:03:40,343 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:40,348 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:40,348 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:40,348 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:40,348 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:40,351 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:40,351 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:40,351 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:40,354 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:03:40,354 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:03:40,354 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:40,355 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, confirmation_yn("go to next"), sender=DmeModule, reason=None))
2017-10-24 17:03:40,355 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, confirmation_yn("go to next"), sender=DmeModule, reason=None)
2017-10-24 17:03:40,355 - session_2017-10-24T17_02_57_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, confirmation_yn("go to next"), sender=DmeModule, reason=None)
2017-10-24 17:03:40,355 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 17:03:40,355 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 17:03:40,355 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:03:40,356 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,356 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 17:03:40,356 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:40,356 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:40,357 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,358 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:03:40,358 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:03:40,358 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:03:40,358 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,359 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,361 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,361 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:40,361 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:03:40,361 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:40,361 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:40,361 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 17:03:40,361 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 17:03:40,362 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:40,362 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp') generated as u'Step ended'
2017-10-24 17:03:40,362 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 17:03:40,364 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,365 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:03:40,367 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:03:40,367 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:03:40,367 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:03:40,367 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:40,368 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:03:40,368 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)})
2017-10-24 17:03:40,368 - session_2017-10-24T17_02_57_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:03:40,368 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b60363200>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b602cde60>]
2017-10-24 17:03:40,369 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b60363200>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b602cde60>], sender=GuiBackend, reason=None)
2017-10-24 17:03:40,369 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posted event
2017-10-24 17:03:40,369 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None))
2017-10-24 17:03:40,369 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Step ended], sender=GenerateModule, reason=None)
2017-10-24 17:03:40,369 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Step ended"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:03:40,370 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,370 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:03:40,370 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Step ended}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:03:40,370 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Step ended"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:03:40,371 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,371 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b60363200>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b602cde60>], sender=GuiBackend, reason=None))
2017-10-24 17:03:40,372 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f6b60363200>, <tdm.tdm_gui_protocol.Popup instance at 0x7f6b602cde60>], sender=GuiBackend, reason=None)
2017-10-24 17:03:40,372 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "say_step", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Step ended"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:03:40,373 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,373 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:40,402 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Step ended"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:03:40,403 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:03:40,403 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None))
2017-10-24 17:03:40,403 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Step ended], sender=TextOutputComponent, reason=None)
2017-10-24 17:03:40,403 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:03:40,403 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:40,403 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:40,403 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
2017-10-24 17:03:40,404 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None))
2017-10-24 17:03:40,405 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857420.4
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Step ended], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')}
tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:40,405 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:40,409 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 17:03:40,409 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:40,409 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:40,409 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:40,416 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:40,416 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:40,416 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:40,419 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(say_step, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 17:03:40,419 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:03:40,420 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:40,424 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:03:40,425 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:40,425 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:40,425 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:40,425 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,425 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:40,428 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:03:40,428 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:03:40,428 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:40,428 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:40,429 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,430 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,430 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:40,430 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:40,430 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:40,430 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:40,430 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:40,431 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:40,433 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:03:40,433 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:40,434 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:40,434 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 17:03:40,434 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:40,434 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:03:40,434 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:03:40,435 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 17:03:40,435 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:40,436 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Step ended], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:03:40,436 - session_2017-10-24T17_02_57_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f6b603b5e60>:1.0
2017-10-24 17:03:40,436 - session_2017-10-24T17_02_57_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:03:41,436 - session_2017-10-24T17_02_57_0 - DEBUG - Timeout fired
2017-10-24 17:03:41,436 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:41,436 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:41,436 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:03:41,437 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:03:41,438 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857421.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(say_step, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:41,438 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:03:41,438 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:03:41,441 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:41,441 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:03:41,446 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 17:03:41,446 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:03:41,446 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - INFO - BEGIN integrate_moves
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:03:41,449 - session_2017-10-24T17_02_57_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:integrate
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - INFO - breaking out of accommodate
2017-10-24 17:03:41,450 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:03:41,451 - session_2017-10-24T17_02_57_0 - INFO - END integrate_moves
2017-10-24 17:03:41,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:41,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:41,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:03:41,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:03:41,451 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:03:41,452 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:03:41,452 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:03:41,452 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:03:41,452 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:03:41,452 - session_2017-10-24T17_02_57_0 - INFO - running ISU module: select
2017-10-24 17:03:41,454 - session_2017-10-24T17_02_57_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f6b62abaf10>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f6b6034e990>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508857421.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.sys.com: {device_activity_terminated(say_step)}
tis.private.tmp.sys.goals: stackset([perform(confirmation_action), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}
tis.private.tmp.usr.com: {device_activity_terminated(say_step)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.confirmation_yn(X)), perform(confirmation_action), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))])
tis.private.tmp.usr.qud: stackset([?X.confirmation_yn(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(say_step)}
tis.shared.goals: stackset([perform(confirmation_action), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(say_step, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(say_step)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:03:41,454 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:03:41,458 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), device_report(DeviceResultProposition(say_step, [], True, None))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:41,458 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_action
2017-10-24 17:03:41,461 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
-- END TIS changes --
2017-10-24 17:03:41,461 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:41,461 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:41,464 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)))])
- tis.private.agenda: OpenQueue([#, findout(?X.confirmation_yn(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:03:41,464 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:03:41,464 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:select_move
2017-10-24 17:03:41,464 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:03:41,467 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:03:41,467 - session_2017-10-24T17_02_57_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:03:41,467 - session_2017-10-24T17_02_57_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:03:41,470 - session_2017-10-24T17_02_57_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:03:41,470 - session_2017-10-24T17_02_57_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')])
2017-10-24 17:03:41,470 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:05:18,135 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:05:18,136 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 17:05:18,136 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:05:18,136 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:05:18,137 - session_2017-10-24T17_02_57_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 17:05:18,137 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:05:18,137 - session_2017-10-24T17_02_57_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 17:05:18,137 - session_2017-10-24T17_02_57_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:05:18,137 - session_2017-10-24T17_02_57_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 17:05:18,138 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:05:18,138 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 17:05:18,138 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:05:18,139 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:05:18,139 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:05:18,139 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 17:05:18,139 - session_2017-10-24T17_02_57_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:05:18,139 - session_2017-10-24T17_02_57_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 17:05:18,139 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None))
2017-10-24 17:05:18,139 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: confirmation, grammar_entry: None, value: no}], sender=DmeModule, reason=None)
2017-10-24 17:05:18,139 - session_2017-10-24T17_02_57_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "confirmation", "grammar_entry": null, "value": "no"}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:05:18,140 - session_2017-10-24T17_02_57_0 - DEBUG - Sent.
2017-10-24 17:05:18,140 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 17:05:18,141 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:05:18,141 - session_2017-10-24T17_02_57_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:05:18,141 - session_2017-10-24T17_02_57_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:05:18,141 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(confirmation_action), device_outputs: Stack([]), top_perform_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, facts_being_grounded: [], current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:05:18,143 - session_2017-10-24T17_02_57_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:05:18,144 - session_2017-10-24T17_02_57_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:05:18,146 - session_2017-10-24T17_02_57_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.confirmation_yn(X)), device_query(?X.confirmation(X)), if_then_else(confirmation(yes), jumpto(perform(go_to_next)), jumpto(perform(say_step)))]), bel: {device_activity_terminated(say_step), DeviceResultProposition(say_step, [], True, None), confirmation(no)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(confirmation_action), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(ask(?X.confirmation_yn(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(say_step), current_goal: perform(confirmation_action), moves: OpenQueue([#, Move(ask(?X.confirmation_yn(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(say_step)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:05:18,146 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 17:05:18,146 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 17:05:18,146 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 17:05:18,146 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 17:05:18,146 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 17:05:18,146 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 17:05:18,146 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 17:05:18,147 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 17:05:18,147 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:05:18,147 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:05:18,147 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 17:05:18,147 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 17:05:18,147 - session_2017-10-24T17_02_57_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 17:05:18,147 - session_2017-10-24T17_02_57_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
