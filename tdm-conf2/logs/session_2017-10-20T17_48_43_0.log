2017-10-20 17:48:43,185 - session_2017-10-20T17_48_43_0 - DEBUG - Backend()
2017-10-20 17:48:43,186 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.initialize()
2017-10-20 17:48:43,216 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7ef20baf10>>, False])
2017-10-20 17:48:43,217 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7ef20baf10>>, 'eng'])
2017-10-20 17:48:43,217 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-20 17:48:43,217 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-20 17:48:43,217 - session_2017-10-20T17_48_43_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-20 17:48:43,217 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7ef20baf10>>, True, 'disabled'])
2017-10-20 17:48:43,217 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7ef20baf10>>])
2017-10-20 17:48:43,217 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f7ef20baf10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f7ef20baf10>>, 'eng', False, True])
2017-10-20 17:48:43,218 - session_2017-10-20T17_48_43_0 - DEBUG - Backend initialized
2017-10-20 17:48:43,218 - session_2017-10-20T17_48_43_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-20 17:48:43,218 - session_2017-10-20T17_48_43_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-20 17:48:43,218 - session_2017-10-20T17_48_43_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-20 17:48:43,218 - session_2017-10-20T17_48_43_0 - DEBUG - Backend uses language 'eng'
2017-10-20 17:48:43,218 - session_2017-10-20T17_48_43_0 - DEBUG - running module InterpretModule
2017-10-20 17:48:43,218 - session_2017-10-20T17_48_43_0 - DEBUG - running module DmeModule
2017-10-20 17:48:43,220 - session_2017-10-20T17_48_43_0 - DEBUG - running module DeviceManager
2017-10-20 17:48:43,220 - session_2017-10-20T17_48_43_0 - DEBUG - running module GenerateModule
2017-10-20 17:48:43,220 - session_2017-10-20T17_48_43_0 - DEBUG - running module IndependentGuiBackend
2017-10-20 17:48:43,220 - session_2017-10-20T17_48_43_0 - DEBUG - running module GuiBackend
2017-10-20 17:48:43,220 - session_2017-10-20T17_48_43_0 - DEBUG - running module CogloadModule
2017-10-20 17:48:43,221 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:48:43,221 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:48:43,221 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-20 17:48:43,222 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-20 17:48:43,222 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-20 17:48:43,223 - session_2017-10-20T17_48_43_0 - DEBUG - Sent.
2017-10-20 17:48:43,223 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:48:43,252 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-20 17:48:43,253 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:48:43,253 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-20 17:48:43,254 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,254 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-20 17:48:43,254 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-20 17:48:43,254 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-20 17:48:43,255 - session_2017-10-20T17_48_43_0 - DEBUG - Sent.
2017-10-20 17:48:43,255 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:48:43,258 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-20 17:48:43,258 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:48:43,258 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:48:43,258 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,259 - session_2017-10-20T17_48_43_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,259 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,259 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:48:43,259 - session_2017-10-20T17_48_43_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:48:43,260 - session_2017-10-20T17_48_43_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7ef1883090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7ef20bab90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514523.26
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:48:43,260 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:48:43,260 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:48:43,260 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:48:43,263 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:43,263 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:48:43,264 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - INFO - BEGIN integrate_moves
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:48:43,266 - session_2017-10-20T17_48_43_0 - INFO - init_shift: OpenQueue([#])
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:integrate
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_action
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - INFO - breaking out of accommodate
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:43,267 - session_2017-10-20T17_48_43_0 - INFO - END integrate_moves
2017-10-20 17:48:43,268 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:43,268 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:43,270 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:48:43,271 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:43,273 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:48:43,273 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:43,273 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:43,273 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:43,273 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:48:43,273 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:48:43,273 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:43,274 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:43,274 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:48:43,274 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:48:43,274 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:48:43,274 - session_2017-10-20T17_48_43_0 - INFO - running ISU module: select
2017-10-20 17:48:43,276 - session_2017-10-20T17_48_43_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7ef1883090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7ef20bab90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514523.26
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:48:43,276 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-20 17:48:43,279 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-20 17:48:43,279 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_action
2017-10-20 17:48:43,281 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-20 17:48:43,281 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:48:43,284 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-20 17:48:43,284 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_move
2017-10-20 17:48:43,286 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-20 17:48:43,286 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_icm
2017-10-20 17:48:43,287 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_move
2017-10-20 17:48:43,287 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-20 17:48:43,288 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:43,289 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-20 17:48:43,289 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:set_timeout
2017-10-20 17:48:43,291 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-20 17:48:43,291 - session_2017-10-20T17_48_43_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:48:43,291 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:48:43,291 - session_2017-10-20T17_48_43_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,292 - session_2017-10-20T17_48_43_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,292 - session_2017-10-20T17_48_43_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,292 - session_2017-10-20T17_48_43_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,292 - session_2017-10-20T17_48_43_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-20 17:48:43,292 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-20 17:48:43,292 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:48:43,293 - session_2017-10-20T17_48_43_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:48:43,293 - session_2017-10-20T17_48_43_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-20 17:48:43,293 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-20 17:48:43,293 - session_2017-10-20T17_48_43_0 - DEBUG - Sent.
2017-10-20 17:48:43,293 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:48:43,293 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:48:43,294 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:48:43,295 - session_2017-10-20T17_48_43_0 - DEBUG - Sent.
2017-10-20 17:48:43,295 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-20 17:48:43,295 - session_2017-10-20T17_48_43_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-20 17:48:43,295 - session_2017-10-20T17_48_43_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-20 17:48:43,296 - session_2017-10-20T17_48_43_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:43,296 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:43,297 - session_2017-10-20T17_48_43_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:43,297 - session_2017-10-20T17_48_43_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:48:43,297 - session_2017-10-20T17_48_43_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:48:43,297 - session_2017-10-20T17_48_43_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:48:43,297 - session_2017-10-20T17_48_43_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:48:43,297 - session_2017-10-20T17_48_43_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-20 17:48:43,298 - session_2017-10-20T17_48_43_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-20 17:48:43,298 - session_2017-10-20T17_48_43_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:48:43,299 - session_2017-10-20T17_48_43_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-20 17:48:43,299 - session_2017-10-20T17_48_43_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:48:43,299 - session_2017-10-20T17_48_43_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:43,301 - session_2017-10-20T17_48_43_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-20 17:48:43,301 - session_2017-10-20T17_48_43_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-20 17:48:43,301 - session_2017-10-20T17_48_43_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-20 17:48:43,301 - session_2017-10-20T17_48_43_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-20 17:48:43,301 - session_2017-10-20T17_48_43_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-20 17:48:43,301 - session_2017-10-20T17_48_43_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-20 17:48:43,302 - session_2017-10-20T17_48_43_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-20 17:48:43,302 - session_2017-10-20T17_48_43_0 - DEBUG - GuiBackend generated message []
2017-10-20 17:48:43,302 - session_2017-10-20T17_48_43_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:48:43,302 - session_2017-10-20T17_48_43_0 - DEBUG - GuiBackend posted event
2017-10-20 17:48:43,302 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-20 17:48:43,302 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-20 17:48:43,302 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-20 17:48:43,303 - session_2017-10-20T17_48_43_0 - DEBUG - Sent.
2017-10-20 17:48:43,303 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-20 17:48:43,303 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-20 17:48:43,303 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-20 17:48:43,304 - session_2017-10-20T17_48_43_0 - DEBUG - Sent.
2017-10-20 17:48:43,304 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:48:43,344 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-20 17:48:43,345 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:48:43,345 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-20 17:48:43,345 - session_2017-10-20T17_48_43_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-20 17:48:43,345 - session_2017-10-20T17_48_43_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-20 17:48:43,345 - session_2017-10-20T17_48_43_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:48:43,345 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:48:43,345 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-20 17:48:43,346 - session_2017-10-20T17_48_43_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-20 17:48:43,347 - session_2017-10-20T17_48_43_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7ef1883090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7ef20bab90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514523.35
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:48:43,347 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:48:43,347 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:48:43,347 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:48:43,350 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-20 17:48:43,350 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:48:43,350 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:48:43,352 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - INFO - BEGIN integrate_moves
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-20 17:48:43,353 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:integrate
2017-10-20 17:48:43,356 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-20 17:48:43,357 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:48:43,357 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:48:43,357 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:48:43,357 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:43,358 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:integrate
2017-10-20 17:48:43,360 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-20 17:48:43,360 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:48:43,360 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_action
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:48:43,361 - session_2017-10-20T17_48_43_0 - INFO - breaking out of accommodate
2017-10-20 17:48:43,362 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:43,362 - session_2017-10-20T17_48_43_0 - INFO - END integrate_moves
2017-10-20 17:48:43,362 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:43,362 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:43,362 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdate_qud
2017-10-20 17:48:43,362 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:48:43,362 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:43,363 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:43,363 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:48:43,363 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:enable_timeout
2017-10-20 17:48:43,365 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:43,365 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:48:43,365 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:48:43,365 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-20 17:48:43,365 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-20 17:48:43,365 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-20 17:48:43,366 - session_2017-10-20T17_48_43_0 - DEBUG - Sent.
2017-10-20 17:48:43,366 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-20 17:48:43,366 - session_2017-10-20T17_48_43_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:48:43,367 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-20 17:48:43,367 - session_2017-10-20T17_48_43_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-20 17:48:47,058 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-20 17:48:47,058 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_external_event(...)
2017-10-20 17:48:47,058 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-20 17:48:47,058 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:48:47,059 - session_2017-10-20T17_48_43_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:48:47,059 - session_2017-10-20T17_48_43_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-20 17:48:47,059 - session_2017-10-20T17_48_43_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-20 17:48:47,064 - session_2017-10-20T17_48_43_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-20 17:48:47,065 - session_2017-10-20T17_48_43_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-20 17:48:47,065 - session_2017-10-20T17_48_43_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-20 17:48:47,065 - session_2017-10-20T17_48_43_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:48:47,065 - session_2017-10-20T17_48_43_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-20 17:48:47,066 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-20 17:48:47,066 - session_2017-10-20T17_48_43_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-20 17:48:47,066 - session_2017-10-20T17_48_43_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-20 17:48:47,066 - session_2017-10-20T17_48_43_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:48:47,066 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-20 17:48:47,066 - session_2017-10-20T17_48_43_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-20 17:48:47,067 - session_2017-10-20T17_48_43_0 - DEBUG - Sent.
2017-10-20 17:48:47,067 - session_2017-10-20T17_48_43_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-20 17:48:47,068 - session_2017-10-20T17_48_43_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:48:47,068 - session_2017-10-20T17_48_43_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:48:47,068 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-20 17:48:47,069 - session_2017-10-20T17_48_43_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-20 17:48:47,070 - session_2017-10-20T17_48_43_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f7ef1883090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f7ef20bab90>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508514527.07
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-20 17:48:47,070 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:48:47,073 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-20 17:48:47,073 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:filterReadings
2017-10-20 17:48:47,077 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-20 17:48:47,077 - session_2017-10-20T17_48_43_0 - INFO - hypotheses reranking had no effect
2017-10-20 17:48:47,077 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-20 17:48:47,081 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-20 17:48:47,081 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-20 17:48:47,086 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-20 17:48:47,086 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-20 17:48:47,086 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-20 17:48:47,088 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-20 17:48:47,088 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-20 17:48:47,089 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-20 17:48:47,092 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-20 17:48:47,093 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-20 17:48:47,093 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-20 17:48:47,093 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-20 17:48:47,094 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdateClarification
2017-10-20 17:48:47,094 - session_2017-10-20T17_48_43_0 - INFO - BEGIN integrate_moves
2017-10-20 17:48:47,094 - session_2017-10-20T17_48_43_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:48:47,094 - session_2017-10-20T17_48_43_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-20 17:48:47,094 - session_2017-10-20T17_48_43_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-20 17:48:47,095 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:integrate
2017-10-20 17:48:47,099 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-20 17:48:47,099 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-20 17:48:47,099 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:downdate_goals
2017-10-20 17:48:47,103 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-20 17:48:47,103 - session_2017-10-20T17_48_43_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-20 17:48:47,103 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:load_plan
2017-10-20 17:48:47,107 - session_2017-10-20T17_48_43_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([findout(?X.done(X)), device_query(?X.say_step(X)), forget(done)])
-- END TIS changes --
2017-10-20 17:48:47,107 - session_2017-10-20T17_48_43_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-20 17:48:47,107 - session_2017-10-20T17_48_43_0 - INFO - END try_move_integratation_without_accommodation
2017-10-20 17:48:47,107 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:removeYesNo
2017-10-20 17:48:47,107 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_action
2017-10-20 17:48:47,107 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:47,108 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:accommodate
2017-10-20 17:48:47,108 - session_2017-10-20T17_48_43_0 - INFO - breaking out of accommodate
2017-10-20 17:48:47,108 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:select_reject
2017-10-20 17:48:47,108 - session_2017-10-20T17_48_43_0 - INFO - END integrate_moves
2017-10-20 17:48:47,108 - session_2017-10-20T17_48_43_0 - DEBUG - rulegroup:exec_plan
2017-10-20 17:48:47,109 - session_2017-10-20T17_48_43_0 - ERROR - exception in DmeModule
Traceback (most recent call last):
  File "/usr/lib64/python2.7/site-packages/tdm/lib/module.py", line 59, in process_event
    handler()
  File "/usr/lib64/python2.7/site-packages/tdm/dme_module.py", line 54, in handle_user_moves
    self._set_input_event_and_run_update_and_select()
  File "/usr/lib64/python2.7/site-packages/tdm/dme_module.py", line 58, in _set_input_event_and_run_update_and_select
    self.run_update_and_set_ddd_when_needed()
  File "/usr/lib64/python2.7/site-packages/tdm/dme_module.py", line 63, in run_update_and_set_ddd_when_needed
    self.run_update()
  File "/usr/lib64/python2.7/site-packages/tdm/dme_module.py", line 107, in run_update
    self.update_module.run(self.tis())
  File "tdm/update.py", line 166, in tdm.update.UpdateModule.run (tdm/update.c:8834)
  File "/usr/lib64/python2.7/site-packages/tdm/maharani/maharanilib.py", line 425, in repeatGroupSequence
    if self._apply(ruleGroup, identifier, tis):
  File "/usr/lib64/python2.7/site-packages/tdm/maharani/maharanilib.py", line 436, in _apply
    if self.applyRule(rule, tis):
  File "/usr/lib64/python2.7/site-packages/tdm/maharani/maharanilib.py", line 362, in applyRule
    if rule.testPreconditions(self._ddd_manager, tis):
  File "/usr/lib64/python2.7/site-packages/tdm/maharani/maharanilib.py", line 273, in testPreconditions
    return self.preconditions(ddd_manager, self.tis)
  File "tdm/update.py", line 1912, in tdm.update.exec_findoutFromDevice.preconditions (tdm/update.c:78944)
  File "/usr/lib64/python2.7/site-packages/tdm/tis.py", line 1325, in get_resolving_results_from_devices
    all_results = device_handler.query_all(question, self.shared.com)
  File "/usr/lib64/python2.7/site-packages/tdm/device_handler.py", line 153, in query_all
    self._validate_query_result(result_descriptions, query)
  File "/usr/lib64/python2.7/site-packages/tdm/device_handler.py", line 160, in _validate_query_result
    for result in result_descriptions:
TypeError: 'NoneType' object is not iterable
2017-10-20 17:48:47,110 - session_2017-10-20T17_48_43_0 - DEBUG - DmeModule posts Event(BACKEND_ERROR, None, sender=DmeModule, reason=None)
